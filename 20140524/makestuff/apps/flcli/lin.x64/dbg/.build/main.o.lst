   1              		.file	"main.c"
   2              		.text
   3              	.Ltext0:
   4              		.local	ptr
   5              		.comm	ptr,8,8
   6              		.local	enableBenchmarking
   7              		.comm	enableBenchmarking,1,1
   8              		.globl	Key
   9              		.data
  10              		.align 8
  13              	Key:
  14 0000 0F000000 		.quad	15
  14      00000000 
  15              		.globl	Kack1
  16              		.align 8
  19              	Kack1:
  20 0008 12010000 		.quad	274
  20      00000000 
  21              		.globl	Kack2
  22              		.align 8
  25              	Kack2:
  26 0010 12010000 		.quad	274
  26      00000000 
  27              		.text
  29              	isHexDigit:
  30              	.LFB4:
  31              		.file 1 "main.c"
   1:main.c        **** /* 
   2:main.c        ****  * Copyright (C) 2012-2014 Chris McClelland
   3:main.c        ****  *
   4:main.c        ****  * This program is free software: you can redistribute it and/or modify
   5:main.c        ****  * it under the terms of the GNU General Public License as published by
   6:main.c        ****  * the Free Software Foundation, either version 3 of the License, or
   7:main.c        ****  * (at your option) any later version.
   8:main.c        ****  *
   9:main.c        ****  * This program is distributed in the hope that it will be useful,
  10:main.c        ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:main.c        ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:main.c        ****  * GNU General Public License for more details.
  13:main.c        ****  *  
  14:main.c        ****  * You should have received a copy of the GNU General Public License
  15:main.c        ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:main.c        ****  */
  17:main.c        **** #include <stdio.h>
  18:main.c        **** #include <stdlib.h>
  19:main.c        **** #include <string.h>
  20:main.c        **** #include <errno.h>
  21:main.c        **** #include <makestuff.h>
  22:main.c        **** #include <libfpgalink.h>
  23:main.c        **** #include <libbuffer.h>
  24:main.c        **** #include <limits.h>
  25:main.c        **** #include <liberror.h>
  26:main.c        **** #include <libdump.h>
  27:main.c        **** #include <argtable2.h>
  28:main.c        **** #include <readline/readline.h>
  29:main.c        **** #include <readline/history.h>
  30:main.c        **** #ifdef WIN32
  31:main.c        **** #include <Windows.h>
  32:main.c        **** #else
  33:main.c        **** #include <sys/time.h>
  34:main.c        **** #endif
  35:main.c        **** #include <unistd.h>
  36:main.c        **** 
  37:main.c        **** 
  38:main.c        **** bool sigIsRaised(void);
  39:main.c        **** void sigRegisterHandler(void);
  40:main.c        **** 
  41:main.c        **** static const char *ptr;
  42:main.c        **** static bool enableBenchmarking = false;
  43:main.c        **** bool nthbit( long, long);
  44:main.c        **** long encrypter( long, long);
  45:main.c        **** long decrypter( long, long);
  46:main.c        **** void decToHexa32(unsigned long, char*);
  47:main.c        **** void send_data(long , char*);
  48:main.c        **** void send_chan(long , char*, int);
  49:main.c        **** void read_chan(char*, char*, int);
  50:main.c        **** void editfile(int,int,char*,long);
  51:main.c        **** long Key=15;
  52:main.c        **** long Kack1=274,Kack2=274;
  53:main.c        **** 
  54:main.c        **** 
  55:main.c        **** static bool isHexDigit(char ch) {
  32              		.loc 1 55 0
  33              		.cfi_startproc
  34 0000 55       		pushq	%rbp
  35              		.cfi_def_cfa_offset 16
  36              		.cfi_offset 6, -16
  37 0001 4889E5   		movq	%rsp, %rbp
  38              		.cfi_def_cfa_register 6
  39 0004 89F8     		movl	%edi, %eax
  40 0006 8845FC   		movb	%al, -4(%rbp)
  56:main.c        **** 	return
  57:main.c        **** 		(ch >= '0' && ch <= '9') ||
  58:main.c        **** 		(ch >= 'a' && ch <= 'f') ||
  41              		.loc 1 58 0
  42 0009 807DFC2F 		cmpb	$47, -4(%rbp)
  43 000d 7E06     		jle	.L2
  57:main.c        **** 		(ch >= 'a' && ch <= 'f') ||
  44              		.loc 1 57 0
  45 000f 807DFC39 		cmpb	$57, -4(%rbp)
  46 0013 7E18     		jle	.L3
  47              	.L2:
  57:main.c        **** 		(ch >= 'a' && ch <= 'f') ||
  48              		.loc 1 57 0 is_stmt 0 discriminator 1
  49 0015 807DFC60 		cmpb	$96, -4(%rbp)
  50 0019 7E06     		jle	.L4
  51              		.loc 1 58 0 is_stmt 1
  52 001b 807DFC66 		cmpb	$102, -4(%rbp)
  53 001f 7E0C     		jle	.L3
  54              	.L4:
  55              		.loc 1 58 0 is_stmt 0 discriminator 2
  56 0021 807DFC40 		cmpb	$64, -4(%rbp)
  57 0025 7E0D     		jle	.L5
  59:main.c        **** 		(ch >= 'A' && ch <= 'F');
  58              		.loc 1 59 0 is_stmt 1
  59 0027 807DFC46 		cmpb	$70, -4(%rbp)
  60 002b 7F07     		jg	.L5
  61              	.L3:
  58:main.c        **** 		(ch >= 'A' && ch <= 'F');
  62              		.loc 1 58 0 discriminator 1
  63 002d B8010000 		movl	$1, %eax
  63      00
  64 0032 EB05     		jmp	.L6
  65              	.L5:
  58:main.c        **** 		(ch >= 'A' && ch <= 'F');
  66              		.loc 1 58 0 is_stmt 0 discriminator 3
  67 0034 B8000000 		movl	$0, %eax
  67      00
  68              	.L6:
  57:main.c        **** 		(ch >= 'a' && ch <= 'f') ||
  69              		.loc 1 57 0 is_stmt 1
  70 0039 83E001   		andl	$1, %eax
  60:main.c        **** }
  71              		.loc 1 60 0
  72 003c 5D       		popq	%rbp
  73              		.cfi_def_cfa 7, 8
  74 003d C3       		ret
  75              		.cfi_endproc
  76              	.LFE4:
  79              	calcChecksum:
  80              	.LFB5:
  61:main.c        **** 
  62:main.c        **** static uint16 calcChecksum(const uint8 *data, size_t length) {
  81              		.loc 1 62 0
  82              		.cfi_startproc
  83 003e 55       		pushq	%rbp
  84              		.cfi_def_cfa_offset 16
  85              		.cfi_offset 6, -16
  86 003f 4889E5   		movq	%rsp, %rbp
  87              		.cfi_def_cfa_register 6
  88 0042 48897DE8 		movq	%rdi, -24(%rbp)
  89 0046 488975E0 		movq	%rsi, -32(%rbp)
  63:main.c        **** 	uint16 cksum = 0x0000;
  90              		.loc 1 63 0
  91 004a 66C745FE 		movw	$0, -2(%rbp)
  91      0000
  64:main.c        **** 	while ( length-- ) {
  92              		.loc 1 64 0
  93 0050 EB16     		jmp	.L9
  94              	.L10:
  65:main.c        **** 		cksum = (uint16)(cksum + *data++);
  95              		.loc 1 65 0
  96 0052 488B45E8 		movq	-24(%rbp), %rax
  97 0056 488D5001 		leaq	1(%rax), %rdx
  98 005a 488955E8 		movq	%rdx, -24(%rbp)
  99 005e 0FB600   		movzbl	(%rax), %eax
 100 0061 0FB6C0   		movzbl	%al, %eax
 101 0064 660145FE 		addw	%ax, -2(%rbp)
 102              	.L9:
  64:main.c        **** 	while ( length-- ) {
 103              		.loc 1 64 0
 104 0068 488B45E0 		movq	-32(%rbp), %rax
 105 006c 488D50FF 		leaq	-1(%rax), %rdx
 106 0070 488955E0 		movq	%rdx, -32(%rbp)
 107 0074 4885C0   		testq	%rax, %rax
 108 0077 75D9     		jne	.L10
  66:main.c        **** 	}
  67:main.c        **** 	return cksum;
 109              		.loc 1 67 0
 110 0079 0FB745FE 		movzwl	-2(%rbp), %eax
  68:main.c        **** }
 111              		.loc 1 68 0
 112 007d 5D       		popq	%rbp
 113              		.cfi_def_cfa 7, 8
 114 007e C3       		ret
 115              		.cfi_endproc
 116              	.LFE5:
 119              	getHexNibble:
 120              	.LFB6:
  69:main.c        **** 
  70:main.c        **** static bool getHexNibble(char hexDigit, uint8 *nibble) {
 121              		.loc 1 70 0
 122              		.cfi_startproc
 123 007f 55       		pushq	%rbp
 124              		.cfi_def_cfa_offset 16
 125              		.cfi_offset 6, -16
 126 0080 4889E5   		movq	%rsp, %rbp
 127              		.cfi_def_cfa_register 6
 128 0083 89F8     		movl	%edi, %eax
 129 0085 488975F0 		movq	%rsi, -16(%rbp)
 130 0089 8845FC   		movb	%al, -4(%rbp)
  71:main.c        **** 	if ( hexDigit >= '0' && hexDigit <= '9' ) {
 131              		.loc 1 71 0
 132 008c 807DFC2F 		cmpb	$47, -4(%rbp)
 133 0090 7E1A     		jle	.L13
 134              		.loc 1 71 0 is_stmt 0 discriminator 1
 135 0092 807DFC39 		cmpb	$57, -4(%rbp)
 136 0096 7F14     		jg	.L13
  72:main.c        **** 		*nibble = (uint8)(hexDigit - '0');
 137              		.loc 1 72 0 is_stmt 1
 138 0098 0FB645FC 		movzbl	-4(%rbp), %eax
 139 009c 8D50D0   		leal	-48(%rax), %edx
 140 009f 488B45F0 		movq	-16(%rbp), %rax
 141 00a3 8810     		movb	%dl, (%rax)
  73:main.c        **** 		return false;
 142              		.loc 1 73 0
 143 00a5 B8000000 		movl	$0, %eax
 143      00
 144 00aa EB45     		jmp	.L14
 145              	.L13:
  74:main.c        **** 	} else if ( hexDigit >= 'a' && hexDigit <= 'f' ) {
 146              		.loc 1 74 0
 147 00ac 807DFC60 		cmpb	$96, -4(%rbp)
 148 00b0 7E1A     		jle	.L15
 149              		.loc 1 74 0 is_stmt 0 discriminator 1
 150 00b2 807DFC66 		cmpb	$102, -4(%rbp)
 151 00b6 7F14     		jg	.L15
  75:main.c        **** 		*nibble = (uint8)(hexDigit - 'a' + 10);
 152              		.loc 1 75 0 is_stmt 1
 153 00b8 0FB645FC 		movzbl	-4(%rbp), %eax
 154 00bc 8D50A9   		leal	-87(%rax), %edx
 155 00bf 488B45F0 		movq	-16(%rbp), %rax
 156 00c3 8810     		movb	%dl, (%rax)
  76:main.c        **** 		return false;
 157              		.loc 1 76 0
 158 00c5 B8000000 		movl	$0, %eax
 158      00
 159 00ca EB25     		jmp	.L14
 160              	.L15:
  77:main.c        **** 	} else if ( hexDigit >= 'A' && hexDigit <= 'F' ) {
 161              		.loc 1 77 0
 162 00cc 807DFC40 		cmpb	$64, -4(%rbp)
 163 00d0 7E1A     		jle	.L16
 164              		.loc 1 77 0 is_stmt 0 discriminator 1
 165 00d2 807DFC46 		cmpb	$70, -4(%rbp)
 166 00d6 7F14     		jg	.L16
  78:main.c        **** 		*nibble = (uint8)(hexDigit - 'A' + 10);
 167              		.loc 1 78 0 is_stmt 1
 168 00d8 0FB645FC 		movzbl	-4(%rbp), %eax
 169 00dc 8D50C9   		leal	-55(%rax), %edx
 170 00df 488B45F0 		movq	-16(%rbp), %rax
 171 00e3 8810     		movb	%dl, (%rax)
  79:main.c        **** 		return false;
 172              		.loc 1 79 0
 173 00e5 B8000000 		movl	$0, %eax
 173      00
 174 00ea EB05     		jmp	.L14
 175              	.L16:
  80:main.c        **** 	} else {
  81:main.c        **** 		return true;
 176              		.loc 1 81 0
 177 00ec B8010000 		movl	$1, %eax
 177      00
 178              	.L14:
  82:main.c        **** 	}
  83:main.c        **** }
 179              		.loc 1 83 0
 180 00f1 5D       		popq	%rbp
 181              		.cfi_def_cfa 7, 8
 182 00f2 C3       		ret
 183              		.cfi_endproc
 184              	.LFE6:
 187              	getHexByte:
 188              	.LFB7:
  84:main.c        **** 
  85:main.c        **** static int getHexByte(uint8 *byte) {
 189              		.loc 1 85 0
 190              		.cfi_startproc
 191 00f3 55       		pushq	%rbp
 192              		.cfi_def_cfa_offset 16
 193              		.cfi_offset 6, -16
 194 00f4 4889E5   		movq	%rsp, %rbp
 195              		.cfi_def_cfa_register 6
 196 00f7 4883EC20 		subq	$32, %rsp
 197 00fb 48897DE8 		movq	%rdi, -24(%rbp)
 198              		.loc 1 85 0
 199 00ff 64488B04 		movq	%fs:40, %rax
 199      25280000 
 199      00
 200 0108 488945F8 		movq	%rax, -8(%rbp)
 201 010c 31C0     		xorl	%eax, %eax
  86:main.c        **** 	uint8 upperNibble;
  87:main.c        **** 	uint8 lowerNibble;
  88:main.c        **** 	if ( !getHexNibble(ptr[0], &upperNibble) && !getHexNibble(ptr[1], &lowerNibble) ) {
 202              		.loc 1 88 0
 203 010e 488B0500 		movq	ptr(%rip), %rax
 203      000000
 204 0115 0FB600   		movzbl	(%rax), %eax
 205 0118 0FBEC0   		movsbl	%al, %eax
 206 011b 488D55F6 		leaq	-10(%rbp), %rdx
 207 011f 4889D6   		movq	%rdx, %rsi
 208 0122 89C7     		movl	%eax, %edi
 209 0124 E856FFFF 		call	getHexNibble
 209      FF
 210 0129 83F001   		xorl	$1, %eax
 211 012c 84C0     		testb	%al, %al
 212 012e 744C     		je	.L18
 213              		.loc 1 88 0 is_stmt 0 discriminator 1
 214 0130 488B0500 		movq	ptr(%rip), %rax
 214      000000
 215 0137 4883C001 		addq	$1, %rax
 216 013b 0FB600   		movzbl	(%rax), %eax
 217 013e 0FBEC0   		movsbl	%al, %eax
 218 0141 488D55F7 		leaq	-9(%rbp), %rdx
 219 0145 4889D6   		movq	%rdx, %rsi
 220 0148 89C7     		movl	%eax, %edi
 221 014a E830FFFF 		call	getHexNibble
 221      FF
 222 014f 83F001   		xorl	$1, %eax
 223 0152 84C0     		testb	%al, %al
 224 0154 7426     		je	.L18
  89:main.c        **** 		*byte = (uint8)((upperNibble << 4) | lowerNibble);
 225              		.loc 1 89 0 is_stmt 1
 226 0156 0FB645F6 		movzbl	-10(%rbp), %eax
 227 015a 0FB6C0   		movzbl	%al, %eax
 228 015d C1E004   		sall	$4, %eax
 229 0160 89C2     		movl	%eax, %edx
 230 0162 0FB645F7 		movzbl	-9(%rbp), %eax
 231 0166 09D0     		orl	%edx, %eax
 232 0168 89C2     		movl	%eax, %edx
 233 016a 488B45E8 		movq	-24(%rbp), %rax
 234 016e 8810     		movb	%dl, (%rax)
  90:main.c        **** 		byte += 2;
 235              		.loc 1 90 0
 236 0170 488345E8 		addq	$2, -24(%rbp)
 236      02
  91:main.c        **** 		return 0;
 237              		.loc 1 91 0
 238 0175 B8000000 		movl	$0, %eax
 238      00
 239 017a EB05     		jmp	.L20
 240              	.L18:
  92:main.c        **** 	} else {
  93:main.c        **** 		return 1;
 241              		.loc 1 93 0
 242 017c B8010000 		movl	$1, %eax
 242      00
 243              	.L20:
  94:main.c        **** 	}
  95:main.c        **** }
 244              		.loc 1 95 0 discriminator 1
 245 0181 488B4DF8 		movq	-8(%rbp), %rcx
 246 0185 6448330C 		xorq	%fs:40, %rcx
 246      25280000 
 246      00
 247 018e 7405     		je	.L21
 248              		.loc 1 95 0 is_stmt 0
 249 0190 E8000000 		call	__stack_chk_fail
 249      00
 250              	.L21:
 251 0195 C9       		leave
 252              		.cfi_def_cfa 7, 8
 253 0196 C3       		ret
 254              		.cfi_endproc
 255              	.LFE7:
 257              		.section	.rodata
 258              	.LC0:
 259 0000 556E7061 		.string	"Unparseable hex number"
 259      72736561 
 259      626C6520 
 259      68657820 
 259      6E756D62 
 260              	.LC1:
 261 0017 4368616E 		.string	"Channel out of range"
 261      6E656C20 
 261      6F757420 
 261      6F662072 
 261      616E6765 
 262              	.LC2:
 263 002c 436F6E64 		.string	"Conduit out of range"
 263      75697420 
 263      6F757420 
 263      6F662072 
 263      616E6765 
 264              	.LC3:
 265 0041 496C6C65 		.string	"Illegal character"
 265      67616C20 
 265      63686172 
 265      61637465 
 265      7200
 266              	.LC4:
 267 0053 556E7465 		.string	"Unterminated string"
 267      726D696E 
 267      61746564 
 267      20737472 
 267      696E6700 
 268              	.LC5:
 269 0067 4E6F206D 		.string	"No memory"
 269      656D6F72 
 269      7900
 270              	.LC6:
 271 0071 456D7074 		.string	"Empty string"
 271      79207374 
 271      72696E67 
 271      00
 272              	.LC7:
 273 007e 4F646420 		.string	"Odd number of digits"
 273      6E756D62 
 273      6572206F 
 273      66206469 
 273      67697473 
 274              	.LC8:
 275 0093 43616E6E 		.string	"Cannot load file"
 275      6F74206C 
 275      6F616420 
 275      66696C65 
 275      00
 276              	.LC9:
 277 00a4 43616E6E 		.string	"Cannot save file"
 277      6F742073 
 277      61766520 
 277      66696C65 
 277      00
 278              	.LC10:
 279 00b5 42616420 		.string	"Bad arguments"
 279      61726775 
 279      6D656E74 
 279      7300
 280 00c3 00000000 		.align 32
 280      00000000 
 280      00000000 
 280      00000000 
 280      00000000 
 283              	errMessages:
 284 00e0 00000000 		.quad	0
 284      00000000 
 285 00e8 00000000 		.quad	0
 285      00000000 
 286 00f0 00000000 		.quad	.LC0
 286      00000000 
 287 00f8 00000000 		.quad	.LC1
 287      00000000 
 288 0100 00000000 		.quad	.LC2
 288      00000000 
 289 0108 00000000 		.quad	.LC3
 289      00000000 
 290 0110 00000000 		.quad	.LC4
 290      00000000 
 291 0118 00000000 		.quad	.LC5
 291      00000000 
 292 0120 00000000 		.quad	.LC6
 292      00000000 
 293 0128 00000000 		.quad	.LC7
 293      00000000 
 294 0130 00000000 		.quad	.LC8
 294      00000000 
 295 0138 00000000 		.quad	.LC9
 295      00000000 
 296 0140 00000000 		.quad	.LC10
 296      00000000 
 297              	.LC11:
 298 0148 646F5265 		.string	"doRead()"
 298      61642829 
 298      00
 299              		.text
 301              	doRead:
 302              	.LFB8:
  96:main.c        **** 
  97:main.c        **** static const char *const errMessages[] = {
  98:main.c        **** 	NULL,
  99:main.c        **** 	NULL,
 100:main.c        **** 	"Unparseable hex number",
 101:main.c        **** 	"Channel out of range",
 102:main.c        **** 	"Conduit out of range",
 103:main.c        **** 	"Illegal character",
 104:main.c        **** 	"Unterminated string",
 105:main.c        **** 	"No memory",
 106:main.c        **** 	"Empty string",
 107:main.c        **** 	"Odd number of digits",
 108:main.c        **** 	"Cannot load file",
 109:main.c        **** 	"Cannot save file",
 110:main.c        **** 	"Bad arguments"
 111:main.c        **** };
 112:main.c        **** 
 113:main.c        **** typedef enum {
 114:main.c        **** 	FLP_SUCCESS,
 115:main.c        **** 	FLP_LIBERR,
 116:main.c        **** 	FLP_BAD_HEX,
 117:main.c        **** 	FLP_CHAN_RANGE,
 118:main.c        **** 	FLP_CONDUIT_RANGE,
 119:main.c        **** 	FLP_ILL_CHAR,
 120:main.c        **** 	FLP_UNTERM_STRING,
 121:main.c        **** 	FLP_NO_MEMORY,
 122:main.c        **** 	FLP_EMPTY_STRING,
 123:main.c        **** 	FLP_ODD_DIGITS,
 124:main.c        **** 	FLP_CANNOT_LOAD,
 125:main.c        **** 	FLP_CANNOT_SAVE,
 126:main.c        **** 	FLP_ARGS
 127:main.c        **** } ReturnCode;
 128:main.c        **** 
 129:main.c        **** static ReturnCode doRead(
 130:main.c        **** 	struct FLContext *handle, uint8 chan, uint32 length, FILE *destFile, uint16 *checksum,
 131:main.c        **** 	const char **error, long tim)
 132:main.c        **** {
 303              		.loc 1 132 0 is_stmt 1
 304              		.cfi_startproc
 305 0197 55       		pushq	%rbp
 306              		.cfi_def_cfa_offset 16
 307              		.cfi_offset 6, -16
 308 0198 4889E5   		movq	%rsp, %rbp
 309              		.cfi_def_cfa_register 6
 310 019b 4883EC60 		subq	$96, %rsp
 311 019f 48897DC8 		movq	%rdi, -56(%rbp)
 312 01a3 89F0     		movl	%esi, %eax
 313 01a5 8955C0   		movl	%edx, -64(%rbp)
 314 01a8 48894DB8 		movq	%rcx, -72(%rbp)
 315 01ac 4C8945B0 		movq	%r8, -80(%rbp)
 316 01b0 4C894DA8 		movq	%r9, -88(%rbp)
 317 01b4 8845C4   		movb	%al, -60(%rbp)
 318              		.loc 1 132 0
 319 01b7 64488B04 		movq	%fs:40, %rax
 319      25280000 
 319      00
 320 01c0 488945F8 		movq	%rax, -8(%rbp)
 321 01c4 31C0     		xorl	%eax, %eax
 133:main.c        **** 	ReturnCode retVal = FLP_SUCCESS;
 322              		.loc 1 133 0
 323 01c6 C745D800 		movl	$0, -40(%rbp)
 323      000000
 134:main.c        **** 	uint32 bytesWritten;
 135:main.c        **** 	FLStatus fStatus;
 136:main.c        **** 	uint32 chunkSize;
 137:main.c        **** 	const uint8 *recvData;
 138:main.c        **** 	uint32 actualLength;
 139:main.c        **** 	const uint8 *ptr;
 140:main.c        **** 	uint16 csVal = 0x0000;
 324              		.loc 1 140 0
 325 01cd 66C745D2 		movw	$0, -46(%rbp)
 325      0000
 141:main.c        **** 	#define READ_MAX 65536
 142:main.c        **** 
 143:main.c        **** 	// Read first chunk
 144:main.c        **** 	chunkSize = length >= READ_MAX ? READ_MAX : length;
 326              		.loc 1 144 0
 327 01d3 B8000001 		movl	$65536, %eax
 327      00
 328 01d8 817DC000 		cmpl	$65536, -64(%rbp)
 328      000100
 329 01df 0F4645C0 		cmovbe	-64(%rbp), %eax
 330 01e3 8945DC   		movl	%eax, -36(%rbp)
 145:main.c        **** 	fStatus = flReadChannelAsyncSubmit(handle, chan, chunkSize, NULL, error, tim);
 331              		.loc 1 145 0
 332 01e6 0FB675C4 		movzbl	-60(%rbp), %esi
 333 01ea 488B4DA8 		movq	-88(%rbp), %rcx
 334 01ee 8B55DC   		movl	-36(%rbp), %edx
 335 01f1 488B45C8 		movq	-56(%rbp), %rax
 336 01f5 4C8B4D10 		movq	16(%rbp), %r9
 337 01f9 4989C8   		movq	%rcx, %r8
 338 01fc B9000000 		movl	$0, %ecx
 338      00
 339 0201 4889C7   		movq	%rax, %rdi
 340 0204 E8000000 		call	flReadChannelAsyncSubmit
 340      00
 341 0209 8945E0   		movl	%eax, -32(%rbp)
 146:main.c        **** 	CHECK_STATUS(fStatus, FLP_LIBERR, cleanup, "doRead()");
 342              		.loc 1 146 0
 343 020c 837DE000 		cmpl	$0, -32(%rbp)
 344 0210 741D     		je	.L23
 345              		.loc 1 146 0 is_stmt 0 discriminator 1
 346 0212 488B45A8 		movq	-88(%rbp), %rax
 347 0216 BE000000 		movl	$.LC11, %esi
 347      00
 348 021b 4889C7   		movq	%rax, %rdi
 349 021e E8000000 		call	errPrefix
 349      00
 350 0223 C745D801 		movl	$1, -40(%rbp)
 350      000000
 351 022a E9070200 		jmp	.L24
 351      00
 352              	.L23:
 147:main.c        **** 	length = length - chunkSize;
 353              		.loc 1 147 0 is_stmt 1
 354 022f 8B45DC   		movl	-36(%rbp), %eax
 355 0232 2945C0   		subl	%eax, -64(%rbp)
 148:main.c        **** 
 149:main.c        **** 	while ( length ) {
 356              		.loc 1 149 0
 357 0235 E9260100 		jmp	.L25
 357      00
 358              	.L31:
 150:main.c        **** 		// Read chunk N
 151:main.c        **** 		chunkSize = length >= READ_MAX ? READ_MAX : length;
 359              		.loc 1 151 0
 360 023a B8000001 		movl	$65536, %eax
 360      00
 361 023f 817DC000 		cmpl	$65536, -64(%rbp)
 361      000100
 362 0246 0F4645C0 		cmovbe	-64(%rbp), %eax
 363 024a 8945DC   		movl	%eax, -36(%rbp)
 152:main.c        **** 		fStatus = flReadChannelAsyncSubmit(handle, chan, chunkSize, NULL, error, tim);
 364              		.loc 1 152 0
 365 024d 0FB675C4 		movzbl	-60(%rbp), %esi
 366 0251 488B4DA8 		movq	-88(%rbp), %rcx
 367 0255 8B55DC   		movl	-36(%rbp), %edx
 368 0258 488B45C8 		movq	-56(%rbp), %rax
 369 025c 4C8B4D10 		movq	16(%rbp), %r9
 370 0260 4989C8   		movq	%rcx, %r8
 371 0263 B9000000 		movl	$0, %ecx
 371      00
 372 0268 4889C7   		movq	%rax, %rdi
 373 026b E8000000 		call	flReadChannelAsyncSubmit
 373      00
 374 0270 8945E0   		movl	%eax, -32(%rbp)
 153:main.c        **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup, "doRead()");
 375              		.loc 1 153 0
 376 0273 837DE000 		cmpl	$0, -32(%rbp)
 377 0277 741D     		je	.L26
 378              		.loc 1 153 0 is_stmt 0 discriminator 1
 379 0279 488B45A8 		movq	-88(%rbp), %rax
 380 027d BE000000 		movl	$.LC11, %esi
 380      00
 381 0282 4889C7   		movq	%rax, %rdi
 382 0285 E8000000 		call	errPrefix
 382      00
 383 028a C745D801 		movl	$1, -40(%rbp)
 383      000000
 384 0291 E9A00100 		jmp	.L24
 384      00
 385              	.L26:
 154:main.c        **** 		length = length - chunkSize;
 386              		.loc 1 154 0 is_stmt 1
 387 0296 8B45DC   		movl	-36(%rbp), %eax
 388 0299 2945C0   		subl	%eax, -64(%rbp)
 155:main.c        **** 		
 156:main.c        **** 		// Await chunk N-1
 157:main.c        **** 		fStatus = flReadChannelAsyncAwait(handle, &recvData, &actualLength, &actualLength, error, tim);
 389              		.loc 1 157 0
 390 029c 488B7DA8 		movq	-88(%rbp), %rdi
 391 02a0 488D4DD4 		leaq	-44(%rbp), %rcx
 392 02a4 488D55D4 		leaq	-44(%rbp), %rdx
 393 02a8 488D75E8 		leaq	-24(%rbp), %rsi
 394 02ac 488B45C8 		movq	-56(%rbp), %rax
 395 02b0 4C8B4D10 		movq	16(%rbp), %r9
 396 02b4 4989F8   		movq	%rdi, %r8
 397 02b7 4889C7   		movq	%rax, %rdi
 398 02ba E8000000 		call	flReadChannelAsyncAwait
 398      00
 399 02bf 8945E0   		movl	%eax, -32(%rbp)
 158:main.c        **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup, "doRead()");
 400              		.loc 1 158 0
 401 02c2 837DE000 		cmpl	$0, -32(%rbp)
 402 02c6 741D     		je	.L27
 403              		.loc 1 158 0 is_stmt 0 discriminator 1
 404 02c8 488B45A8 		movq	-88(%rbp), %rax
 405 02cc BE000000 		movl	$.LC11, %esi
 405      00
 406 02d1 4889C7   		movq	%rax, %rdi
 407 02d4 E8000000 		call	errPrefix
 407      00
 408 02d9 C745D801 		movl	$1, -40(%rbp)
 408      000000
 409 02e0 E9510100 		jmp	.L24
 409      00
 410              	.L27:
 159:main.c        **** 
 160:main.c        **** 		// Write chunk N-1 to file
 161:main.c        **** 		bytesWritten = (uint32)fwrite(recvData, 1, actualLength, destFile);
 411              		.loc 1 161 0 is_stmt 1
 412 02e5 8B45D4   		movl	-44(%rbp), %eax
 413 02e8 89C6     		movl	%eax, %esi
 414 02ea 488B45E8 		movq	-24(%rbp), %rax
 415 02ee 488B55B8 		movq	-72(%rbp), %rdx
 416 02f2 4889D1   		movq	%rdx, %rcx
 417 02f5 4889F2   		movq	%rsi, %rdx
 418 02f8 BE010000 		movl	$1, %esi
 418      00
 419 02fd 4889C7   		movq	%rax, %rdi
 420 0300 E8000000 		call	fwrite
 420      00
 421 0305 8945E4   		movl	%eax, -28(%rbp)
 162:main.c        **** 		CHECK_STATUS(bytesWritten != actualLength, FLP_CANNOT_SAVE, cleanup, "doRead()");
 422              		.loc 1 162 0
 423 0308 8B45D4   		movl	-44(%rbp), %eax
 424 030b 3945E4   		cmpl	%eax, -28(%rbp)
 425 030e 741D     		je	.L28
 426              		.loc 1 162 0 is_stmt 0 discriminator 1
 427 0310 488B45A8 		movq	-88(%rbp), %rax
 428 0314 BE000000 		movl	$.LC11, %esi
 428      00
 429 0319 4889C7   		movq	%rax, %rdi
 430 031c E8000000 		call	errPrefix
 430      00
 431 0321 C745D80B 		movl	$11, -40(%rbp)
 431      000000
 432 0328 E9090100 		jmp	.L24
 432      00
 433              	.L28:
 163:main.c        **** 
 164:main.c        **** 		// Checksum chunk N-1
 165:main.c        **** 		chunkSize = actualLength;
 434              		.loc 1 165 0 is_stmt 1
 435 032d 8B45D4   		movl	-44(%rbp), %eax
 436 0330 8945DC   		movl	%eax, -36(%rbp)
 166:main.c        **** 		ptr = recvData;
 437              		.loc 1 166 0
 438 0333 488B45E8 		movq	-24(%rbp), %rax
 439 0337 488945F0 		movq	%rax, -16(%rbp)
 167:main.c        **** 		while ( chunkSize-- ) {
 440              		.loc 1 167 0
 441 033b EB16     		jmp	.L29
 442              	.L30:
 168:main.c        **** 			csVal = (uint16)(csVal + *ptr++);
 443              		.loc 1 168 0
 444 033d 488B45F0 		movq	-16(%rbp), %rax
 445 0341 488D5001 		leaq	1(%rax), %rdx
 446 0345 488955F0 		movq	%rdx, -16(%rbp)
 447 0349 0FB600   		movzbl	(%rax), %eax
 448 034c 0FB6C0   		movzbl	%al, %eax
 449 034f 660145D2 		addw	%ax, -46(%rbp)
 450              	.L29:
 167:main.c        **** 		while ( chunkSize-- ) {
 451              		.loc 1 167 0
 452 0353 8B45DC   		movl	-36(%rbp), %eax
 453 0356 8D50FF   		leal	-1(%rax), %edx
 454 0359 8955DC   		movl	%edx, -36(%rbp)
 455 035c 85C0     		testl	%eax, %eax
 456 035e 75DD     		jne	.L30
 457              	.L25:
 149:main.c        **** 		// Read chunk N
 458              		.loc 1 149 0
 459 0360 837DC000 		cmpl	$0, -64(%rbp)
 460 0364 0F85D0FE 		jne	.L31
 460      FFFF
 169:main.c        **** 		}
 170:main.c        **** 	}
 171:main.c        **** 
 172:main.c        **** 	// Await last chunk
 173:main.c        **** 	fStatus = flReadChannelAsyncAwait(handle, &recvData, &actualLength, &actualLength, error, tim);
 461              		.loc 1 173 0
 462 036a 488B7DA8 		movq	-88(%rbp), %rdi
 463 036e 488D4DD4 		leaq	-44(%rbp), %rcx
 464 0372 488D55D4 		leaq	-44(%rbp), %rdx
 465 0376 488D75E8 		leaq	-24(%rbp), %rsi
 466 037a 488B45C8 		movq	-56(%rbp), %rax
 467 037e 4C8B4D10 		movq	16(%rbp), %r9
 468 0382 4989F8   		movq	%rdi, %r8
 469 0385 4889C7   		movq	%rax, %rdi
 470 0388 E8000000 		call	flReadChannelAsyncAwait
 470      00
 471 038d 8945E0   		movl	%eax, -32(%rbp)
 174:main.c        **** 	CHECK_STATUS(fStatus, FLP_LIBERR, cleanup, "doRead()");
 472              		.loc 1 174 0
 473 0390 837DE000 		cmpl	$0, -32(%rbp)
 474 0394 741D     		je	.L32
 475              		.loc 1 174 0 is_stmt 0 discriminator 1
 476 0396 488B45A8 		movq	-88(%rbp), %rax
 477 039a BE000000 		movl	$.LC11, %esi
 477      00
 478 039f 4889C7   		movq	%rax, %rdi
 479 03a2 E8000000 		call	errPrefix
 479      00
 480 03a7 C745D801 		movl	$1, -40(%rbp)
 480      000000
 481 03ae E9830000 		jmp	.L24
 481      00
 482              	.L32:
 175:main.c        **** 	
 176:main.c        **** 	// Write last chunk to file
 177:main.c        **** 	bytesWritten = (uint32)fwrite(recvData, 1, actualLength, destFile);
 483              		.loc 1 177 0 is_stmt 1
 484 03b3 8B45D4   		movl	-44(%rbp), %eax
 485 03b6 89C6     		movl	%eax, %esi
 486 03b8 488B45E8 		movq	-24(%rbp), %rax
 487 03bc 488B55B8 		movq	-72(%rbp), %rdx
 488 03c0 4889D1   		movq	%rdx, %rcx
 489 03c3 4889F2   		movq	%rsi, %rdx
 490 03c6 BE010000 		movl	$1, %esi
 490      00
 491 03cb 4889C7   		movq	%rax, %rdi
 492 03ce E8000000 		call	fwrite
 492      00
 493 03d3 8945E4   		movl	%eax, -28(%rbp)
 178:main.c        **** 	CHECK_STATUS(bytesWritten != actualLength, FLP_CANNOT_SAVE, cleanup, "doRead()");
 494              		.loc 1 178 0
 495 03d6 8B45D4   		movl	-44(%rbp), %eax
 496 03d9 3945E4   		cmpl	%eax, -28(%rbp)
 497 03dc 741A     		je	.L33
 498              		.loc 1 178 0 is_stmt 0 discriminator 1
 499 03de 488B45A8 		movq	-88(%rbp), %rax
 500 03e2 BE000000 		movl	$.LC11, %esi
 500      00
 501 03e7 4889C7   		movq	%rax, %rdi
 502 03ea E8000000 		call	errPrefix
 502      00
 503 03ef C745D80B 		movl	$11, -40(%rbp)
 503      000000
 504 03f6 EB3E     		jmp	.L24
 505              	.L33:
 179:main.c        **** 
 180:main.c        **** 	// Checksum last chunk
 181:main.c        **** 	chunkSize = actualLength;
 506              		.loc 1 181 0 is_stmt 1
 507 03f8 8B45D4   		movl	-44(%rbp), %eax
 508 03fb 8945DC   		movl	%eax, -36(%rbp)
 182:main.c        **** 	ptr = recvData;
 509              		.loc 1 182 0
 510 03fe 488B45E8 		movq	-24(%rbp), %rax
 511 0402 488945F0 		movq	%rax, -16(%rbp)
 183:main.c        **** 	while ( chunkSize-- ) {
 512              		.loc 1 183 0
 513 0406 EB16     		jmp	.L34
 514              	.L35:
 184:main.c        **** 		csVal = (uint16)(csVal + *ptr++);
 515              		.loc 1 184 0
 516 0408 488B45F0 		movq	-16(%rbp), %rax
 517 040c 488D5001 		leaq	1(%rax), %rdx
 518 0410 488955F0 		movq	%rdx, -16(%rbp)
 519 0414 0FB600   		movzbl	(%rax), %eax
 520 0417 0FB6C0   		movzbl	%al, %eax
 521 041a 660145D2 		addw	%ax, -46(%rbp)
 522              	.L34:
 183:main.c        **** 	while ( chunkSize-- ) {
 523              		.loc 1 183 0
 524 041e 8B45DC   		movl	-36(%rbp), %eax
 525 0421 8D50FF   		leal	-1(%rax), %edx
 526 0424 8955DC   		movl	%edx, -36(%rbp)
 527 0427 85C0     		testl	%eax, %eax
 528 0429 75DD     		jne	.L35
 185:main.c        **** 	}
 186:main.c        **** 	
 187:main.c        **** 	// Return checksum to caller
 188:main.c        **** 	*checksum = csVal;
 529              		.loc 1 188 0
 530 042b 488B45B0 		movq	-80(%rbp), %rax
 531 042f 0FB755D2 		movzwl	-46(%rbp), %edx
 532 0433 668910   		movw	%dx, (%rax)
 533              	.L24:
 189:main.c        **** cleanup:
 190:main.c        **** 	return retVal;
 534              		.loc 1 190 0
 535 0436 8B45D8   		movl	-40(%rbp), %eax
 191:main.c        **** }
 536              		.loc 1 191 0
 537 0439 488B4DF8 		movq	-8(%rbp), %rcx
 538 043d 6448330C 		xorq	%fs:40, %rcx
 538      25280000 
 538      00
 539 0446 7405     		je	.L37
 540 0448 E8000000 		call	__stack_chk_fail
 540      00
 541              	.L37:
 542 044d C9       		leave
 543              		.cfi_def_cfa 7, 8
 544 044e C3       		ret
 545              		.cfi_endproc
 546              	.LFE8:
 548              		.section	.rodata
 549              	.LC12:
 550 0151 646F5772 		.string	"doWrite()"
 550      69746528 
 550      2900
 551              		.text
 553              	doWrite:
 554              	.LFB9:
 192:main.c        **** 
 193:main.c        **** static ReturnCode doWrite(
 194:main.c        **** 	struct FLContext *handle, uint8 chan, FILE *srcFile, size_t *length, uint16 *checksum,
 195:main.c        **** 	const char **error)
 196:main.c        **** {
 555              		.loc 1 196 0
 556              		.cfi_startproc
 557 044f 55       		pushq	%rbp
 558              		.cfi_def_cfa_offset 16
 559              		.cfi_offset 6, -16
 560 0450 4889E5   		movq	%rsp, %rbp
 561              		.cfi_def_cfa_register 6
 562 0453 4881EC70 		subq	$65648, %rsp
 562      000100
 563 045a 4889BDB8 		movq	%rdi, -65608(%rbp)
 563      FFFEFF
 564 0461 89F0     		movl	%esi, %eax
 565 0463 488995A8 		movq	%rdx, -65624(%rbp)
 565      FFFEFF
 566 046a 48898DA0 		movq	%rcx, -65632(%rbp)
 566      FFFEFF
 567 0471 4C898598 		movq	%r8, -65640(%rbp)
 567      FFFEFF
 568 0478 4C898D90 		movq	%r9, -65648(%rbp)
 568      FFFEFF
 569 047f 8885B4FF 		movb	%al, -65612(%rbp)
 569      FEFF
 570              		.loc 1 196 0
 571 0485 64488B04 		movq	%fs:40, %rax
 571      25280000 
 571      00
 572 048e 488945F8 		movq	%rax, -8(%rbp)
 573 0492 31C0     		xorl	%eax, %eax
 197:main.c        **** 	ReturnCode retVal = FLP_SUCCESS;
 574              		.loc 1 197 0
 575 0494 C785C8FF 		movl	$0, -65592(%rbp)
 575      FEFF0000 
 575      0000
 198:main.c        **** 	size_t bytesRead, i;
 199:main.c        **** 	FLStatus fStatus;
 200:main.c        **** 	const uint8 *ptr;
 201:main.c        **** 	uint16 csVal = 0x0000;
 576              		.loc 1 201 0
 577 049e 66C785C6 		movw	$0, -65594(%rbp)
 577      FFFEFF00 
 577      00
 202:main.c        **** 	size_t lenVal = 0;
 578              		.loc 1 202 0
 579 04a7 48C785E0 		movq	$0, -65568(%rbp)
 579      FFFEFF00 
 579      000000
 580              	.L44:
 203:main.c        **** 	#define WRITE_MAX (65536 - 5)
 204:main.c        **** 	uint8 buffer[WRITE_MAX];
 205:main.c        **** 
 206:main.c        **** 	do {
 207:main.c        **** 		// Read Nth chunk
 208:main.c        **** 		bytesRead = fread(buffer, 1, WRITE_MAX, srcFile);
 581              		.loc 1 208 0
 582 04b2 488B95A8 		movq	-65624(%rbp), %rdx
 582      FFFEFF
 583 04b9 488D85F0 		leaq	-65552(%rbp), %rax
 583      FFFEFF
 584 04c0 4889D1   		movq	%rdx, %rcx
 585 04c3 BAFBFF00 		movl	$65531, %edx
 585      00
 586 04c8 BE010000 		movl	$1, %esi
 586      00
 587 04cd 4889C7   		movq	%rax, %rdi
 588 04d0 E8000000 		call	fread
 588      00
 589 04d5 488985E8 		movq	%rax, -65560(%rbp)
 589      FFFEFF
 209:main.c        **** 		if ( bytesRead ) {
 590              		.loc 1 209 0
 591 04dc 4883BDE8 		cmpq	$0, -65560(%rbp)
 591      FFFEFF00 
 592 04e4 0F84C200 		je	.L39
 592      0000
 210:main.c        **** 			// Update running total
 211:main.c        **** 			lenVal = lenVal + bytesRead;
 593              		.loc 1 211 0
 594 04ea 488B85E8 		movq	-65560(%rbp), %rax
 594      FFFEFF
 595 04f1 480185E0 		addq	%rax, -65568(%rbp)
 595      FFFEFF
 212:main.c        **** 
 213:main.c        **** 			// Submit Nth chunk
 214:main.c        **** 			fStatus = flWriteChannelAsync(handle, chan, bytesRead, buffer, error);
 596              		.loc 1 214 0
 597 04f8 0FB6B5B4 		movzbl	-65612(%rbp), %esi
 597      FFFEFF
 598 04ff 488BBD90 		movq	-65648(%rbp), %rdi
 598      FFFEFF
 599 0506 488D8DF0 		leaq	-65552(%rbp), %rcx
 599      FFFEFF
 600 050d 488B95E8 		movq	-65560(%rbp), %rdx
 600      FFFEFF
 601 0514 488B85B8 		movq	-65608(%rbp), %rax
 601      FFFEFF
 602 051b 4989F8   		movq	%rdi, %r8
 603 051e 4889C7   		movq	%rax, %rdi
 604 0521 E8000000 		call	flWriteChannelAsync
 604      00
 605 0526 8985CCFF 		movl	%eax, -65588(%rbp)
 605      FEFF
 215:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup, "doWrite()");
 606              		.loc 1 215 0
 607 052c 83BDCCFF 		cmpl	$0, -65588(%rbp)
 607      FEFF00
 608 0533 7423     		je	.L40
 609              		.loc 1 215 0 is_stmt 0 discriminator 1
 610 0535 488B8590 		movq	-65648(%rbp), %rax
 610      FFFEFF
 611 053c BE000000 		movl	$.LC12, %esi
 611      00
 612 0541 4889C7   		movq	%rax, %rdi
 613 0544 E8000000 		call	errPrefix
 613      00
 614 0549 C785C8FF 		movl	$1, -65592(%rbp)
 614      FEFF0100 
 614      0000
 615 0553 E9CF0000 		jmp	.L41
 615      00
 616              	.L40:
 216:main.c        **** 
 217:main.c        **** 			// Checksum Nth chunk
 218:main.c        **** 			i = bytesRead;
 617              		.loc 1 218 0 is_stmt 1
 618 0558 488B85E8 		movq	-65560(%rbp), %rax
 618      FFFEFF
 619 055f 488985D0 		movq	%rax, -65584(%rbp)
 619      FFFEFF
 219:main.c        **** 			ptr = buffer;
 620              		.loc 1 219 0
 621 0566 488D85F0 		leaq	-65552(%rbp), %rax
 621      FFFEFF
 622 056d 488985D8 		movq	%rax, -65576(%rbp)
 622      FFFEFF
 220:main.c        **** 			while ( i-- ) {
 623              		.loc 1 220 0
 624 0574 EB1F     		jmp	.L42
 625              	.L43:
 221:main.c        **** 				csVal = (uint16)(csVal + *ptr++);
 626              		.loc 1 221 0
 627 0576 488B85D8 		movq	-65576(%rbp), %rax
 627      FFFEFF
 628 057d 488D5001 		leaq	1(%rax), %rdx
 629 0581 488995D8 		movq	%rdx, -65576(%rbp)
 629      FFFEFF
 630 0588 0FB600   		movzbl	(%rax), %eax
 631 058b 0FB6C0   		movzbl	%al, %eax
 632 058e 660185C6 		addw	%ax, -65594(%rbp)
 632      FFFEFF
 633              	.L42:
 220:main.c        **** 			while ( i-- ) {
 634              		.loc 1 220 0
 635 0595 488B85D0 		movq	-65584(%rbp), %rax
 635      FFFEFF
 636 059c 488D50FF 		leaq	-1(%rax), %rdx
 637 05a0 488995D0 		movq	%rdx, -65584(%rbp)
 637      FFFEFF
 638 05a7 4885C0   		testq	%rax, %rax
 639 05aa 75CA     		jne	.L43
 640              	.L39:
 222:main.c        **** 			}
 223:main.c        **** 		}
 224:main.c        **** 	} while ( bytesRead == WRITE_MAX );
 641              		.loc 1 224 0
 642 05ac 4881BDE8 		cmpq	$65531, -65560(%rbp)
 642      FFFEFFFB 
 642      FF0000
 643 05b7 0F84F5FE 		je	.L44
 643      FFFF
 225:main.c        **** 
 226:main.c        **** 	// Wait for writes to be received. This is optional, but it's only fair if we're benchmarking to
 227:main.c        **** 	// actually wait for the work to be completed.
 228:main.c        **** 	fStatus = flAwaitAsyncWrites(handle, error);
 644              		.loc 1 228 0
 645 05bd 488B9590 		movq	-65648(%rbp), %rdx
 645      FFFEFF
 646 05c4 488B85B8 		movq	-65608(%rbp), %rax
 646      FFFEFF
 647 05cb 4889D6   		movq	%rdx, %rsi
 648 05ce 4889C7   		movq	%rax, %rdi
 649 05d1 E8000000 		call	flAwaitAsyncWrites
 649      00
 650 05d6 8985CCFF 		movl	%eax, -65588(%rbp)
 650      FEFF
 229:main.c        **** 	CHECK_STATUS(fStatus, FLP_LIBERR, cleanup, "doWrite()");
 651              		.loc 1 229 0
 652 05dc 83BDCCFF 		cmpl	$0, -65588(%rbp)
 652      FEFF00
 653 05e3 7420     		je	.L45
 654              		.loc 1 229 0 is_stmt 0 discriminator 1
 655 05e5 488B8590 		movq	-65648(%rbp), %rax
 655      FFFEFF
 656 05ec BE000000 		movl	$.LC12, %esi
 656      00
 657 05f1 4889C7   		movq	%rax, %rdi
 658 05f4 E8000000 		call	errPrefix
 658      00
 659 05f9 C785C8FF 		movl	$1, -65592(%rbp)
 659      FEFF0100 
 659      0000
 660 0603 EB22     		jmp	.L41
 661              	.L45:
 230:main.c        **** 
 231:main.c        **** 	// Return checksum & length to caller
 232:main.c        **** 	*checksum = csVal;
 662              		.loc 1 232 0 is_stmt 1
 663 0605 488B8598 		movq	-65640(%rbp), %rax
 663      FFFEFF
 664 060c 0FB795C6 		movzwl	-65594(%rbp), %edx
 664      FFFEFF
 665 0613 668910   		movw	%dx, (%rax)
 233:main.c        **** 	*length = lenVal;
 666              		.loc 1 233 0
 667 0616 488B85A0 		movq	-65632(%rbp), %rax
 667      FFFEFF
 668 061d 488B95E0 		movq	-65568(%rbp), %rdx
 668      FFFEFF
 669 0624 488910   		movq	%rdx, (%rax)
 670              	.L41:
 234:main.c        **** cleanup:
 235:main.c        **** 	return retVal;
 671              		.loc 1 235 0
 672 0627 8B85C8FF 		movl	-65592(%rbp), %eax
 672      FEFF
 236:main.c        **** }
 673              		.loc 1 236 0
 674 062d 488B4DF8 		movq	-8(%rbp), %rcx
 675 0631 6448330C 		xorq	%fs:40, %rcx
 675      25280000 
 675      00
 676 063a 7405     		je	.L47
 677 063c E8000000 		call	__stack_chk_fail
 677      00
 678              	.L47:
 679 0641 C9       		leave
 680              		.cfi_def_cfa 7, 8
 681 0642 C3       		ret
 682              		.cfi_endproc
 683              	.LFE9:
 685              		.section	.rodata
 686              	.LC13:
 687 015b 776200   		.string	"wb"
 688 015e 0000     		.align 8
 689              	.LC16:
 690 0160 52656164 		.string	"Read %d bytes (checksum 0x%04X) from channel %d at %f MiB/s\n"
 690      20256420 
 690      62797465 
 690      73202863 
 690      6865636B 
 691              	.LC17:
 692 019d 726200   		.string	"rb"
 693              		.align 8
 694              	.LC18:
 695 01a0 57726F74 		.string	"Wrote %zu bytes (checksum 0x%04X) to channel %lu at %f MiB/s\n"
 695      6520257A 
 695      75206279 
 695      74657320 
 695      28636865 
 696              	.LC19:
 697 01de 25732061 		.string	"%s at column %d\n  %s\n  "
 697      7420636F 
 697      6C756D6E 
 697      2025640A 
 697      20202573 
 698              	.LC20:
 699 01f6 5E0A00   		.string	"^\n"
 700              		.text
 702              	parseLine:
 703              	.LFB10:
 237:main.c        **** 
 238:main.c        **** static int parseLine(struct FLContext *handle, const char *line, const char **error, long tim) {
 704              		.loc 1 238 0
 705              		.cfi_startproc
 706 0643 55       		pushq	%rbp
 707              		.cfi_def_cfa_offset 16
 708              		.cfi_offset 6, -16
 709 0644 4889E5   		movq	%rsp, %rbp
 710              		.cfi_def_cfa_register 6
 711 0647 4881EC20 		subq	$288, %rsp
 711      010000
 712 064e 4889BD08 		movq	%rdi, -248(%rbp)
 712      FFFFFF
 713 0655 4889B500 		movq	%rsi, -256(%rbp)
 713      FFFFFF
 714 065c 488995F8 		movq	%rdx, -264(%rbp)
 714      FEFFFF
 715 0663 48898DF0 		movq	%rcx, -272(%rbp)
 715      FEFFFF
 716              		.loc 1 238 0
 717 066a 64488B04 		movq	%fs:40, %rax
 717      25280000 
 717      00
 718 0673 488945F8 		movq	%rax, -8(%rbp)
 719 0677 31C0     		xorl	%eax, %eax
 239:main.c        **** 	ReturnCode retVal = FLP_SUCCESS, status;
 720              		.loc 1 239 0
 721 0679 C78514FF 		movl	$0, -236(%rbp)
 721      FFFF0000 
 721      0000
 240:main.c        **** 	FLStatus fStatus;
 241:main.c        **** 	struct Buffer dataFromFPGA = {0,};
 722              		.loc 1 241 0
 723 0683 48C745D0 		movq	$0, -48(%rbp)
 723      00000000 
 724 068b 48C745D8 		movq	$0, -40(%rbp)
 724      00000000 
 725 0693 48C745E0 		movq	$0, -32(%rbp)
 725      00000000 
 726 069b 48C745E8 		movq	$0, -24(%rbp)
 726      00000000 
 242:main.c        **** 	BufferStatus bStatus;
 243:main.c        **** 	uint8 *data = NULL;
 727              		.loc 1 243 0
 728 06a3 48C78548 		movq	$0, -184(%rbp)
 728      FFFFFF00 
 728      000000
 244:main.c        **** 	char *fileName = NULL;
 729              		.loc 1 244 0
 730 06ae 48C78550 		movq	$0, -176(%rbp)
 730      FFFFFF00 
 730      000000
 245:main.c        **** 	FILE *file = NULL;
 731              		.loc 1 245 0
 732 06b9 48C78558 		movq	$0, -168(%rbp)
 732      FFFFFF00 
 732      000000
 246:main.c        **** 	double totalTime, speed;
 247:main.c        **** 	#ifdef WIN32
 248:main.c        **** 		LARGE_INTEGER tvStart, tvEnd, freq;
 249:main.c        **** 		DWORD_PTR mask = 1;
 250:main.c        **** 		SetThreadAffinityMask(GetCurrentThread(), mask);
 251:main.c        **** 		QueryPerformanceFrequency(&freq);
 252:main.c        **** 	#else
 253:main.c        **** 		struct timeval tvStart, tvEnd;
 254:main.c        **** 		long long startTime, endTime;
 255:main.c        **** 	#endif
 256:main.c        **** 	bStatus = bufInitialise(&dataFromFPGA, 1024, 0x00, error);
 733              		.loc 1 256 0
 734 06c4 488B95F8 		movq	-264(%rbp), %rdx
 734      FEFFFF
 735 06cb 488D45D0 		leaq	-48(%rbp), %rax
 736 06cf 4889D1   		movq	%rdx, %rcx
 737 06d2 BA000000 		movl	$0, %edx
 737      00
 738 06d7 BE000400 		movl	$1024, %esi
 738      00
 739 06dc 4889C7   		movq	%rax, %rdi
 740 06df E8000000 		call	bufInitialise
 740      00
 741 06e4 898520FF 		movl	%eax, -224(%rbp)
 741      FFFF
 257:main.c        **** 	CHECK_STATUS(bStatus, FLP_LIBERR, cleanup);
 742              		.loc 1 257 0
 743 06ea 83BD20FF 		cmpl	$0, -224(%rbp)
 743      FFFF00
 744 06f1 740F     		je	.L49
 745              		.loc 1 257 0 is_stmt 0 discriminator 1
 746 06f3 C78514FF 		movl	$1, -236(%rbp)
 746      FFFF0100 
 746      0000
 747 06fd E9FC0E00 		jmp	.L50
 747      00
 748              	.L49:
 258:main.c        **** 	ptr = line;
 749              		.loc 1 258 0 is_stmt 1
 750 0702 488B8500 		movq	-256(%rbp), %rax
 750      FFFFFF
 751 0709 48890500 		movq	%rax, ptr(%rip)
 751      000000
 259:main.c        **** 	do {
 260:main.c        **** 		while ( *ptr == ';' ) {
 752              		.loc 1 260 0
 753 0710 EB12     		jmp	.L51
 754              	.L52:
 261:main.c        **** 			ptr++;
 755              		.loc 1 261 0
 756 0712 488B0500 		movq	ptr(%rip), %rax
 756      000000
 757 0719 4883C001 		addq	$1, %rax
 758 071d 48890500 		movq	%rax, ptr(%rip)
 758      000000
 759              	.L51:
 260:main.c        **** 			ptr++;
 760              		.loc 1 260 0
 761 0724 488B0500 		movq	ptr(%rip), %rax
 761      000000
 762 072b 0FB600   		movzbl	(%rax), %eax
 763 072e 3C3B     		cmpb	$59, %al
 764 0730 74E0     		je	.L52
 262:main.c        **** 		}
 263:main.c        **** 		switch ( *ptr ) {
 765              		.loc 1 263 0
 766 0732 488B0500 		movq	ptr(%rip), %rax
 766      000000
 767 0739 0FB600   		movzbl	(%rax), %eax
 768 073c 0FBEC0   		movsbl	%al, %eax
 769 073f 83F872   		cmpl	$114, %eax
 770 0742 7417     		je	.L54
 771 0744 83F877   		cmpl	$119, %eax
 772 0747 0F84DB06 		je	.L55
 772      0000
 773 074d 83F82B   		cmpl	$43, %eax
 774 0750 0F846B0D 		je	.L56
 774      0000
 775 0756 E9520E00 		jmp	.L126
 775      00
 776              	.L54:
 777              	.LBB2:
 264:main.c        **** 		case 'r':{
 265:main.c        **** 			uint32 chan;
 266:main.c        **** 			uint32 length = 1;
 778              		.loc 1 266 0
 779 075b C78518FF 		movl	$1, -232(%rbp)
 779      FFFF0100 
 779      0000
 267:main.c        **** 			char *end;
 268:main.c        **** 			ptr++;
 780              		.loc 1 268 0
 781 0765 488B0500 		movq	ptr(%rip), %rax
 781      000000
 782 076c 4883C001 		addq	$1, %rax
 783 0770 48890500 		movq	%rax, ptr(%rip)
 783      000000
 269:main.c        **** 			
 270:main.c        **** 			// Get the channel to be read:
 271:main.c        **** 			errno = 0;
 784              		.loc 1 271 0
 785 0777 E8000000 		call	__errno_location
 785      00
 786 077c C7000000 		movl	$0, (%rax)
 786      0000
 272:main.c        **** 			chan = (uint32)strtoul(ptr, &end, 16);
 787              		.loc 1 272 0
 788 0782 488B0500 		movq	ptr(%rip), %rax
 788      000000
 789 0789 488D8D40 		leaq	-192(%rbp), %rcx
 789      FFFFFF
 790 0790 BA100000 		movl	$16, %edx
 790      00
 791 0795 4889CE   		movq	%rcx, %rsi
 792 0798 4889C7   		movq	%rax, %rdi
 793 079b E8000000 		call	strtoul
 793      00
 794 07a0 898530FF 		movl	%eax, -208(%rbp)
 794      FFFF
 273:main.c        **** 			CHECK_STATUS(errno, FLP_BAD_HEX, cleanup);
 795              		.loc 1 273 0
 796 07a6 E8000000 		call	__errno_location
 796      00
 797 07ab 8B00     		movl	(%rax), %eax
 798 07ad 85C0     		testl	%eax, %eax
 799 07af 740F     		je	.L57
 800              		.loc 1 273 0 is_stmt 0 discriminator 1
 801 07b1 C78514FF 		movl	$2, -236(%rbp)
 801      FFFF0200 
 801      0000
 802 07bb E93E0E00 		jmp	.L50
 802      00
 803              	.L57:
 274:main.c        **** 
 275:main.c        **** 			// Ensure that it's 0-127
 276:main.c        **** 			CHECK_STATUS(chan > 127, FLP_CHAN_RANGE, cleanup);
 804              		.loc 1 276 0 is_stmt 1
 805 07c0 83BD30FF 		cmpl	$127, -208(%rbp)
 805      FFFF7F
 806 07c7 760F     		jbe	.L59
 807              		.loc 1 276 0 is_stmt 0 discriminator 1
 808 07c9 C78514FF 		movl	$3, -236(%rbp)
 808      FFFF0300 
 808      0000
 809 07d3 E9260E00 		jmp	.L50
 809      00
 810              	.L59:
 277:main.c        **** 			ptr = end;
 811              		.loc 1 277 0 is_stmt 1
 812 07d8 488B8540 		movq	-192(%rbp), %rax
 812      FFFFFF
 813 07df 48890500 		movq	%rax, ptr(%rip)
 813      000000
 278:main.c        **** 
 279:main.c        **** 			// Only three valid chars at this point:
 280:main.c        **** 			CHECK_STATUS(*ptr != '\0' && *ptr != ';' && *ptr != ' ', FLP_ILL_CHAR, cleanup);
 814              		.loc 1 280 0
 815 07e6 488B0500 		movq	ptr(%rip), %rax
 815      000000
 816 07ed 0FB600   		movzbl	(%rax), %eax
 817 07f0 84C0     		testb	%al, %al
 818 07f2 742B     		je	.L60
 819              		.loc 1 280 0 is_stmt 0 discriminator 1
 820 07f4 488B0500 		movq	ptr(%rip), %rax
 820      000000
 821 07fb 0FB600   		movzbl	(%rax), %eax
 822 07fe 3C3B     		cmpb	$59, %al
 823 0800 741D     		je	.L60
 824              		.loc 1 280 0 discriminator 2
 825 0802 488B0500 		movq	ptr(%rip), %rax
 825      000000
 826 0809 0FB600   		movzbl	(%rax), %eax
 827 080c 3C20     		cmpb	$32, %al
 828 080e 740F     		je	.L60
 829              		.loc 1 280 0 discriminator 3
 830 0810 C78514FF 		movl	$5, -236(%rbp)
 830      FFFF0500 
 830      0000
 831 081a E9DF0D00 		jmp	.L50
 831      00
 832              	.L60:
 281:main.c        **** 
 282:main.c        **** 			if ( *ptr == ' ' ) {
 833              		.loc 1 282 0 is_stmt 1
 834 081f 488B0500 		movq	ptr(%rip), %rax
 834      000000
 835 0826 0FB600   		movzbl	(%rax), %eax
 836 0829 3C20     		cmpb	$32, %al
 837 082b 0F851D02 		jne	.L61
 837      0000
 283:main.c        **** 				ptr++;
 838              		.loc 1 283 0
 839 0831 488B0500 		movq	ptr(%rip), %rax
 839      000000
 840 0838 4883C001 		addq	$1, %rax
 841 083c 48890500 		movq	%rax, ptr(%rip)
 841      000000
 284:main.c        **** 
 285:main.c        **** 				// Get the read count:
 286:main.c        **** 				errno = 0;
 842              		.loc 1 286 0
 843 0843 E8000000 		call	__errno_location
 843      00
 844 0848 C7000000 		movl	$0, (%rax)
 844      0000
 287:main.c        **** 				length = (uint32)strtoul(ptr, &end, 16);
 845              		.loc 1 287 0
 846 084e 488B0500 		movq	ptr(%rip), %rax
 846      000000
 847 0855 488D8D40 		leaq	-192(%rbp), %rcx
 847      FFFFFF
 848 085c BA100000 		movl	$16, %edx
 848      00
 849 0861 4889CE   		movq	%rcx, %rsi
 850 0864 4889C7   		movq	%rax, %rdi
 851 0867 E8000000 		call	strtoul
 851      00
 852 086c 898518FF 		movl	%eax, -232(%rbp)
 852      FFFF
 288:main.c        **** 				CHECK_STATUS(errno, FLP_BAD_HEX, cleanup);
 853              		.loc 1 288 0
 854 0872 E8000000 		call	__errno_location
 854      00
 855 0877 8B00     		movl	(%rax), %eax
 856 0879 85C0     		testl	%eax, %eax
 857 087b 740F     		je	.L62
 858              		.loc 1 288 0 is_stmt 0 discriminator 1
 859 087d C78514FF 		movl	$2, -236(%rbp)
 859      FFFF0200 
 859      0000
 860 0887 E9720D00 		jmp	.L50
 860      00
 861              	.L62:
 289:main.c        **** 				ptr = end;
 862              		.loc 1 289 0 is_stmt 1
 863 088c 488B8540 		movq	-192(%rbp), %rax
 863      FFFFFF
 864 0893 48890500 		movq	%rax, ptr(%rip)
 864      000000
 290:main.c        **** 				
 291:main.c        **** 				// Only three valid chars at this point:
 292:main.c        **** 				CHECK_STATUS(*ptr != '\0' && *ptr != ';' && *ptr != ' ', FLP_ILL_CHAR, cleanup);
 865              		.loc 1 292 0
 866 089a 488B0500 		movq	ptr(%rip), %rax
 866      000000
 867 08a1 0FB600   		movzbl	(%rax), %eax
 868 08a4 84C0     		testb	%al, %al
 869 08a6 742B     		je	.L63
 870              		.loc 1 292 0 is_stmt 0 discriminator 1
 871 08a8 488B0500 		movq	ptr(%rip), %rax
 871      000000
 872 08af 0FB600   		movzbl	(%rax), %eax
 873 08b2 3C3B     		cmpb	$59, %al
 874 08b4 741D     		je	.L63
 875              		.loc 1 292 0 discriminator 2
 876 08b6 488B0500 		movq	ptr(%rip), %rax
 876      000000
 877 08bd 0FB600   		movzbl	(%rax), %eax
 878 08c0 3C20     		cmpb	$32, %al
 879 08c2 740F     		je	.L63
 880              		.loc 1 292 0 discriminator 3
 881 08c4 C78514FF 		movl	$5, -236(%rbp)
 881      FFFF0500 
 881      0000
 882 08ce E92B0D00 		jmp	.L50
 882      00
 883              	.L63:
 293:main.c        **** 				if ( *ptr == ' ' ) {
 884              		.loc 1 293 0 is_stmt 1
 885 08d3 488B0500 		movq	ptr(%rip), %rax
 885      000000
 886 08da 0FB600   		movzbl	(%rax), %eax
 887 08dd 3C20     		cmpb	$32, %al
 888 08df 0F856901 		jne	.L61
 888      0000
 889              	.LBB3:
 294:main.c        **** 					const char *p;
 295:main.c        **** 					const char quoteChar = *++ptr;
 890              		.loc 1 295 0
 891 08e5 488B0500 		movq	ptr(%rip), %rax
 891      000000
 892 08ec 4883C001 		addq	$1, %rax
 893 08f0 48890500 		movq	%rax, ptr(%rip)
 893      000000
 894 08f7 488B0500 		movq	ptr(%rip), %rax
 894      000000
 895 08fe 0FB600   		movzbl	(%rax), %eax
 896 0901 888511FF 		movb	%al, -239(%rbp)
 896      FFFF
 296:main.c        **** 					CHECK_STATUS(
 897              		.loc 1 296 0
 898 0907 80BD11FF 		cmpb	$34, -239(%rbp)
 898      FFFF22
 899 090e 7418     		je	.L64
 900              		.loc 1 296 0 is_stmt 0 discriminator 1
 901 0910 80BD11FF 		cmpb	$39, -239(%rbp)
 901      FFFF27
 902 0917 740F     		je	.L64
 903              		.loc 1 296 0 discriminator 2
 904 0919 C78514FF 		movl	$5, -236(%rbp)
 904      FFFF0500 
 904      0000
 905 0923 E9D60C00 		jmp	.L50
 905      00
 906              	.L64:
 297:main.c        **** 						(quoteChar != '"' && quoteChar != '\''),
 298:main.c        **** 						FLP_ILL_CHAR, cleanup);
 299:main.c        **** 					
 300:main.c        **** 					// Get the file to write bytes to:
 301:main.c        **** 					ptr++;
 907              		.loc 1 301 0 is_stmt 1
 908 0928 488B0500 		movq	ptr(%rip), %rax
 908      000000
 909 092f 4883C001 		addq	$1, %rax
 910 0933 48890500 		movq	%rax, ptr(%rip)
 910      000000
 302:main.c        **** 					p = ptr;
 911              		.loc 1 302 0
 912 093a 488B0500 		movq	ptr(%rip), %rax
 912      000000
 913 0941 48898560 		movq	%rax, -160(%rbp)
 913      FFFFFF
 303:main.c        **** 					while ( *p != quoteChar && *p != '\0' ) {
 914              		.loc 1 303 0
 915 0948 EB08     		jmp	.L65
 916              	.L67:
 304:main.c        **** 						p++;
 917              		.loc 1 304 0
 918 094a 48838560 		addq	$1, -160(%rbp)
 918      FFFFFF01 
 919              	.L65:
 303:main.c        **** 					while ( *p != quoteChar && *p != '\0' ) {
 920              		.loc 1 303 0
 921 0952 488B8560 		movq	-160(%rbp), %rax
 921      FFFFFF
 922 0959 0FB600   		movzbl	(%rax), %eax
 923 095c 3A8511FF 		cmpb	-239(%rbp), %al
 923      FFFF
 924 0962 740E     		je	.L66
 303:main.c        **** 					while ( *p != quoteChar && *p != '\0' ) {
 925              		.loc 1 303 0 is_stmt 0 discriminator 1
 926 0964 488B8560 		movq	-160(%rbp), %rax
 926      FFFFFF
 927 096b 0FB600   		movzbl	(%rax), %eax
 928 096e 84C0     		testb	%al, %al
 929 0970 75D8     		jne	.L67
 930              	.L66:
 305:main.c        **** 					}
 306:main.c        **** 					CHECK_STATUS(*p == '\0', FLP_UNTERM_STRING, cleanup);
 931              		.loc 1 306 0 is_stmt 1
 932 0972 488B8560 		movq	-160(%rbp), %rax
 932      FFFFFF
 933 0979 0FB600   		movzbl	(%rax), %eax
 934 097c 84C0     		testb	%al, %al
 935 097e 750F     		jne	.L68
 936              		.loc 1 306 0 is_stmt 0 discriminator 1
 937 0980 C78514FF 		movl	$6, -236(%rbp)
 937      FFFF0600 
 937      0000
 938 098a E96F0C00 		jmp	.L50
 938      00
 939              	.L68:
 307:main.c        **** 					fileName = malloc((size_t)(p - ptr + 1));
 940              		.loc 1 307 0 is_stmt 1
 941 098f 488B8560 		movq	-160(%rbp), %rax
 941      FFFFFF
 942 0996 488B1500 		movq	ptr(%rip), %rdx
 942      000000
 943 099d 4829D0   		subq	%rdx, %rax
 944 09a0 4883C001 		addq	$1, %rax
 945 09a4 4889C7   		movq	%rax, %rdi
 946 09a7 E8000000 		call	malloc
 946      00
 947 09ac 48898550 		movq	%rax, -176(%rbp)
 947      FFFFFF
 308:main.c        **** 					CHECK_STATUS(!fileName, FLP_NO_MEMORY, cleanup);
 948              		.loc 1 308 0
 949 09b3 4883BD50 		cmpq	$0, -176(%rbp)
 949      FFFFFF00 
 950 09bb 750F     		jne	.L69
 951              		.loc 1 308 0 is_stmt 0 discriminator 1
 952 09bd C78514FF 		movl	$7, -236(%rbp)
 952      FFFF0700 
 952      0000
 953 09c7 E9320C00 		jmp	.L50
 953      00
 954              	.L69:
 309:main.c        **** 					CHECK_STATUS(p - ptr == 0, FLP_EMPTY_STRING, cleanup);
 955              		.loc 1 309 0 is_stmt 1
 956 09cc 488B8560 		movq	-160(%rbp), %rax
 956      FFFFFF
 957 09d3 488B1500 		movq	ptr(%rip), %rdx
 957      000000
 958 09da 4839D0   		cmpq	%rdx, %rax
 959 09dd 750F     		jne	.L70
 960              		.loc 1 309 0 is_stmt 0 discriminator 1
 961 09df C78514FF 		movl	$8, -236(%rbp)
 961      FFFF0800 
 961      0000
 962 09e9 E9100C00 		jmp	.L50
 962      00
 963              	.L70:
 310:main.c        **** 					strncpy(fileName, ptr, (size_t)(p - ptr));
 964              		.loc 1 310 0 is_stmt 1
 965 09ee 488B8560 		movq	-160(%rbp), %rax
 965      FFFFFF
 966 09f5 488B1500 		movq	ptr(%rip), %rdx
 966      000000
 967 09fc 4829D0   		subq	%rdx, %rax
 968 09ff 4889C2   		movq	%rax, %rdx
 969 0a02 488B0D00 		movq	ptr(%rip), %rcx
 969      000000
 970 0a09 488B8550 		movq	-176(%rbp), %rax
 970      FFFFFF
 971 0a10 4889CE   		movq	%rcx, %rsi
 972 0a13 4889C7   		movq	%rax, %rdi
 973 0a16 E8000000 		call	strncpy
 973      00
 311:main.c        **** 					fileName[p - ptr] = '\0';
 974              		.loc 1 311 0
 975 0a1b 488B8560 		movq	-160(%rbp), %rax
 975      FFFFFF
 976 0a22 488B1500 		movq	ptr(%rip), %rdx
 976      000000
 977 0a29 4829D0   		subq	%rdx, %rax
 978 0a2c 4889C2   		movq	%rax, %rdx
 979 0a2f 488B8550 		movq	-176(%rbp), %rax
 979      FFFFFF
 980 0a36 4801D0   		addq	%rdx, %rax
 981 0a39 C60000   		movb	$0, (%rax)
 312:main.c        **** 					ptr = p + 1;
 982              		.loc 1 312 0
 983 0a3c 488B8560 		movq	-160(%rbp), %rax
 983      FFFFFF
 984 0a43 4883C001 		addq	$1, %rax
 985 0a47 48890500 		movq	%rax, ptr(%rip)
 985      000000
 986              	.L61:
 987              	.LBE3:
 313:main.c        **** 				}
 314:main.c        **** 			}
 315:main.c        **** 			if ( fileName ) {
 988              		.loc 1 315 0
 989 0a4e 4883BD50 		cmpq	$0, -176(%rbp)
 989      FFFFFF00 
 990 0a56 0F84F801 		je	.L71
 990      0000
 991              	.LBB4:
 316:main.c        **** 				uint16 checksum = 0x0000;
 992              		.loc 1 316 0
 993 0a5c 66C78538 		movw	$0, -200(%rbp)
 993      FFFFFF00 
 993      00
 317:main.c        **** 
 318:main.c        **** 				// Open file for writing
 319:main.c        **** 				file = fopen(fileName, "wb");
 994              		.loc 1 319 0
 995 0a65 488B8550 		movq	-176(%rbp), %rax
 995      FFFFFF
 996 0a6c BE000000 		movl	$.LC13, %esi
 996      00
 997 0a71 4889C7   		movq	%rax, %rdi
 998 0a74 E8000000 		call	fopen
 998      00
 999 0a79 48898558 		movq	%rax, -168(%rbp)
 999      FFFFFF
 320:main.c        **** 				CHECK_STATUS(!file, FLP_CANNOT_SAVE, cleanup);
 1000              		.loc 1 320 0
 1001 0a80 4883BD58 		cmpq	$0, -168(%rbp)
 1001      FFFFFF00 
 1002 0a88 750F     		jne	.L72
 1003              		.loc 1 320 0 is_stmt 0 discriminator 1
 1004 0a8a C78514FF 		movl	$11, -236(%rbp)
 1004      FFFF0B00 
 1004      0000
 1005 0a94 E9650B00 		jmp	.L50
 1005      00
 1006              	.L72:
 321:main.c        **** 				free(fileName);
 1007              		.loc 1 321 0 is_stmt 1
 1008 0a99 488B8550 		movq	-176(%rbp), %rax
 1008      FFFFFF
 1009 0aa0 4889C7   		movq	%rax, %rdi
 1010 0aa3 E8000000 		call	free
 1010      00
 322:main.c        **** 				fileName = NULL;
 1011              		.loc 1 322 0
 1012 0aa8 48C78550 		movq	$0, -176(%rbp)
 1012      FFFFFF00 
 1012      000000
 323:main.c        **** 
 324:main.c        **** 				#ifdef WIN32
 325:main.c        **** 					QueryPerformanceCounter(&tvStart);
 326:main.c        **** 					status = doRead(handle, (uint8)chan, length, file, &checksum, error, tim);
 327:main.c        **** 					QueryPerformanceCounter(&tvEnd);
 328:main.c        **** 					totalTime = (double)(tvEnd.QuadPart - tvStart.QuadPart);
 329:main.c        **** 					totalTime /= freq.QuadPart;
 330:main.c        **** 					speed = (double)length / (1024*1024*totalTime);
 331:main.c        **** 				#else
 332:main.c        **** 					gettimeofday(&tvStart, NULL);
 1013              		.loc 1 332 0
 1014 0ab3 488D45B0 		leaq	-80(%rbp), %rax
 1015 0ab7 BE000000 		movl	$0, %esi
 1015      00
 1016 0abc 4889C7   		movq	%rax, %rdi
 1017 0abf E8000000 		call	gettimeofday
 1017      00
 333:main.c        **** 					status = doRead(handle, (uint8)chan, length, file, &checksum, error, tim);
 1018              		.loc 1 333 0
 1019 0ac4 8B8530FF 		movl	-208(%rbp), %eax
 1019      FFFF
 1020 0aca 0FB6F0   		movzbl	%al, %esi
 1021 0acd 4C8B85F8 		movq	-264(%rbp), %r8
 1021      FEFFFF
 1022 0ad4 488DBD38 		leaq	-200(%rbp), %rdi
 1022      FFFFFF
 1023 0adb 488B8D58 		movq	-168(%rbp), %rcx
 1023      FFFFFF
 1024 0ae2 8B9518FF 		movl	-232(%rbp), %edx
 1024      FFFF
 1025 0ae8 488B8508 		movq	-248(%rbp), %rax
 1025      FFFFFF
 1026 0aef 4883EC08 		subq	$8, %rsp
 1027 0af3 FFB5F0FE 		pushq	-272(%rbp)
 1027      FFFF
 1028 0af9 4D89C1   		movq	%r8, %r9
 1029 0afc 4989F8   		movq	%rdi, %r8
 1030 0aff 4889C7   		movq	%rax, %rdi
 1031 0b02 E890F6FF 		call	doRead
 1031      FF
 1032 0b07 4883C410 		addq	$16, %rsp
 1033 0b0b 898528FF 		movl	%eax, -216(%rbp)
 1033      FFFF
 334:main.c        **** 					gettimeofday(&tvEnd, NULL);
 1034              		.loc 1 334 0
 1035 0b11 488D45C0 		leaq	-64(%rbp), %rax
 1036 0b15 BE000000 		movl	$0, %esi
 1036      00
 1037 0b1a 4889C7   		movq	%rax, %rdi
 1038 0b1d E8000000 		call	gettimeofday
 1038      00
 335:main.c        **** 					startTime = tvStart.tv_sec;
 1039              		.loc 1 335 0
 1040 0b22 488B45B0 		movq	-80(%rbp), %rax
 1041 0b26 48894588 		movq	%rax, -120(%rbp)
 336:main.c        **** 					startTime *= 1000000;
 1042              		.loc 1 336 0
 1043 0b2a 488B4588 		movq	-120(%rbp), %rax
 1044 0b2e 4869C040 		imulq	$1000000, %rax, %rax
 1044      420F00
 1045 0b35 48894588 		movq	%rax, -120(%rbp)
 337:main.c        **** 					startTime += tvStart.tv_usec;
 1046              		.loc 1 337 0
 1047 0b39 488B45B8 		movq	-72(%rbp), %rax
 1048 0b3d 48014588 		addq	%rax, -120(%rbp)
 338:main.c        **** 					endTime = tvEnd.tv_sec;
 1049              		.loc 1 338 0
 1050 0b41 488B45C0 		movq	-64(%rbp), %rax
 1051 0b45 48894590 		movq	%rax, -112(%rbp)
 339:main.c        **** 					endTime *= 1000000;
 1052              		.loc 1 339 0
 1053 0b49 488B4590 		movq	-112(%rbp), %rax
 1054 0b4d 4869C040 		imulq	$1000000, %rax, %rax
 1054      420F00
 1055 0b54 48894590 		movq	%rax, -112(%rbp)
 340:main.c        **** 					endTime += tvEnd.tv_usec;
 1056              		.loc 1 340 0
 1057 0b58 488B45C8 		movq	-56(%rbp), %rax
 1058 0b5c 48014590 		addq	%rax, -112(%rbp)
 341:main.c        **** 					totalTime = (double)(endTime - startTime);
 1059              		.loc 1 341 0
 1060 0b60 488B4590 		movq	-112(%rbp), %rax
 1061 0b64 482B4588 		subq	-120(%rbp), %rax
 1062 0b68 660FEFC0 		pxor	%xmm0, %xmm0
 1063 0b6c F2480F2A 		cvtsi2sdq	%rax, %xmm0
 1063      C0
 1064 0b71 F20F1145 		movsd	%xmm0, -104(%rbp)
 1064      98
 342:main.c        **** 					totalTime /= 1000000;  // convert from uS to S.
 1065              		.loc 1 342 0
 1066 0b76 F20F1045 		movsd	-104(%rbp), %xmm0
 1066      98
 1067 0b7b F20F100D 		movsd	.LC14(%rip), %xmm1
 1067      00000000 
 1068 0b83 F20F5EC1 		divsd	%xmm1, %xmm0
 1069 0b87 F20F1145 		movsd	%xmm0, -104(%rbp)
 1069      98
 343:main.c        **** 					speed = (double)length / (1024*1024*totalTime);
 1070              		.loc 1 343 0
 1071 0b8c 8B8518FF 		movl	-232(%rbp), %eax
 1071      FFFF
 1072 0b92 4885C0   		testq	%rax, %rax
 1073 0b95 780B     		js	.L74
 1074 0b97 660FEFC0 		pxor	%xmm0, %xmm0
 1075 0b9b F2480F2A 		cvtsi2sdq	%rax, %xmm0
 1075      C0
 1076 0ba0 EB19     		jmp	.L75
 1077              	.L74:
 1078 0ba2 4889C2   		movq	%rax, %rdx
 1079 0ba5 48D1EA   		shrq	%rdx
 1080 0ba8 83E001   		andl	$1, %eax
 1081 0bab 4809C2   		orq	%rax, %rdx
 1082 0bae 660FEFC0 		pxor	%xmm0, %xmm0
 1083 0bb2 F2480F2A 		cvtsi2sdq	%rdx, %xmm0
 1083      C2
 1084 0bb7 F20F58C0 		addsd	%xmm0, %xmm0
 1085              	.L75:
 1086 0bbb F20F1055 		movsd	-104(%rbp), %xmm2
 1086      98
 1087 0bc0 F20F100D 		movsd	.LC15(%rip), %xmm1
 1087      00000000 
 1088 0bc8 F20F59CA 		mulsd	%xmm2, %xmm1
 1089 0bcc F20F5EC1 		divsd	%xmm1, %xmm0
 1090 0bd0 F20F1145 		movsd	%xmm0, -96(%rbp)
 1090      A0
 344:main.c        **** 				#endif
 345:main.c        **** 				if ( enableBenchmarking ) {
 1091              		.loc 1 345 0
 1092 0bd5 0FB60500 		movzbl	enableBenchmarking(%rip), %eax
 1092      000000
 1093 0bdc 84C0     		testb	%al, %al
 1094 0bde 743A     		je	.L76
 346:main.c        **** 					printf(
 1095              		.loc 1 346 0
 1096 0be0 0FB78538 		movzwl	-200(%rbp), %eax
 1096      FFFFFF
 1097 0be7 0FB7D0   		movzwl	%ax, %edx
 1098 0bea 488B75A0 		movq	-96(%rbp), %rsi
 1099 0bee 8B8D30FF 		movl	-208(%rbp), %ecx
 1099      FFFF
 1100 0bf4 8B8518FF 		movl	-232(%rbp), %eax
 1100      FFFF
 1101 0bfa 4889B5E8 		movq	%rsi, -280(%rbp)
 1101      FEFFFF
 1102 0c01 F20F1085 		movsd	-280(%rbp), %xmm0
 1102      E8FEFFFF 
 1103 0c09 89C6     		movl	%eax, %esi
 1104 0c0b BF000000 		movl	$.LC16, %edi
 1104      00
 1105 0c10 B8010000 		movl	$1, %eax
 1105      00
 1106 0c15 E8000000 		call	printf
 1106      00
 1107              	.L76:
 347:main.c        **** 						"Read %d bytes (checksum 0x%04X) from channel %d at %f MiB/s\n",
 348:main.c        **** 						length, checksum, chan, speed);
 349:main.c        **** 				}
 350:main.c        **** 				CHECK_STATUS(status, status, cleanup);
 1108              		.loc 1 350 0
 1109 0c1a 83BD28FF 		cmpl	$0, -216(%rbp)
 1109      FFFF00
 1110 0c21 7412     		je	.L77
 1111              		.loc 1 350 0 is_stmt 0 discriminator 1
 1112 0c23 8B8528FF 		movl	-216(%rbp), %eax
 1112      FFFF
 1113 0c29 898514FF 		movl	%eax, -236(%rbp)
 1113      FFFF
 1114 0c2f 90       		nop
 1115              	.LBE4:
 273:main.c        **** 
 1116              		.loc 1 273 0 is_stmt 1 discriminator 1
 1117 0c30 E9C90900 		jmp	.L50
 1117      00
 1118              	.L77:
 1119              	.LBB5:
 351:main.c        **** 
 352:main.c        **** 				// Close the file
 353:main.c        **** 				fclose(file);
 1120              		.loc 1 353 0
 1121 0c35 488B8558 		movq	-168(%rbp), %rax
 1121      FFFFFF
 1122 0c3c 4889C7   		movq	%rax, %rdi
 1123 0c3f E8000000 		call	fclose
 1123      00
 354:main.c        **** 				file = NULL;
 1124              		.loc 1 354 0
 1125 0c44 48C78558 		movq	$0, -168(%rbp)
 1125      FFFFFF00 
 1125      000000
 1126              	.LBE5:
 355:main.c        **** 			} else {
 356:main.c        **** 				size_t oldLength = dataFromFPGA.length;
 357:main.c        **** 				bStatus = bufAppendConst(&dataFromFPGA, 0x00, length, error);
 358:main.c        **** 				CHECK_STATUS(bStatus, FLP_LIBERR, cleanup);
 359:main.c        **** 				#ifdef WIN32
 360:main.c        **** 					QueryPerformanceCounter(&tvStart);
 361:main.c        **** 					fStatus = flReadChannel(handle, (uint8)chan, length, dataFromFPGA.data + oldLength, error, tim
 362:main.c        **** 					QueryPerformanceCounter(&tvEnd);
 363:main.c        **** 					totalTime = (double)(tvEnd.QuadPart - tvStart.QuadPart);
 364:main.c        **** 					totalTime /= freq.QuadPart;
 365:main.c        **** 					speed = (double)length / (1024*1024*totalTime);
 366:main.c        **** 				#else
 367:main.c        **** 					gettimeofday(&tvStart, NULL);
 368:main.c        **** 					fStatus = flReadChannel(handle, (uint8)chan, length, dataFromFPGA.data + oldLength, error, tim
 369:main.c        **** 					gettimeofday(&tvEnd, NULL);
 370:main.c        **** 					startTime = tvStart.tv_sec;
 371:main.c        **** 					startTime *= 1000000;
 372:main.c        **** 					startTime += tvStart.tv_usec;
 373:main.c        **** 					endTime = tvEnd.tv_sec;
 374:main.c        **** 					endTime *= 1000000;
 375:main.c        **** 					endTime += tvEnd.tv_usec;
 376:main.c        **** 					totalTime = (double)(endTime - startTime);
 377:main.c        **** 					totalTime /= 1000000;  // convert from uS to S.
 378:main.c        **** 					speed = (double)length / (1024*1024*totalTime);
 379:main.c        **** 				#endif
 380:main.c        **** 				if ( enableBenchmarking ) {
 381:main.c        **** 					printf(
 382:main.c        **** 						"Read %d bytes (checksum 0x%04X) from channel %d at %f MiB/s\n",
 383:main.c        **** 						length, calcChecksum(dataFromFPGA.data + oldLength, length), chan, speed);
 384:main.c        **** 				}
 385:main.c        **** 				CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 386:main.c        **** 			}
 387:main.c        **** 			break;
 1127              		.loc 1 387 0
 1128 0c4f E9650900 		jmp	.L127
 1128      00
 1129              	.L71:
 1130              	.LBB6:
 356:main.c        **** 				bStatus = bufAppendConst(&dataFromFPGA, 0x00, length, error);
 1131              		.loc 1 356 0
 1132 0c54 488B45D8 		movq	-40(%rbp), %rax
 1133 0c58 488945A8 		movq	%rax, -88(%rbp)
 357:main.c        **** 				CHECK_STATUS(bStatus, FLP_LIBERR, cleanup);
 1134              		.loc 1 357 0
 1135 0c5c 8B9518FF 		movl	-232(%rbp), %edx
 1135      FFFF
 1136 0c62 488B8DF8 		movq	-264(%rbp), %rcx
 1136      FEFFFF
 1137 0c69 488D45D0 		leaq	-48(%rbp), %rax
 1138 0c6d BE000000 		movl	$0, %esi
 1138      00
 1139 0c72 4889C7   		movq	%rax, %rdi
 1140 0c75 E8000000 		call	bufAppendConst
 1140      00
 1141 0c7a 898520FF 		movl	%eax, -224(%rbp)
 1141      FFFF
 358:main.c        **** 				#ifdef WIN32
 1142              		.loc 1 358 0
 1143 0c80 83BD20FF 		cmpl	$0, -224(%rbp)
 1143      FFFF00
 1144 0c87 740F     		je	.L79
 358:main.c        **** 				#ifdef WIN32
 1145              		.loc 1 358 0 is_stmt 0 discriminator 1
 1146 0c89 C78514FF 		movl	$1, -236(%rbp)
 1146      FFFF0100 
 1146      0000
 1147 0c93 E9660900 		jmp	.L50
 1147      00
 1148              	.L79:
 367:main.c        **** 					fStatus = flReadChannel(handle, (uint8)chan, length, dataFromFPGA.data + oldLength, error, tim
 1149              		.loc 1 367 0 is_stmt 1
 1150 0c98 488D45B0 		leaq	-80(%rbp), %rax
 1151 0c9c BE000000 		movl	$0, %esi
 1151      00
 1152 0ca1 4889C7   		movq	%rax, %rdi
 1153 0ca4 E8000000 		call	gettimeofday
 1153      00
 368:main.c        **** 					gettimeofday(&tvEnd, NULL);
 1154              		.loc 1 368 0
 1155 0ca9 488B55D0 		movq	-48(%rbp), %rdx
 1156 0cad 488B45A8 		movq	-88(%rbp), %rax
 1157 0cb1 488D0C02 		leaq	(%rdx,%rax), %rcx
 1158 0cb5 8B9518FF 		movl	-232(%rbp), %edx
 1158      FFFF
 1159 0cbb 8B8530FF 		movl	-208(%rbp), %eax
 1159      FFFF
 1160 0cc1 0FB6F0   		movzbl	%al, %esi
 1161 0cc4 4C8B85F0 		movq	-272(%rbp), %r8
 1161      FEFFFF
 1162 0ccb 488BBDF8 		movq	-264(%rbp), %rdi
 1162      FEFFFF
 1163 0cd2 488B8508 		movq	-248(%rbp), %rax
 1163      FFFFFF
 1164 0cd9 4D89C1   		movq	%r8, %r9
 1165 0cdc 4989F8   		movq	%rdi, %r8
 1166 0cdf 4889C7   		movq	%rax, %rdi
 1167 0ce2 E8000000 		call	flReadChannel
 1167      00
 1168 0ce7 898524FF 		movl	%eax, -220(%rbp)
 1168      FFFF
 369:main.c        **** 					startTime = tvStart.tv_sec;
 1169              		.loc 1 369 0
 1170 0ced 488D45C0 		leaq	-64(%rbp), %rax
 1171 0cf1 BE000000 		movl	$0, %esi
 1171      00
 1172 0cf6 4889C7   		movq	%rax, %rdi
 1173 0cf9 E8000000 		call	gettimeofday
 1173      00
 370:main.c        **** 					startTime *= 1000000;
 1174              		.loc 1 370 0
 1175 0cfe 488B45B0 		movq	-80(%rbp), %rax
 1176 0d02 48894588 		movq	%rax, -120(%rbp)
 371:main.c        **** 					startTime += tvStart.tv_usec;
 1177              		.loc 1 371 0
 1178 0d06 488B4588 		movq	-120(%rbp), %rax
 1179 0d0a 4869C040 		imulq	$1000000, %rax, %rax
 1179      420F00
 1180 0d11 48894588 		movq	%rax, -120(%rbp)
 372:main.c        **** 					endTime = tvEnd.tv_sec;
 1181              		.loc 1 372 0
 1182 0d15 488B45B8 		movq	-72(%rbp), %rax
 1183 0d19 48014588 		addq	%rax, -120(%rbp)
 373:main.c        **** 					endTime *= 1000000;
 1184              		.loc 1 373 0
 1185 0d1d 488B45C0 		movq	-64(%rbp), %rax
 1186 0d21 48894590 		movq	%rax, -112(%rbp)
 374:main.c        **** 					endTime += tvEnd.tv_usec;
 1187              		.loc 1 374 0
 1188 0d25 488B4590 		movq	-112(%rbp), %rax
 1189 0d29 4869C040 		imulq	$1000000, %rax, %rax
 1189      420F00
 1190 0d30 48894590 		movq	%rax, -112(%rbp)
 375:main.c        **** 					totalTime = (double)(endTime - startTime);
 1191              		.loc 1 375 0
 1192 0d34 488B45C8 		movq	-56(%rbp), %rax
 1193 0d38 48014590 		addq	%rax, -112(%rbp)
 376:main.c        **** 					totalTime /= 1000000;  // convert from uS to S.
 1194              		.loc 1 376 0
 1195 0d3c 488B4590 		movq	-112(%rbp), %rax
 1196 0d40 482B4588 		subq	-120(%rbp), %rax
 1197 0d44 660FEFC0 		pxor	%xmm0, %xmm0
 1198 0d48 F2480F2A 		cvtsi2sdq	%rax, %xmm0
 1198      C0
 1199 0d4d F20F1145 		movsd	%xmm0, -104(%rbp)
 1199      98
 377:main.c        **** 					speed = (double)length / (1024*1024*totalTime);
 1200              		.loc 1 377 0
 1201 0d52 F20F1045 		movsd	-104(%rbp), %xmm0
 1201      98
 1202 0d57 F20F100D 		movsd	.LC14(%rip), %xmm1
 1202      00000000 
 1203 0d5f F20F5EC1 		divsd	%xmm1, %xmm0
 1204 0d63 F20F1145 		movsd	%xmm0, -104(%rbp)
 1204      98
 378:main.c        **** 				#endif
 1205              		.loc 1 378 0
 1206 0d68 8B8518FF 		movl	-232(%rbp), %eax
 1206      FFFF
 1207 0d6e 4885C0   		testq	%rax, %rax
 1208 0d71 780B     		js	.L80
 1209 0d73 660FEFC0 		pxor	%xmm0, %xmm0
 1210 0d77 F2480F2A 		cvtsi2sdq	%rax, %xmm0
 1210      C0
 1211 0d7c EB19     		jmp	.L81
 1212              	.L80:
 1213 0d7e 4889C2   		movq	%rax, %rdx
 1214 0d81 48D1EA   		shrq	%rdx
 1215 0d84 83E001   		andl	$1, %eax
 1216 0d87 4809C2   		orq	%rax, %rdx
 1217 0d8a 660FEFC0 		pxor	%xmm0, %xmm0
 1218 0d8e F2480F2A 		cvtsi2sdq	%rdx, %xmm0
 1218      C2
 1219 0d93 F20F58C0 		addsd	%xmm0, %xmm0
 1220              	.L81:
 1221 0d97 F20F1055 		movsd	-104(%rbp), %xmm2
 1221      98
 1222 0d9c F20F100D 		movsd	.LC15(%rip), %xmm1
 1222      00000000 
 1223 0da4 F20F59CA 		mulsd	%xmm2, %xmm1
 1224 0da8 F20F5EC1 		divsd	%xmm1, %xmm0
 1225 0dac F20F1145 		movsd	%xmm0, -96(%rbp)
 1225      A0
 380:main.c        **** 					printf(
 1226              		.loc 1 380 0
 1227 0db1 0FB60500 		movzbl	enableBenchmarking(%rip), %eax
 1227      000000
 1228 0db8 84C0     		testb	%al, %al
 1229 0dba 744F     		je	.L82
 383:main.c        **** 				}
 1230              		.loc 1 383 0
 1231 0dbc 8B8518FF 		movl	-232(%rbp), %eax
 1231      FFFF
 1232 0dc2 488B4DD0 		movq	-48(%rbp), %rcx
 1233 0dc6 488B55A8 		movq	-88(%rbp), %rdx
 1234 0dca 4801CA   		addq	%rcx, %rdx
 1235 0dcd 4889C6   		movq	%rax, %rsi
 1236 0dd0 4889D7   		movq	%rdx, %rdi
 1237 0dd3 E866F2FF 		call	calcChecksum
 1237      FF
 381:main.c        **** 						"Read %d bytes (checksum 0x%04X) from channel %d at %f MiB/s\n",
 1238              		.loc 1 381 0
 1239 0dd8 0FB7D0   		movzwl	%ax, %edx
 1240 0ddb 488B75A0 		movq	-96(%rbp), %rsi
 1241 0ddf 8B8D30FF 		movl	-208(%rbp), %ecx
 1241      FFFF
 1242 0de5 8B8518FF 		movl	-232(%rbp), %eax
 1242      FFFF
 1243 0deb 4889B5E8 		movq	%rsi, -280(%rbp)
 1243      FEFFFF
 1244 0df2 F20F1085 		movsd	-280(%rbp), %xmm0
 1244      E8FEFFFF 
 1245 0dfa 89C6     		movl	%eax, %esi
 1246 0dfc BF000000 		movl	$.LC16, %edi
 1246      00
 1247 0e01 B8010000 		movl	$1, %eax
 1247      00
 1248 0e06 E8000000 		call	printf
 1248      00
 1249              	.L82:
 385:main.c        **** 			}
 1250              		.loc 1 385 0
 1251 0e0b 83BD24FF 		cmpl	$0, -220(%rbp)
 1251      FFFF00
 1252 0e12 0F84A107 		je	.L127
 1252      0000
 385:main.c        **** 			}
 1253              		.loc 1 385 0 is_stmt 0 discriminator 1
 1254 0e18 C78514FF 		movl	$1, -236(%rbp)
 1254      FFFF0100 
 1254      0000
 1255 0e22 90       		nop
 1256 0e23 E9D60700 		jmp	.L50
 1256      00
 1257              	.L55:
 1258              	.LBE6:
 1259              	.LBE2:
 1260              	.LBB7:
 388:main.c        **** 		}
 389:main.c        **** 		case 'w':{
 390:main.c        **** 			unsigned long int chan;
 391:main.c        **** 			size_t length = 1, i;
 1261              		.loc 1 391 0 is_stmt 1
 1262 0e28 48C78538 		movq	$1, -200(%rbp)
 1262      FFFFFF01 
 1262      000000
 392:main.c        **** 			char *end, ch;
 393:main.c        **** 			const char *p;
 394:main.c        **** 			ptr++;
 1263              		.loc 1 394 0
 1264 0e33 488B0500 		movq	ptr(%rip), %rax
 1264      000000
 1265 0e3a 4883C001 		addq	$1, %rax
 1266 0e3e 48890500 		movq	%rax, ptr(%rip)
 1266      000000
 395:main.c        **** 			
 396:main.c        **** 			// Get the channel to be written:
 397:main.c        **** 			errno = 0;
 1267              		.loc 1 397 0
 1268 0e45 E8000000 		call	__errno_location
 1268      00
 1269 0e4a C7000000 		movl	$0, (%rax)
 1269      0000
 398:main.c        **** 			chan = strtoul(ptr, &end, 16);
 1270              		.loc 1 398 0
 1271 0e50 488B0500 		movq	ptr(%rip), %rax
 1271      000000
 1272 0e57 488D8D40 		leaq	-192(%rbp), %rcx
 1272      FFFFFF
 1273 0e5e BA100000 		movl	$16, %edx
 1273      00
 1274 0e63 4889CE   		movq	%rcx, %rsi
 1275 0e66 4889C7   		movq	%rax, %rdi
 1276 0e69 E8000000 		call	strtoul
 1276      00
 1277 0e6e 48894580 		movq	%rax, -128(%rbp)
 399:main.c        **** 			CHECK_STATUS(errno, FLP_BAD_HEX, cleanup);
 1278              		.loc 1 399 0
 1279 0e72 E8000000 		call	__errno_location
 1279      00
 1280 0e77 8B00     		movl	(%rax), %eax
 1281 0e79 85C0     		testl	%eax, %eax
 1282 0e7b 740F     		je	.L84
 1283              		.loc 1 399 0 is_stmt 0 discriminator 1
 1284 0e7d C78514FF 		movl	$2, -236(%rbp)
 1284      FFFF0200 
 1284      0000
 1285 0e87 E9720700 		jmp	.L50
 1285      00
 1286              	.L84:
 400:main.c        **** 
 401:main.c        **** 			// Ensure that it's 0-127
 402:main.c        **** 			CHECK_STATUS(chan > 127, FLP_CHAN_RANGE, cleanup);
 1287              		.loc 1 402 0 is_stmt 1
 1288 0e8c 48837D80 		cmpq	$127, -128(%rbp)
 1288      7F
 1289 0e91 760F     		jbe	.L86
 1290              		.loc 1 402 0 is_stmt 0 discriminator 1
 1291 0e93 C78514FF 		movl	$3, -236(%rbp)
 1291      FFFF0300 
 1291      0000
 1292 0e9d E95C0700 		jmp	.L50
 1292      00
 1293              	.L86:
 403:main.c        **** 			ptr = end;
 1294              		.loc 1 403 0 is_stmt 1
 1295 0ea2 488B8540 		movq	-192(%rbp), %rax
 1295      FFFFFF
 1296 0ea9 48890500 		movq	%rax, ptr(%rip)
 1296      000000
 404:main.c        **** 
 405:main.c        **** 			// There must be a space now:
 406:main.c        **** 			CHECK_STATUS(*ptr != ' ', FLP_ILL_CHAR, cleanup);
 1297              		.loc 1 406 0
 1298 0eb0 488B0500 		movq	ptr(%rip), %rax
 1298      000000
 1299 0eb7 0FB600   		movzbl	(%rax), %eax
 1300 0eba 3C20     		cmpb	$32, %al
 1301 0ebc 740F     		je	.L87
 1302              		.loc 1 406 0 is_stmt 0 discriminator 1
 1303 0ebe C78514FF 		movl	$5, -236(%rbp)
 1303      FFFF0500 
 1303      0000
 1304 0ec8 E9310700 		jmp	.L50
 1304      00
 1305              	.L87:
 407:main.c        **** 
 408:main.c        **** 			// Now either a quote or a hex digit
 409:main.c        **** 		   ch = *++ptr;
 1306              		.loc 1 409 0 is_stmt 1
 1307 0ecd 488B0500 		movq	ptr(%rip), %rax
 1307      000000
 1308 0ed4 4883C001 		addq	$1, %rax
 1309 0ed8 48890500 		movq	%rax, ptr(%rip)
 1309      000000
 1310 0edf 488B0500 		movq	ptr(%rip), %rax
 1310      000000
 1311 0ee6 0FB600   		movzbl	(%rax), %eax
 1312 0ee9 888510FF 		movb	%al, -240(%rbp)
 1312      FFFF
 410:main.c        **** 			if ( ch == '"' || ch == '\'' ) {
 1313              		.loc 1 410 0
 1314 0eef 80BD10FF 		cmpb	$34, -240(%rbp)
 1314      FFFF22
 1315 0ef6 740D     		je	.L88
 1316              		.loc 1 410 0 is_stmt 0 discriminator 1
 1317 0ef8 80BD10FF 		cmpb	$39, -240(%rbp)
 1317      FFFF27
 1318 0eff 0F851203 		jne	.L89
 1318      0000
 1319              	.L88:
 1320              	.LBB8:
 411:main.c        **** 				uint16 checksum = 0x0000;
 1321              		.loc 1 411 0 is_stmt 1
 1322 0f05 66C78512 		movw	$0, -238(%rbp)
 1322      FFFFFF00 
 1322      00
 412:main.c        **** 
 413:main.c        **** 				// Get the file to read bytes from:
 414:main.c        **** 				ptr++;
 1323              		.loc 1 414 0
 1324 0f0e 488B0500 		movq	ptr(%rip), %rax
 1324      000000
 1325 0f15 4883C001 		addq	$1, %rax
 1326 0f19 48890500 		movq	%rax, ptr(%rip)
 1326      000000
 415:main.c        **** 				p = ptr;
 1327              		.loc 1 415 0
 1328 0f20 488B0500 		movq	ptr(%rip), %rax
 1328      000000
 1329 0f27 48898570 		movq	%rax, -144(%rbp)
 1329      FFFFFF
 416:main.c        **** 				while ( *p != ch && *p != '\0' ) {
 1330              		.loc 1 416 0
 1331 0f2e EB08     		jmp	.L90
 1332              	.L92:
 417:main.c        **** 					p++;
 1333              		.loc 1 417 0
 1334 0f30 48838570 		addq	$1, -144(%rbp)
 1334      FFFFFF01 
 1335              	.L90:
 416:main.c        **** 				while ( *p != ch && *p != '\0' ) {
 1336              		.loc 1 416 0
 1337 0f38 488B8570 		movq	-144(%rbp), %rax
 1337      FFFFFF
 1338 0f3f 0FB600   		movzbl	(%rax), %eax
 1339 0f42 3A8510FF 		cmpb	-240(%rbp), %al
 1339      FFFF
 1340 0f48 740E     		je	.L91
 416:main.c        **** 				while ( *p != ch && *p != '\0' ) {
 1341              		.loc 1 416 0 is_stmt 0 discriminator 1
 1342 0f4a 488B8570 		movq	-144(%rbp), %rax
 1342      FFFFFF
 1343 0f51 0FB600   		movzbl	(%rax), %eax
 1344 0f54 84C0     		testb	%al, %al
 1345 0f56 75D8     		jne	.L92
 1346              	.L91:
 418:main.c        **** 				}
 419:main.c        **** 				CHECK_STATUS(*p == '\0', FLP_UNTERM_STRING, cleanup);
 1347              		.loc 1 419 0 is_stmt 1
 1348 0f58 488B8570 		movq	-144(%rbp), %rax
 1348      FFFFFF
 1349 0f5f 0FB600   		movzbl	(%rax), %eax
 1350 0f62 84C0     		testb	%al, %al
 1351 0f64 750F     		jne	.L93
 1352              		.loc 1 419 0 is_stmt 0 discriminator 1
 1353 0f66 C78514FF 		movl	$6, -236(%rbp)
 1353      FFFF0600 
 1353      0000
 1354 0f70 E9890600 		jmp	.L50
 1354      00
 1355              	.L93:
 420:main.c        **** 				fileName = malloc((size_t)(p - ptr + 1));
 1356              		.loc 1 420 0 is_stmt 1
 1357 0f75 488B8570 		movq	-144(%rbp), %rax
 1357      FFFFFF
 1358 0f7c 488B1500 		movq	ptr(%rip), %rdx
 1358      000000
 1359 0f83 4829D0   		subq	%rdx, %rax
 1360 0f86 4883C001 		addq	$1, %rax
 1361 0f8a 4889C7   		movq	%rax, %rdi
 1362 0f8d E8000000 		call	malloc
 1362      00
 1363 0f92 48898550 		movq	%rax, -176(%rbp)
 1363      FFFFFF
 421:main.c        **** 				CHECK_STATUS(!fileName, FLP_NO_MEMORY, cleanup);
 1364              		.loc 1 421 0
 1365 0f99 4883BD50 		cmpq	$0, -176(%rbp)
 1365      FFFFFF00 
 1366 0fa1 750F     		jne	.L95
 1367              		.loc 1 421 0 is_stmt 0 discriminator 1
 1368 0fa3 C78514FF 		movl	$7, -236(%rbp)
 1368      FFFF0700 
 1368      0000
 1369 0fad E9600200 		jmp	.L94
 1369      00
 1370              	.L95:
 422:main.c        **** 				CHECK_STATUS(p - ptr == 0, FLP_EMPTY_STRING, cleanup);
 1371              		.loc 1 422 0 is_stmt 1
 1372 0fb2 488B8570 		movq	-144(%rbp), %rax
 1372      FFFFFF
 1373 0fb9 488B1500 		movq	ptr(%rip), %rdx
 1373      000000
 1374 0fc0 4839D0   		cmpq	%rdx, %rax
 1375 0fc3 750F     		jne	.L96
 1376              		.loc 1 422 0 is_stmt 0 discriminator 1
 1377 0fc5 C78514FF 		movl	$8, -236(%rbp)
 1377      FFFF0800 
 1377      0000
 1378 0fcf E93E0200 		jmp	.L94
 1378      00
 1379              	.L96:
 423:main.c        **** 				strncpy(fileName, ptr, (size_t)(p - ptr));
 1380              		.loc 1 423 0 is_stmt 1
 1381 0fd4 488B8570 		movq	-144(%rbp), %rax
 1381      FFFFFF
 1382 0fdb 488B1500 		movq	ptr(%rip), %rdx
 1382      000000
 1383 0fe2 4829D0   		subq	%rdx, %rax
 1384 0fe5 4889C2   		movq	%rax, %rdx
 1385 0fe8 488B0D00 		movq	ptr(%rip), %rcx
 1385      000000
 1386 0fef 488B8550 		movq	-176(%rbp), %rax
 1386      FFFFFF
 1387 0ff6 4889CE   		movq	%rcx, %rsi
 1388 0ff9 4889C7   		movq	%rax, %rdi
 1389 0ffc E8000000 		call	strncpy
 1389      00
 424:main.c        **** 				fileName[p - ptr] = '\0';
 1390              		.loc 1 424 0
 1391 1001 488B8570 		movq	-144(%rbp), %rax
 1391      FFFFFF
 1392 1008 488B1500 		movq	ptr(%rip), %rdx
 1392      000000
 1393 100f 4829D0   		subq	%rdx, %rax
 1394 1012 4889C2   		movq	%rax, %rdx
 1395 1015 488B8550 		movq	-176(%rbp), %rax
 1395      FFFFFF
 1396 101c 4801D0   		addq	%rdx, %rax
 1397 101f C60000   		movb	$0, (%rax)
 425:main.c        **** 				ptr = p + 1;  // skip over closing quote
 1398              		.loc 1 425 0
 1399 1022 488B8570 		movq	-144(%rbp), %rax
 1399      FFFFFF
 1400 1029 4883C001 		addq	$1, %rax
 1401 102d 48890500 		movq	%rax, ptr(%rip)
 1401      000000
 426:main.c        **** 
 427:main.c        **** 				// Open file for reading
 428:main.c        **** 				file = fopen(fileName, "rb");
 1402              		.loc 1 428 0
 1403 1034 488B8550 		movq	-176(%rbp), %rax
 1403      FFFFFF
 1404 103b BE000000 		movl	$.LC17, %esi
 1404      00
 1405 1040 4889C7   		movq	%rax, %rdi
 1406 1043 E8000000 		call	fopen
 1406      00
 1407 1048 48898558 		movq	%rax, -168(%rbp)
 1407      FFFFFF
 429:main.c        **** 				CHECK_STATUS(!file, FLP_CANNOT_LOAD, cleanup);
 1408              		.loc 1 429 0
 1409 104f 4883BD58 		cmpq	$0, -168(%rbp)
 1409      FFFFFF00 
 1410 1057 750F     		jne	.L97
 1411              		.loc 1 429 0 is_stmt 0 discriminator 1
 1412 1059 C78514FF 		movl	$10, -236(%rbp)
 1412      FFFF0A00 
 1412      0000
 1413 1063 E9AA0100 		jmp	.L94
 1413      00
 1414              	.L97:
 430:main.c        **** 				free(fileName);
 1415              		.loc 1 430 0 is_stmt 1
 1416 1068 488B8550 		movq	-176(%rbp), %rax
 1416      FFFFFF
 1417 106f 4889C7   		movq	%rax, %rdi
 1418 1072 E8000000 		call	free
 1418      00
 431:main.c        **** 				fileName = NULL;
 1419              		.loc 1 431 0
 1420 1077 48C78550 		movq	$0, -176(%rbp)
 1420      FFFFFF00 
 1420      000000
 432:main.c        **** 				
 433:main.c        **** 				#ifdef WIN32
 434:main.c        **** 					QueryPerformanceCounter(&tvStart);
 435:main.c        **** 					status = doWrite(handle, (uint8)chan, file, &length, &checksum, error);
 436:main.c        **** 					QueryPerformanceCounter(&tvEnd);
 437:main.c        **** 					totalTime = (double)(tvEnd.QuadPart - tvStart.QuadPart);
 438:main.c        **** 					totalTime /= freq.QuadPart;
 439:main.c        **** 					speed = (double)length / (1024*1024*totalTime);
 440:main.c        **** 				#else
 441:main.c        **** 					gettimeofday(&tvStart, NULL);
 1421              		.loc 1 441 0
 1422 1082 488D45B0 		leaq	-80(%rbp), %rax
 1423 1086 BE000000 		movl	$0, %esi
 1423      00
 1424 108b 4889C7   		movq	%rax, %rdi
 1425 108e E8000000 		call	gettimeofday
 1425      00
 442:main.c        **** 					status = doWrite(handle, (uint8)chan, file, &length, &checksum, error);
 1426              		.loc 1 442 0
 1427 1093 488B4580 		movq	-128(%rbp), %rax
 1428 1097 0FB6F0   		movzbl	%al, %esi
 1429 109a 4C8B85F8 		movq	-264(%rbp), %r8
 1429      FEFFFF
 1430 10a1 488DBD12 		leaq	-238(%rbp), %rdi
 1430      FFFFFF
 1431 10a8 488D8D38 		leaq	-200(%rbp), %rcx
 1431      FFFFFF
 1432 10af 488B9558 		movq	-168(%rbp), %rdx
 1432      FFFFFF
 1433 10b6 488B8508 		movq	-248(%rbp), %rax
 1433      FFFFFF
 1434 10bd 4D89C1   		movq	%r8, %r9
 1435 10c0 4989F8   		movq	%rdi, %r8
 1436 10c3 4889C7   		movq	%rax, %rdi
 1437 10c6 E884F3FF 		call	doWrite
 1437      FF
 1438 10cb 898528FF 		movl	%eax, -216(%rbp)
 1438      FFFF
 443:main.c        **** 					gettimeofday(&tvEnd, NULL);
 1439              		.loc 1 443 0
 1440 10d1 488D45C0 		leaq	-64(%rbp), %rax
 1441 10d5 BE000000 		movl	$0, %esi
 1441      00
 1442 10da 4889C7   		movq	%rax, %rdi
 1443 10dd E8000000 		call	gettimeofday
 1443      00
 444:main.c        **** 					startTime = tvStart.tv_sec;
 1444              		.loc 1 444 0
 1445 10e2 488B45B0 		movq	-80(%rbp), %rax
 1446 10e6 48894588 		movq	%rax, -120(%rbp)
 445:main.c        **** 					startTime *= 1000000;
 1447              		.loc 1 445 0
 1448 10ea 488B4588 		movq	-120(%rbp), %rax
 1449 10ee 4869C040 		imulq	$1000000, %rax, %rax
 1449      420F00
 1450 10f5 48894588 		movq	%rax, -120(%rbp)
 446:main.c        **** 					startTime += tvStart.tv_usec;
 1451              		.loc 1 446 0
 1452 10f9 488B45B8 		movq	-72(%rbp), %rax
 1453 10fd 48014588 		addq	%rax, -120(%rbp)
 447:main.c        **** 					endTime = tvEnd.tv_sec;
 1454              		.loc 1 447 0
 1455 1101 488B45C0 		movq	-64(%rbp), %rax
 1456 1105 48894590 		movq	%rax, -112(%rbp)
 448:main.c        **** 					endTime *= 1000000;
 1457              		.loc 1 448 0
 1458 1109 488B4590 		movq	-112(%rbp), %rax
 1459 110d 4869C040 		imulq	$1000000, %rax, %rax
 1459      420F00
 1460 1114 48894590 		movq	%rax, -112(%rbp)
 449:main.c        **** 					endTime += tvEnd.tv_usec;
 1461              		.loc 1 449 0
 1462 1118 488B45C8 		movq	-56(%rbp), %rax
 1463 111c 48014590 		addq	%rax, -112(%rbp)
 450:main.c        **** 					totalTime = (double)(endTime - startTime);
 1464              		.loc 1 450 0
 1465 1120 488B4590 		movq	-112(%rbp), %rax
 1466 1124 482B4588 		subq	-120(%rbp), %rax
 1467 1128 660FEFC0 		pxor	%xmm0, %xmm0
 1468 112c F2480F2A 		cvtsi2sdq	%rax, %xmm0
 1468      C0
 1469 1131 F20F1145 		movsd	%xmm0, -104(%rbp)
 1469      98
 451:main.c        **** 					totalTime /= 1000000;  // convert from uS to S.
 1470              		.loc 1 451 0
 1471 1136 F20F1045 		movsd	-104(%rbp), %xmm0
 1471      98
 1472 113b F20F100D 		movsd	.LC14(%rip), %xmm1
 1472      00000000 
 1473 1143 F20F5EC1 		divsd	%xmm1, %xmm0
 1474 1147 F20F1145 		movsd	%xmm0, -104(%rbp)
 1474      98
 452:main.c        **** 					speed = (double)length / (1024*1024*totalTime);
 1475              		.loc 1 452 0
 1476 114c 488B8538 		movq	-200(%rbp), %rax
 1476      FFFFFF
 1477 1153 4885C0   		testq	%rax, %rax
 1478 1156 780B     		js	.L98
 1479 1158 660FEFC0 		pxor	%xmm0, %xmm0
 1480 115c F2480F2A 		cvtsi2sdq	%rax, %xmm0
 1480      C0
 1481 1161 EB19     		jmp	.L99
 1482              	.L98:
 1483 1163 4889C2   		movq	%rax, %rdx
 1484 1166 48D1EA   		shrq	%rdx
 1485 1169 83E001   		andl	$1, %eax
 1486 116c 4809C2   		orq	%rax, %rdx
 1487 116f 660FEFC0 		pxor	%xmm0, %xmm0
 1488 1173 F2480F2A 		cvtsi2sdq	%rdx, %xmm0
 1488      C2
 1489 1178 F20F58C0 		addsd	%xmm0, %xmm0
 1490              	.L99:
 1491 117c F20F1055 		movsd	-104(%rbp), %xmm2
 1491      98
 1492 1181 F20F100D 		movsd	.LC15(%rip), %xmm1
 1492      00000000 
 1493 1189 F20F59CA 		mulsd	%xmm2, %xmm1
 1494 118d F20F5EC1 		divsd	%xmm1, %xmm0
 1495 1191 F20F1145 		movsd	%xmm0, -96(%rbp)
 1495      A0
 453:main.c        **** 				#endif
 454:main.c        **** 				if ( enableBenchmarking ) {
 1496              		.loc 1 454 0
 1497 1196 0FB60500 		movzbl	enableBenchmarking(%rip), %eax
 1497      000000
 1498 119d 84C0     		testb	%al, %al
 1499 119f 743A     		je	.L100
 455:main.c        **** 					printf(
 1500              		.loc 1 455 0
 1501 11a1 0FB78512 		movzwl	-238(%rbp), %eax
 1501      FFFFFF
 1502 11a8 0FB7D0   		movzwl	%ax, %edx
 1503 11ab 488B8538 		movq	-200(%rbp), %rax
 1503      FFFFFF
 1504 11b2 488B75A0 		movq	-96(%rbp), %rsi
 1505 11b6 488B4D80 		movq	-128(%rbp), %rcx
 1506 11ba 4889B5E8 		movq	%rsi, -280(%rbp)
 1506      FEFFFF
 1507 11c1 F20F1085 		movsd	-280(%rbp), %xmm0
 1507      E8FEFFFF 
 1508 11c9 4889C6   		movq	%rax, %rsi
 1509 11cc BF000000 		movl	$.LC18, %edi
 1509      00
 1510 11d1 B8010000 		movl	$1, %eax
 1510      00
 1511 11d6 E8000000 		call	printf
 1511      00
 1512              	.L100:
 456:main.c        **** 						"Wrote "PFSZD" bytes (checksum 0x%04X) to channel %lu at %f MiB/s\n",
 457:main.c        **** 						length, checksum, chan, speed);
 458:main.c        **** 				}
 459:main.c        **** 				CHECK_STATUS(status, status, cleanup);
 1513              		.loc 1 459 0
 1514 11db 83BD28FF 		cmpl	$0, -216(%rbp)
 1514      FFFF00
 1515 11e2 740E     		je	.L101
 1516              		.loc 1 459 0 is_stmt 0 discriminator 1
 1517 11e4 8B8528FF 		movl	-216(%rbp), %eax
 1517      FFFF
 1518 11ea 898514FF 		movl	%eax, -236(%rbp)
 1518      FFFF
 1519 11f0 EB20     		jmp	.L94
 1520              	.L101:
 460:main.c        **** 
 461:main.c        **** 				// Close the file
 462:main.c        **** 				fclose(file);
 1521              		.loc 1 462 0 is_stmt 1
 1522 11f2 488B8558 		movq	-168(%rbp), %rax
 1522      FFFFFF
 1523 11f9 4889C7   		movq	%rax, %rdi
 1524 11fc E8000000 		call	fclose
 1524      00
 463:main.c        **** 				file = NULL;
 1525              		.loc 1 463 0
 1526 1201 48C78558 		movq	$0, -168(%rbp)
 1526      FFFFFF00 
 1526      000000
 1527              	.LBE8:
 410:main.c        **** 				uint16 checksum = 0x0000;
 1528              		.loc 1 410 0
 1529 120c 90       		nop
 1530 120d E9AB0300 		jmp	.L83
 1530      00
 1531              	.L94:
 399:main.c        **** 
 1532              		.loc 1 399 0 discriminator 2
 1533 1212 E9E70300 		jmp	.L50
 1533      00
 1534              	.L89:
 464:main.c        **** 			} else if ( isHexDigit(ch) ) {
 1535              		.loc 1 464 0
 1536 1217 0FBE8510 		movsbl	-240(%rbp), %eax
 1536      FFFFFF
 1537 121e 89C7     		movl	%eax, %edi
 1538 1220 E8DBEDFF 		call	isHexDigit
 1538      FF
 1539 1225 84C0     		testb	%al, %al
 1540 1227 0F848402 		je	.L103
 1540      0000
 1541              	.LBB9:
 465:main.c        **** 				// Read a sequence of hex bytes to write
 466:main.c        **** 				uint8 *dataPtr;
 467:main.c        **** 				p = ptr + 1;
 1542              		.loc 1 467 0
 1543 122d 488B0500 		movq	ptr(%rip), %rax
 1543      000000
 1544 1234 4883C001 		addq	$1, %rax
 1545 1238 48898570 		movq	%rax, -144(%rbp)
 1545      FFFFFF
 468:main.c        **** 				while ( isHexDigit(*p) ) {
 1546              		.loc 1 468 0
 1547 123f EB08     		jmp	.L104
 1548              	.L105:
 469:main.c        **** 					p++;
 1549              		.loc 1 469 0
 1550 1241 48838570 		addq	$1, -144(%rbp)
 1550      FFFFFF01 
 1551              	.L104:
 468:main.c        **** 				while ( isHexDigit(*p) ) {
 1552              		.loc 1 468 0
 1553 1249 488B8570 		movq	-144(%rbp), %rax
 1553      FFFFFF
 1554 1250 0FB600   		movzbl	(%rax), %eax
 1555 1253 0FBEC0   		movsbl	%al, %eax
 1556 1256 89C7     		movl	%eax, %edi
 1557 1258 E8A3EDFF 		call	isHexDigit
 1557      FF
 1558 125d 84C0     		testb	%al, %al
 1559 125f 75E0     		jne	.L105
 470:main.c        **** 				}
 471:main.c        **** 				CHECK_STATUS((p - ptr) & 1, FLP_ODD_DIGITS, cleanup);
 1560              		.loc 1 471 0
 1561 1261 488B8570 		movq	-144(%rbp), %rax
 1561      FFFFFF
 1562 1268 488B1500 		movq	ptr(%rip), %rdx
 1562      000000
 1563 126f 4829D0   		subq	%rdx, %rax
 1564 1272 83E001   		andl	$1, %eax
 1565 1275 4885C0   		testq	%rax, %rax
 1566 1278 740F     		je	.L106
 1567              		.loc 1 471 0 is_stmt 0 discriminator 1
 1568 127a C78514FF 		movl	$9, -236(%rbp)
 1568      FFFF0900 
 1568      0000
 1569 1284 E9750300 		jmp	.L50
 1569      00
 1570              	.L106:
 472:main.c        **** 				length = (size_t)(p - ptr) / 2;
 1571              		.loc 1 472 0 is_stmt 1
 1572 1289 488B8570 		movq	-144(%rbp), %rax
 1572      FFFFFF
 1573 1290 488B1500 		movq	ptr(%rip), %rdx
 1573      000000
 1574 1297 4829D0   		subq	%rdx, %rax
 1575 129a 48D1E8   		shrq	%rax
 1576 129d 48898538 		movq	%rax, -200(%rbp)
 1576      FFFFFF
 473:main.c        **** 				data = malloc(length);
 1577              		.loc 1 473 0
 1578 12a4 488B8538 		movq	-200(%rbp), %rax
 1578      FFFFFF
 1579 12ab 4889C7   		movq	%rax, %rdi
 1580 12ae E8000000 		call	malloc
 1580      00
 1581 12b3 48898548 		movq	%rax, -184(%rbp)
 1581      FFFFFF
 474:main.c        **** 				dataPtr = data;
 1582              		.loc 1 474 0
 1583 12ba 488B8548 		movq	-184(%rbp), %rax
 1583      FFFFFF
 1584 12c1 48898578 		movq	%rax, -136(%rbp)
 1584      FFFFFF
 475:main.c        **** 				for ( i = 0; i < length; i++ ) {
 1585              		.loc 1 475 0
 1586 12c8 48C78568 		movq	$0, -152(%rbp)
 1586      FFFFFF00 
 1586      000000
 1587 12d3 EB34     		jmp	.L107
 1588              	.L108:
 476:main.c        **** 					getHexByte(dataPtr++);
 1589              		.loc 1 476 0 discriminator 3
 1590 12d5 488B8578 		movq	-136(%rbp), %rax
 1590      FFFFFF
 1591 12dc 488D5001 		leaq	1(%rax), %rdx
 1592 12e0 48899578 		movq	%rdx, -136(%rbp)
 1592      FFFFFF
 1593 12e7 4889C7   		movq	%rax, %rdi
 1594 12ea E804EEFF 		call	getHexByte
 1594      FF
 477:main.c        **** 					ptr += 2;
 1595              		.loc 1 477 0 discriminator 3
 1596 12ef 488B0500 		movq	ptr(%rip), %rax
 1596      000000
 1597 12f6 4883C002 		addq	$2, %rax
 1598 12fa 48890500 		movq	%rax, ptr(%rip)
 1598      000000
 475:main.c        **** 				for ( i = 0; i < length; i++ ) {
 1599              		.loc 1 475 0 discriminator 3
 1600 1301 48838568 		addq	$1, -152(%rbp)
 1600      FFFFFF01 
 1601              	.L107:
 475:main.c        **** 				for ( i = 0; i < length; i++ ) {
 1602              		.loc 1 475 0 is_stmt 0 discriminator 1
 1603 1309 488B8538 		movq	-200(%rbp), %rax
 1603      FFFFFF
 1604 1310 48398568 		cmpq	%rax, -152(%rbp)
 1604      FFFFFF
 1605 1317 72BC     		jb	.L108
 478:main.c        **** 				}
 479:main.c        **** 				#ifdef WIN32
 480:main.c        **** 					QueryPerformanceCounter(&tvStart);
 481:main.c        **** 					fStatus = flWriteChannel(handle, (uint8)chan, length, data, error);
 482:main.c        **** 					QueryPerformanceCounter(&tvEnd);
 483:main.c        **** 					totalTime = (double)(tvEnd.QuadPart - tvStart.QuadPart);
 484:main.c        **** 					totalTime /= freq.QuadPart;
 485:main.c        **** 					speed = (double)length / (1024*1024*totalTime);
 486:main.c        **** 				#else
 487:main.c        **** 					gettimeofday(&tvStart, NULL);
 1606              		.loc 1 487 0 is_stmt 1
 1607 1319 488D45B0 		leaq	-80(%rbp), %rax
 1608 131d BE000000 		movl	$0, %esi
 1608      00
 1609 1322 4889C7   		movq	%rax, %rdi
 1610 1325 E8000000 		call	gettimeofday
 1610      00
 488:main.c        **** 					fStatus = flWriteChannel(handle, (uint8)chan, length, data, error);
 1611              		.loc 1 488 0
 1612 132a 488B9538 		movq	-200(%rbp), %rdx
 1612      FFFFFF
 1613 1331 488B4580 		movq	-128(%rbp), %rax
 1614 1335 0FB6F0   		movzbl	%al, %esi
 1615 1338 488BBDF8 		movq	-264(%rbp), %rdi
 1615      FEFFFF
 1616 133f 488B8D48 		movq	-184(%rbp), %rcx
 1616      FFFFFF
 1617 1346 488B8508 		movq	-248(%rbp), %rax
 1617      FFFFFF
 1618 134d 4989F8   		movq	%rdi, %r8
 1619 1350 4889C7   		movq	%rax, %rdi
 1620 1353 E8000000 		call	flWriteChannel
 1620      00
 1621 1358 898524FF 		movl	%eax, -220(%rbp)
 1621      FFFF
 489:main.c        **** 					gettimeofday(&tvEnd, NULL);
 1622              		.loc 1 489 0
 1623 135e 488D45C0 		leaq	-64(%rbp), %rax
 1624 1362 BE000000 		movl	$0, %esi
 1624      00
 1625 1367 4889C7   		movq	%rax, %rdi
 1626 136a E8000000 		call	gettimeofday
 1626      00
 490:main.c        **** 					startTime = tvStart.tv_sec;
 1627              		.loc 1 490 0
 1628 136f 488B45B0 		movq	-80(%rbp), %rax
 1629 1373 48894588 		movq	%rax, -120(%rbp)
 491:main.c        **** 					startTime *= 1000000;
 1630              		.loc 1 491 0
 1631 1377 488B4588 		movq	-120(%rbp), %rax
 1632 137b 4869C040 		imulq	$1000000, %rax, %rax
 1632      420F00
 1633 1382 48894588 		movq	%rax, -120(%rbp)
 492:main.c        **** 					startTime += tvStart.tv_usec;
 1634              		.loc 1 492 0
 1635 1386 488B45B8 		movq	-72(%rbp), %rax
 1636 138a 48014588 		addq	%rax, -120(%rbp)
 493:main.c        **** 					endTime = tvEnd.tv_sec;
 1637              		.loc 1 493 0
 1638 138e 488B45C0 		movq	-64(%rbp), %rax
 1639 1392 48894590 		movq	%rax, -112(%rbp)
 494:main.c        **** 					endTime *= 1000000;
 1640              		.loc 1 494 0
 1641 1396 488B4590 		movq	-112(%rbp), %rax
 1642 139a 4869C040 		imulq	$1000000, %rax, %rax
 1642      420F00
 1643 13a1 48894590 		movq	%rax, -112(%rbp)
 495:main.c        **** 					endTime += tvEnd.tv_usec;
 1644              		.loc 1 495 0
 1645 13a5 488B45C8 		movq	-56(%rbp), %rax
 1646 13a9 48014590 		addq	%rax, -112(%rbp)
 496:main.c        **** 					totalTime = (double)(endTime - startTime);
 1647              		.loc 1 496 0
 1648 13ad 488B4590 		movq	-112(%rbp), %rax
 1649 13b1 482B4588 		subq	-120(%rbp), %rax
 1650 13b5 660FEFC0 		pxor	%xmm0, %xmm0
 1651 13b9 F2480F2A 		cvtsi2sdq	%rax, %xmm0
 1651      C0
 1652 13be F20F1145 		movsd	%xmm0, -104(%rbp)
 1652      98
 497:main.c        **** 					totalTime /= 1000000;  // convert from uS to S.
 1653              		.loc 1 497 0
 1654 13c3 F20F1045 		movsd	-104(%rbp), %xmm0
 1654      98
 1655 13c8 F20F100D 		movsd	.LC14(%rip), %xmm1
 1655      00000000 
 1656 13d0 F20F5EC1 		divsd	%xmm1, %xmm0
 1657 13d4 F20F1145 		movsd	%xmm0, -104(%rbp)
 1657      98
 498:main.c        **** 					speed = (double)length / (1024*1024*totalTime);
 1658              		.loc 1 498 0
 1659 13d9 488B8538 		movq	-200(%rbp), %rax
 1659      FFFFFF
 1660 13e0 4885C0   		testq	%rax, %rax
 1661 13e3 780B     		js	.L109
 1662 13e5 660FEFC0 		pxor	%xmm0, %xmm0
 1663 13e9 F2480F2A 		cvtsi2sdq	%rax, %xmm0
 1663      C0
 1664 13ee EB19     		jmp	.L110
 1665              	.L109:
 1666 13f0 4889C2   		movq	%rax, %rdx
 1667 13f3 48D1EA   		shrq	%rdx
 1668 13f6 83E001   		andl	$1, %eax
 1669 13f9 4809C2   		orq	%rax, %rdx
 1670 13fc 660FEFC0 		pxor	%xmm0, %xmm0
 1671 1400 F2480F2A 		cvtsi2sdq	%rdx, %xmm0
 1671      C2
 1672 1405 F20F58C0 		addsd	%xmm0, %xmm0
 1673              	.L110:
 1674 1409 F20F1055 		movsd	-104(%rbp), %xmm2
 1674      98
 1675 140e F20F100D 		movsd	.LC15(%rip), %xmm1
 1675      00000000 
 1676 1416 F20F59CA 		mulsd	%xmm2, %xmm1
 1677 141a F20F5EC1 		divsd	%xmm1, %xmm0
 1678 141e F20F1145 		movsd	%xmm0, -96(%rbp)
 1678      A0
 499:main.c        **** 				#endif
 500:main.c        **** 				if ( enableBenchmarking ) {
 1679              		.loc 1 500 0
 1680 1423 0FB60500 		movzbl	enableBenchmarking(%rip), %eax
 1680      000000
 1681 142a 84C0     		testb	%al, %al
 1682 142c 744C     		je	.L111
 501:main.c        **** 					printf(
 502:main.c        **** 						"Wrote "PFSZD" bytes (checksum 0x%04X) to channel %lu at %f MiB/s\n",
 503:main.c        **** 						length, calcChecksum(data, length), chan, speed);
 1683              		.loc 1 503 0
 1684 142e 488B9538 		movq	-200(%rbp), %rdx
 1684      FFFFFF
 1685 1435 488B8548 		movq	-184(%rbp), %rax
 1685      FFFFFF
 1686 143c 4889D6   		movq	%rdx, %rsi
 1687 143f 4889C7   		movq	%rax, %rdi
 1688 1442 E8F7EBFF 		call	calcChecksum
 1688      FF
 501:main.c        **** 					printf(
 1689              		.loc 1 501 0
 1690 1447 0FB7D0   		movzwl	%ax, %edx
 1691 144a 488B8538 		movq	-200(%rbp), %rax
 1691      FFFFFF
 1692 1451 488B75A0 		movq	-96(%rbp), %rsi
 1693 1455 488B4D80 		movq	-128(%rbp), %rcx
 1694 1459 4889B5E8 		movq	%rsi, -280(%rbp)
 1694      FEFFFF
 1695 1460 F20F1085 		movsd	-280(%rbp), %xmm0
 1695      E8FEFFFF 
 1696 1468 4889C6   		movq	%rax, %rsi
 1697 146b BF000000 		movl	$.LC18, %edi
 1697      00
 1698 1470 B8010000 		movl	$1, %eax
 1698      00
 1699 1475 E8000000 		call	printf
 1699      00
 1700              	.L111:
 504:main.c        **** 				}
 505:main.c        **** 				CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 1701              		.loc 1 505 0
 1702 147a 83BD24FF 		cmpl	$0, -220(%rbp)
 1702      FFFF00
 1703 1481 740F     		je	.L112
 1704              		.loc 1 505 0 is_stmt 0 discriminator 1
 1705 1483 C78514FF 		movl	$1, -236(%rbp)
 1705      FFFF0100 
 1705      0000
 1706 148d E96C0100 		jmp	.L50
 1706      00
 1707              	.L112:
 506:main.c        **** 				free(data);
 1708              		.loc 1 506 0 is_stmt 1
 1709 1492 488B8548 		movq	-184(%rbp), %rax
 1709      FFFFFF
 1710 1499 4889C7   		movq	%rax, %rdi
 1711 149c E8000000 		call	free
 1711      00
 507:main.c        **** 				data = NULL;
 1712              		.loc 1 507 0
 1713 14a1 48C78548 		movq	$0, -184(%rbp)
 1713      FFFFFF00 
 1713      000000
 1714              	.LBE9:
 508:main.c        **** 			} else {
 509:main.c        **** 				FAIL(FLP_ILL_CHAR, cleanup);
 510:main.c        **** 			}
 511:main.c        **** 			break;
 1715              		.loc 1 511 0
 1716 14ac E90C0100 		jmp	.L83
 1716      00
 1717              	.L103:
 509:main.c        **** 			}
 1718              		.loc 1 509 0
 1719 14b1 C78514FF 		movl	$5, -236(%rbp)
 1719      FFFF0500 
 1719      0000
 1720 14bb 90       		nop
 1721 14bc E93D0100 		jmp	.L50
 1721      00
 1722              	.L56:
 1723              	.LBE7:
 1724              	.LBB10:
 512:main.c        **** 		}
 513:main.c        **** 		case '+':{
 514:main.c        **** 			uint32 conduit;
 515:main.c        **** 			char *end;
 516:main.c        **** 			ptr++;
 1725              		.loc 1 516 0
 1726 14c1 488B0500 		movq	ptr(%rip), %rax
 1726      000000
 1727 14c8 4883C001 		addq	$1, %rax
 1728 14cc 48890500 		movq	%rax, ptr(%rip)
 1728      000000
 517:main.c        **** 
 518:main.c        **** 			// Get the conduit
 519:main.c        **** 			errno = 0;
 1729              		.loc 1 519 0
 1730 14d3 E8000000 		call	__errno_location
 1730      00
 1731 14d8 C7000000 		movl	$0, (%rax)
 1731      0000
 520:main.c        **** 			conduit = (uint32)strtoul(ptr, &end, 16);
 1732              		.loc 1 520 0
 1733 14de 488B0500 		movq	ptr(%rip), %rax
 1733      000000
 1734 14e5 488D8D40 		leaq	-192(%rbp), %rcx
 1734      FFFFFF
 1735 14ec BA100000 		movl	$16, %edx
 1735      00
 1736 14f1 4889CE   		movq	%rcx, %rsi
 1737 14f4 4889C7   		movq	%rax, %rdi
 1738 14f7 E8000000 		call	strtoul
 1738      00
 1739 14fc 89852CFF 		movl	%eax, -212(%rbp)
 1739      FFFF
 521:main.c        **** 			CHECK_STATUS(errno, FLP_BAD_HEX, cleanup);
 1740              		.loc 1 521 0
 1741 1502 E8000000 		call	__errno_location
 1741      00
 1742 1507 8B00     		movl	(%rax), %eax
 1743 1509 85C0     		testl	%eax, %eax
 1744 150b 740F     		je	.L113
 1745              		.loc 1 521 0 is_stmt 0 discriminator 1
 1746 150d C78514FF 		movl	$2, -236(%rbp)
 1746      FFFF0200 
 1746      0000
 1747 1517 E9E20000 		jmp	.L50
 1747      00
 1748              	.L113:
 522:main.c        **** 
 523:main.c        **** 			// Ensure that it's 0-127
 524:main.c        **** 			CHECK_STATUS(conduit > 255, FLP_CONDUIT_RANGE, cleanup);
 1749              		.loc 1 524 0 is_stmt 1
 1750 151c 81BD2CFF 		cmpl	$255, -212(%rbp)
 1750      FFFFFF00 
 1750      0000
 1751 1526 760F     		jbe	.L115
 1752              		.loc 1 524 0 is_stmt 0 discriminator 1
 1753 1528 C78514FF 		movl	$4, -236(%rbp)
 1753      FFFF0400 
 1753      0000
 1754 1532 E9C70000 		jmp	.L50
 1754      00
 1755              	.L115:
 525:main.c        **** 			ptr = end;
 1756              		.loc 1 525 0 is_stmt 1
 1757 1537 488B8540 		movq	-192(%rbp), %rax
 1757      FFFFFF
 1758 153e 48890500 		movq	%rax, ptr(%rip)
 1758      000000
 526:main.c        **** 
 527:main.c        **** 			// Only two valid chars at this point:
 528:main.c        **** 			CHECK_STATUS(*ptr != '\0' && *ptr != ';', FLP_ILL_CHAR, cleanup);
 1759              		.loc 1 528 0
 1760 1545 488B0500 		movq	ptr(%rip), %rax
 1760      000000
 1761 154c 0FB600   		movzbl	(%rax), %eax
 1762 154f 84C0     		testb	%al, %al
 1763 1551 741D     		je	.L116
 1764              		.loc 1 528 0 is_stmt 0 discriminator 1
 1765 1553 488B0500 		movq	ptr(%rip), %rax
 1765      000000
 1766 155a 0FB600   		movzbl	(%rax), %eax
 1767 155d 3C3B     		cmpb	$59, %al
 1768 155f 740F     		je	.L116
 1769              		.loc 1 528 0 discriminator 2
 1770 1561 C78514FF 		movl	$5, -236(%rbp)
 1770      FFFF0500 
 1770      0000
 1771 156b E98E0000 		jmp	.L50
 1771      00
 1772              	.L116:
 529:main.c        **** 
 530:main.c        **** 			fStatus = flSelectConduit(handle, (uint8)conduit, error);
 1773              		.loc 1 530 0 is_stmt 1
 1774 1570 8B852CFF 		movl	-212(%rbp), %eax
 1774      FFFF
 1775 1576 0FB6C8   		movzbl	%al, %ecx
 1776 1579 488B95F8 		movq	-264(%rbp), %rdx
 1776      FEFFFF
 1777 1580 488B8508 		movq	-248(%rbp), %rax
 1777      FFFFFF
 1778 1587 89CE     		movl	%ecx, %esi
 1779 1589 4889C7   		movq	%rax, %rdi
 1780 158c E8000000 		call	flSelectConduit
 1780      00
 1781 1591 898524FF 		movl	%eax, -220(%rbp)
 1781      FFFF
 531:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 1782              		.loc 1 531 0
 1783 1597 83BD24FF 		cmpl	$0, -220(%rbp)
 1783      FFFF00
 1784 159e 741C     		je	.L128
 1785              		.loc 1 531 0 is_stmt 0 discriminator 1
 1786 15a0 C78514FF 		movl	$1, -236(%rbp)
 1786      FFFF0100 
 1786      0000
 1787 15aa 90       		nop
 1788 15ab EB51     		jmp	.L50
 1789              	.L126:
 1790              	.LBE10:
 532:main.c        **** 			break;
 533:main.c        **** 		}
 534:main.c        **** 		default:
 535:main.c        **** 			FAIL(FLP_ILL_CHAR, cleanup);
 1791              		.loc 1 535 0 is_stmt 1
 1792 15ad C78514FF 		movl	$5, -236(%rbp)
 1792      FFFF0500 
 1792      0000
 1793 15b7 EB45     		jmp	.L50
 1794              	.L127:
 1795              	.LBB11:
 387:main.c        **** 		}
 1796              		.loc 1 387 0
 1797 15b9 90       		nop
 1798 15ba EB01     		jmp	.L83
 1799              	.L128:
 1800              	.LBE11:
 1801              	.LBB12:
 532:main.c        **** 			break;
 1802              		.loc 1 532 0
 1803 15bc 90       		nop
 1804              	.L83:
 1805              	.LBE12:
 536:main.c        **** 		}
 537:main.c        **** 	} while ( *ptr == ';' );
 1806              		.loc 1 537 0
 1807 15bd 488B0500 		movq	ptr(%rip), %rax
 1807      000000
 1808 15c4 0FB600   		movzbl	(%rax), %eax
 1809 15c7 3C3B     		cmpb	$59, %al
 1810 15c9 0F8455F1 		je	.L51
 1810      FFFF
 538:main.c        **** 	CHECK_STATUS(*ptr != '\0', FLP_ILL_CHAR, cleanup);
 1811              		.loc 1 538 0
 1812 15cf 488B0500 		movq	ptr(%rip), %rax
 1812      000000
 1813 15d6 0FB600   		movzbl	(%rax), %eax
 1814 15d9 84C0     		testb	%al, %al
 1815 15db 740C     		je	.L119
 1816              		.loc 1 538 0 is_stmt 0 discriminator 1
 1817 15dd C78514FF 		movl	$5, -236(%rbp)
 1817      FFFF0500 
 1817      0000
 1818 15e7 EB15     		jmp	.L50
 1819              	.L119:
 539:main.c        **** 
 540:main.c        **** 	dump(0x00000000, dataFromFPGA.data, dataFromFPGA.length);
 1820              		.loc 1 540 0 is_stmt 1
 1821 15e9 488B55D8 		movq	-40(%rbp), %rdx
 1822 15ed 488B45D0 		movq	-48(%rbp), %rax
 1823 15f1 4889C6   		movq	%rax, %rsi
 1824 15f4 BF000000 		movl	$0, %edi
 1824      00
 1825 15f9 E8000000 		call	dump
 1825      00
 1826              	.L50:
 541:main.c        **** 
 542:main.c        **** cleanup:
 543:main.c        **** 	bufDestroy(&dataFromFPGA);
 1827              		.loc 1 543 0
 1828 15fe 488D45D0 		leaq	-48(%rbp), %rax
 1829 1602 4889C7   		movq	%rax, %rdi
 1830 1605 E8000000 		call	bufDestroy
 1830      00
 544:main.c        **** 	if ( file ) {
 1831              		.loc 1 544 0
 1832 160a 4883BD58 		cmpq	$0, -168(%rbp)
 1832      FFFFFF00 
 1833 1612 740F     		je	.L120
 545:main.c        **** 		fclose(file);
 1834              		.loc 1 545 0
 1835 1614 488B8558 		movq	-168(%rbp), %rax
 1835      FFFFFF
 1836 161b 4889C7   		movq	%rax, %rdi
 1837 161e E8000000 		call	fclose
 1837      00
 1838              	.L120:
 546:main.c        **** 	}
 547:main.c        **** 	free(fileName);
 1839              		.loc 1 547 0
 1840 1623 488B8550 		movq	-176(%rbp), %rax
 1840      FFFFFF
 1841 162a 4889C7   		movq	%rax, %rdi
 1842 162d E8000000 		call	free
 1842      00
 548:main.c        **** 	free(data);
 1843              		.loc 1 548 0
 1844 1632 488B8548 		movq	-184(%rbp), %rax
 1844      FFFFFF
 1845 1639 4889C7   		movq	%rax, %rdi
 1846 163c E8000000 		call	free
 1846      00
 549:main.c        **** 	if ( retVal > FLP_LIBERR ) {
 1847              		.loc 1 549 0
 1848 1641 83BD14FF 		cmpl	$1, -236(%rbp)
 1848      FFFF01
 1849 1648 0F86A700 		jbe	.L121
 1849      0000
 1850              	.LBB13:
 550:main.c        **** 		const int column = (int)(ptr - line);
 1851              		.loc 1 550 0
 1852 164e 488B0500 		movq	ptr(%rip), %rax
 1852      000000
 1853 1655 4889C2   		movq	%rax, %rdx
 1854 1658 488B8500 		movq	-256(%rbp), %rax
 1854      FFFFFF
 1855 165f 4829C2   		subq	%rax, %rdx
 1856 1662 4889D0   		movq	%rdx, %rax
 1857 1665 898534FF 		movl	%eax, -204(%rbp)
 1857      FFFF
 551:main.c        **** 		int i;
 552:main.c        **** 		fprintf(stderr, "%s at column %d\n  %s\n  ", errMessages[retVal], column, line);
 1858              		.loc 1 552 0
 1859 166b 8B8514FF 		movl	-236(%rbp), %eax
 1859      FFFF
 1860 1671 488B14C5 		movq	errMessages(,%rax,8), %rdx
 1860      00000000 
 1861 1679 488B0500 		movq	stderr(%rip), %rax
 1861      000000
 1862 1680 488BB500 		movq	-256(%rbp), %rsi
 1862      FFFFFF
 1863 1687 8B8D34FF 		movl	-204(%rbp), %ecx
 1863      FFFF
 1864 168d 4989F0   		movq	%rsi, %r8
 1865 1690 BE000000 		movl	$.LC19, %esi
 1865      00
 1866 1695 4889C7   		movq	%rax, %rdi
 1867 1698 B8000000 		movl	$0, %eax
 1867      00
 1868 169d E8000000 		call	fprintf
 1868      00
 553:main.c        **** 		for ( i = 0; i < column; i++ ) {
 1869              		.loc 1 553 0
 1870 16a2 C7851CFF 		movl	$0, -228(%rbp)
 1870      FFFF0000 
 1870      0000
 1871 16ac EB1B     		jmp	.L122
 1872              	.L123:
 554:main.c        **** 			fprintf(stderr, " ");
 1873              		.loc 1 554 0 discriminator 3
 1874 16ae 488B0500 		movq	stderr(%rip), %rax
 1874      000000
 1875 16b5 4889C6   		movq	%rax, %rsi
 1876 16b8 BF200000 		movl	$32, %edi
 1876      00
 1877 16bd E8000000 		call	fputc
 1877      00
 553:main.c        **** 		for ( i = 0; i < column; i++ ) {
 1878              		.loc 1 553 0 discriminator 3
 1879 16c2 83851CFF 		addl	$1, -228(%rbp)
 1879      FFFF01
 1880              	.L122:
 553:main.c        **** 		for ( i = 0; i < column; i++ ) {
 1881              		.loc 1 553 0 is_stmt 0 discriminator 1
 1882 16c9 8B851CFF 		movl	-228(%rbp), %eax
 1882      FFFF
 1883 16cf 3B8534FF 		cmpl	-204(%rbp), %eax
 1883      FFFF
 1884 16d5 7CD7     		jl	.L123
 555:main.c        **** 		}
 556:main.c        **** 		fprintf(stderr, "^\n");
 1885              		.loc 1 556 0 is_stmt 1
 1886 16d7 488B0500 		movq	stderr(%rip), %rax
 1886      000000
 1887 16de 4889C1   		movq	%rax, %rcx
 1888 16e1 BA020000 		movl	$2, %edx
 1888      00
 1889 16e6 BE010000 		movl	$1, %esi
 1889      00
 1890 16eb BF000000 		movl	$.LC20, %edi
 1890      00
 1891 16f0 E8000000 		call	fwrite
 1891      00
 1892              	.L121:
 1893              	.LBE13:
 557:main.c        **** 	}
 558:main.c        **** 	return retVal;
 1894              		.loc 1 558 0
 1895 16f5 8B8514FF 		movl	-236(%rbp), %eax
 1895      FFFF
 559:main.c        **** }
 1896              		.loc 1 559 0
 1897 16fb 488B4DF8 		movq	-8(%rbp), %rcx
 1898 16ff 6448330C 		xorq	%fs:40, %rcx
 1898      25280000 
 1898      00
 1899 1708 7405     		je	.L125
 1900 170a E8000000 		call	__stack_chk_fail
 1900      00
 1901              	.L125:
 1902 170f C9       		leave
 1903              		.cfi_def_cfa 7, 8
 1904 1710 C3       		ret
 1905              		.cfi_endproc
 1906              	.LFE10:
 1908              		.section	.rodata
 1909              	.LC21:
 1910 01f9 30303030 		.string	"0000"
 1910      00
 1911              	.LC22:
 1912 01fe 30303031 		.string	"0001"
 1912      00
 1913              	.LC23:
 1914 0203 30303130 		.string	"0010"
 1914      00
 1915              	.LC24:
 1916 0208 30303131 		.string	"0011"
 1916      00
 1917              	.LC25:
 1918 020d 30313030 		.string	"0100"
 1918      00
 1919              	.LC26:
 1920 0212 30313031 		.string	"0101"
 1920      00
 1921              	.LC27:
 1922 0217 30313130 		.string	"0110"
 1922      00
 1923              	.LC28:
 1924 021c 30313131 		.string	"0111"
 1924      00
 1925              	.LC29:
 1926 0221 31303030 		.string	"1000"
 1926      00
 1927              	.LC30:
 1928 0226 31303031 		.string	"1001"
 1928      00
 1929              	.LC31:
 1930 022b 58585858 		.string	"XXXX"
 1930      00
 1931              	.LC32:
 1932 0230 31303130 		.string	"1010"
 1932      00
 1933              	.LC33:
 1934 0235 31303131 		.string	"1011"
 1934      00
 1935              	.LC34:
 1936 023a 31313030 		.string	"1100"
 1936      00
 1937              	.LC35:
 1938 023f 31313031 		.string	"1101"
 1938      00
 1939              	.LC36:
 1940 0244 31313130 		.string	"1110"
 1940      00
 1941              	.LC37:
 1942 0249 31313131 		.string	"1111"
 1942      00
 1943              		.data
 1944 0018 00000000 		.align 32
 1944      00000000 
 1947              	nibbles:
 1948 0020 00000000 		.quad	.LC21
 1948      00000000 
 1949 0028 00000000 		.quad	.LC22
 1949      00000000 
 1950 0030 00000000 		.quad	.LC23
 1950      00000000 
 1951 0038 00000000 		.quad	.LC24
 1951      00000000 
 1952 0040 00000000 		.quad	.LC25
 1952      00000000 
 1953 0048 00000000 		.quad	.LC26
 1953      00000000 
 1954 0050 00000000 		.quad	.LC27
 1954      00000000 
 1955 0058 00000000 		.quad	.LC28
 1955      00000000 
 1956 0060 00000000 		.quad	.LC29
 1956      00000000 
 1957 0068 00000000 		.quad	.LC30
 1957      00000000 
 1958 0070 00000000 		.quad	.LC31
 1958      00000000 
 1959 0078 00000000 		.quad	.LC31
 1959      00000000 
 1960 0080 00000000 		.quad	.LC31
 1960      00000000 
 1961 0088 00000000 		.quad	.LC31
 1961      00000000 
 1962 0090 00000000 		.quad	.LC31
 1962      00000000 
 1963 0098 00000000 		.quad	.LC31
 1963      00000000 
 1964 00a0 00000000 		.quad	.LC31
 1964      00000000 
 1965 00a8 00000000 		.quad	.LC32
 1965      00000000 
 1966 00b0 00000000 		.quad	.LC33
 1966      00000000 
 1967 00b8 00000000 		.quad	.LC34
 1967      00000000 
 1968 00c0 00000000 		.quad	.LC35
 1968      00000000 
 1969 00c8 00000000 		.quad	.LC36
 1969      00000000 
 1970 00d0 00000000 		.quad	.LC37
 1970      00000000 
 1971              		.section	.rodata
 1972 024e 0000     		.align 8
 1973              	.LC38:
 1974 0250 20202020 		.string	"            vendor ID and product ID (e.g 04B4:8613)"
 1974      20202020 
 1974      20202020 
 1974      76656E64 
 1974      6F722049 
 1975              	.LC39:
 1976 0285 3C564944 		.string	"<VID:PID>"
 1976      3A504944 
 1976      3E00
 1977              	.LC40:
 1978 028f 69767000 		.string	"ivp"
 1979              	.LC41:
 1980 0293 6900     		.string	"i"
 1981 0295 000000   		.align 8
 1982              	.LC42:
 1983 0298 20202020 		.string	"       VID, PID and opt. dev ID (e.g 1D50:602B:0001)"
 1983      20202056 
 1983      49442C20 
 1983      50494420 
 1983      616E6420 
 1984              	.LC43:
 1985 02cd 3C564944 		.string	"<VID:PID[:DID]>"
 1985      3A504944 
 1985      5B3A4449 
 1985      445D3E00 
 1986              	.LC44:
 1987 02dd 767000   		.string	"vp"
 1988              	.LC45:
 1989 02e0 7600     		.string	"v"
 1990 02e2 00000000 		.align 8
 1990      0000
 1991              	.LC46:
 1992 02e8 20202020 		.string	"        firmware to RAM-load (or use std fw)"
 1992      20202020 
 1992      6669726D 
 1992      77617265 
 1992      20746F20 
 1993              	.LC47:
 1994 0315 3C666972 		.string	"<firmware.hex>"
 1994      6D776172 
 1994      652E6865 
 1994      783E00
 1995              	.LC48:
 1996 0324 667700   		.string	"fw"
 1997              	.LC49:
 1998 0327 6600     		.string	"f"
 1999 0329 00000000 		.align 8
 1999      000000
 2000              	.LC50:
 2001 0330 20726561 		.string	" read/write digital ports (e.g B13+,C1-,B2?)"
 2001      642F7772 
 2001      69746520 
 2001      64696769 
 2001      74616C20 
 2002              	.LC51:
 2003 035d 3C626974 		.string	"<bitCfg[,bitCfg]*>"
 2003      4366675B 
 2003      2C626974 
 2003      4366675D 
 2003      2A3E00
 2004              	.LC52:
 2005 0370 706F7274 		.string	"ports"
 2005      7300
 2006              	.LC53:
 2007 0376 6400     		.string	"d"
 2008              	.LC54:
 2009 0378 20202020 		.string	"         query the JTAG chain"
 2009      20202020 
 2009      20717565 
 2009      72792074 
 2009      6865204A 
 2010              	.LC55:
 2011 0396 3C6A7461 		.string	"<jtagBits>"
 2011      67426974 
 2011      733E00
 2012              	.LC56:
 2013 03a1 71756572 		.string	"query"
 2013      7900
 2014              	.LC57:
 2015 03a7 7100     		.string	"q"
 2016              	.LC58:
 2017 03a9 20202020 		.string	"         program a device"
 2017      20202020 
 2017      2070726F 
 2017      6772616D 
 2017      20612064 
 2018              	.LC59:
 2019 03c3 3C636F6E 		.string	"<config>"
 2019      6669673E 
 2019      00
 2020              	.LC60:
 2021 03cc 70726F67 		.string	"program"
 2021      72616D00 
 2022              	.LC61:
 2023 03d4 7000     		.string	"p"
 2024 03d6 0000     		.align 8
 2025              	.LC62:
 2026 03d8 20202020 		.string	"        which comm conduit to choose (default 0x01)"
 2026      20202020 
 2026      77686963 
 2026      6820636F 
 2026      6D6D2063 
 2027              	.LC63:
 2028 040c 3C636F6E 		.string	"<conduit>"
 2028      64756974 
 2028      3E00
 2029              	.LC64:
 2030 0416 636F6E64 		.string	"conduit"
 2030      75697400 
 2031              	.LC65:
 2032 041e 6300     		.string	"c"
 2033              	.LC66:
 2034 0420 20202020 		.string	"    ##########"
 2034      23232323 
 2034      23232323 
 2034      232300
 2035              	.LC67:
 2036 042f 3C616374 		.string	"<actionString>"
 2036      696F6E53 
 2036      7472696E 
 2036      673E00
 2037              	.LC68:
 2038 043e 6D756C74 		.string	"multiplesteps"
 2038      69706C65 
 2038      73746570 
 2038      7300
 2039              	.LC69:
 2040 044c 6500     		.string	"e"
 2041 044e 0000     		.align 8
 2042              	.LC70:
 2043 0450 20202020 		.string	"    a series of CommFPGA actions"
 2043      61207365 
 2043      72696573 
 2043      206F6620 
 2043      436F6D6D 
 2044              	.LC71:
 2045 0471 61637469 		.string	"action"
 2045      6F6E00
 2046              	.LC72:
 2047 0478 6100     		.string	"a"
 2048 047a 00000000 		.align 8
 2048      0000
 2049              	.LC73:
 2050 0480 20202020 		.string	"                    start up an interactive CommFPGA session"
 2050      20202020 
 2050      20202020 
 2050      20202020 
 2050      20202020 
 2051              	.LC74:
 2052 04bd 7368656C 		.string	"shell"
 2052      6C00
 2053              	.LC75:
 2054 04c3 7300     		.string	"s"
 2055 04c5 000000   		.align 8
 2056              	.LC76:
 2057 04c8 20202020 		.string	"                enable benchmarking & checksumming"
 2057      20202020 
 2057      20202020 
 2057      20202020 
 2057      656E6162 
 2058              	.LC77:
 2059 04fb 62656E63 		.string	"benchmark"
 2059      686D6172 
 2059      6B00
 2060              	.LC78:
 2061 0505 6200     		.string	"b"
 2062 0507 00       		.align 8
 2063              	.LC79:
 2064 0508 20202020 		.string	"                    reset the bulk endpoints"
 2064      20202020 
 2064      20202020 
 2064      20202020 
 2064      20202020 
 2065              	.LC80:
 2066 0535 72657365 		.string	"reset"
 2066      7400
 2067              	.LC81:
 2068 053b 7200     		.string	"r"
 2069 053d 000000   		.align 8
 2070              	.LC82:
 2071 0540 20202077 		.string	"   write data from channel ch to file"
 2071      72697465 
 2071      20646174 
 2071      61206672 
 2071      6F6D2063 
 2072              	.LC83:
 2073 0566 3C63683A 		.string	"<ch:file.bin>"
 2073      66696C65 
 2073      2E62696E 
 2073      3E00
 2074              	.LC84:
 2075 0574 64756D70 		.string	"dumploop"
 2075      6C6F6F70 
 2075      00
 2076              	.LC85:
 2077 057d 6C00     		.string	"l"
 2078 057f 00       		.align 8
 2079              	.LC86:
 2080 0580 20202020 		.string	"                     print this help and exit"
 2080      20202020 
 2080      20202020 
 2080      20202020 
 2080      20202020 
 2081              	.LC87:
 2082 05ae 68656C70 		.string	"help"
 2082      00
 2083              	.LC88:
 2084 05b3 6800     		.string	"h"
 2085 05b5 000000   		.align 8
 2086              	.LC89:
 2087 05b8 20202077 		.string	"   write firmware to FX2's EEPROM (!!)"
 2087      72697465 
 2087      20666972 
 2087      6D776172 
 2087      6520746F 
 2088              	.LC90:
 2089 05df 3C737464 		.string	"<std|fw.hex|fw.iic>"
 2089      7C66772E 
 2089      6865787C 
 2089      66772E69 
 2089      69633E00 
 2090              	.LC91:
 2091 05f3 65657072 		.string	"eeprom"
 2091      6F6D00
 2092 05fa 00000000 		.align 8
 2092      0000
 2093              	.LC92:
 2094 0600 20202020 		.string	"     backup FX2's EEPROM (e.g 128:fw.iic)\n"
 2094      20626163 
 2094      6B757020 
 2094      46583227 
 2094      73204545 
 2095              	.LC93:
 2096 062b 3C6B6269 		.string	"<kbitSize:fw.iic>"
 2096      7453697A 
 2096      653A6677 
 2096      2E696963 
 2096      3E00
 2097              	.LC94:
 2098 063d 6261636B 		.string	"backup"
 2098      757000
 2099              	.LC95:
 2100 0644 666C636C 		.string	"flcli"
 2100      6900
 2101              	.LC96:
 2102 064a 25733A20 		.string	"%s: insufficient memory\n"
 2102      696E7375 
 2102      66666963 
 2102      69656E74 
 2102      206D656D 
 2103 0663 00000000 		.align 8
 2103      00
 2104              	.LC97:
 2105 0668 46504741 		.string	"FPGALink Command-Line Interface Copyright (C) 2012-2014 Chris McClelland\n\nUsage: %s"
 2105      4C696E6B 
 2105      20436F6D 
 2105      6D616E64 
 2105      2D4C696E 
 2106              	.LC98:
 2107 06bc 0A00     		.string	"\n"
 2108 06be 0000     		.align 8
 2109              	.LC99:
 2110 06c0 0A496E74 		.string	"\nInteract with an FPGALink device.\n"
 2110      65726163 
 2110      74207769 
 2110      74682061 
 2110      6E204650 
 2111              	.LC100:
 2112 06e4 2020252D 		.string	"  %-10s %s\n"
 2112      31307320 
 2112      25730A00 
 2113              		.align 8
 2114              	.LC101:
 2115 06f0 54727920 		.string	"Try '%s --help' for more information.\n"
 2115      27257320 
 2115      2D2D6865 
 2115      6C702720 
 2115      666F7220 
 2116 0717 00       		.align 8
 2117              	.LC102:
 2118 0718 41747465 		.string	"Attempting to open connection to FPGALink device %s...\n"
 2118      6D707469 
 2118      6E672074 
 2118      6F206F70 
 2118      656E2063 
 2119              	.LC103:
 2120 0750 4C6F6164 		.string	"Loading firmware into %s...\n"
 2120      696E6720 
 2120      6669726D 
 2120      77617265 
 2120      20696E74 
 2121              	.LC104:
 2122 076d 41776169 		.string	"Awaiting renumeration"
 2122      74696E67 
 2122      2072656E 
 2122      756D6572 
 2122      6174696F 
 2123 0783 00000000 		.align 8
 2123      00
 2124              	.LC105:
 2125 0788 46504741 		.string	"FPGALink device did not renumerate properly as %s\n"
 2125      4C696E6B 
 2125      20646576 
 2125      69636520 
 2125      64696420 
 2126 07bb 00000000 		.align 8
 2126      00
 2127              	.LC106:
 2128 07c0 41747465 		.string	"Attempting to open connection to FPGLink device %s again...\n"
 2128      6D707469 
 2128      6E672074 
 2128      6F206F70 
 2128      656E2063 
 2129 07fd 000000   		.align 8
 2130              	.LC107:
 2131 0800 436F756C 		.string	"Could not open FPGALink device at %s and no initial VID:PID was supplied\n"
 2131      64206E6F 
 2131      74206F70 
 2131      656E2046 
 2131      5047414C 
 2132 084a 00000000 		.align 8
 2132      0000
 2133              	.LC108:
 2134 0850 436F6E6E 		.string	"Connected to FPGALink device %s (firmwareID: 0x%04X, firmwareVersion: 0x%08X)\n"
 2134      65637465 
 2134      6420746F 
 2134      20465047 
 2134      414C696E 
 2135              	.LC109:
 2136 089f 73746400 		.string	"std"
 2137 08a3 00000000 		.align 8
 2137      00
 2138              	.LC110:
 2139 08a8 57726974 		.string	"Writing the standard FPGALink firmware to the FX2's EEPROM..."
 2139      696E6720 
 2139      74686520 
 2139      7374616E 
 2139      64617264 
 2140 08e6 0000     		.align 8
 2141              	.LC111:
 2142 08e8 57726974 		.string	"Writing custom FPGALink firmware from %s to the FX2's EEPROM...\n"
 2142      696E6720 
 2142      63757374 
 2142      6F6D2046 
 2142      5047414C 
 2143 0929 00000000 		.align 8
 2143      000000
 2144              	.LC112:
 2145 0930 25733A20 		.string	"%s: invalid argument to option --backup=<kbitSize:fw.iic>\n"
 2145      696E7661 
 2145      6C696420 
 2145      61726775 
 2145      6D656E74 
 2146 096b 00000000 		.align 8
 2146      00
 2147              	.LC113:
 2148 0970 53617669 		.string	"Saving a backup of %d kbit from the FX2's EEPROM to %s...\n"
 2148      6E672061 
 2148      20626163 
 2148      6B757020 
 2148      6F662025 
 2149              	.LC114:
 2150 09ab 436F6E66 		.string	"Configuring ports..."
 2150      69677572 
 2150      696E6720 
 2150      706F7274 
 2150      732E2E2E 
 2151              	.LC115:
 2152 09c0 25303858 		.string	"%08X"
 2152      00
 2153 09c5 000000   		.align 8
 2154              	.LC116:
 2155 09c8 52656164 		.string	"Readback:   28   24   20   16    12    8    4    0\n          %s"
 2155      6261636B 
 2155      3A202020 
 2155      32382020 
 2155      20323420 
 2156              	.LC117:
 2157 0a08 20257300 		.string	" %s"
 2158              	.LC118:
 2159 0a0c 20202573 		.string	"  %s"
 2159      00
 2160              	.LC119:
 2161 0a11 2025730A 		.string	" %s\n"
 2161      00
 2162 0a16 0000     		.align 8
 2163              	.LC120:
 2164 0a18 54686520 		.string	"The FPGALink device at %s scanned its JTAG chain, yielding:\n"
 2164      46504741 
 2164      4C696E6B 
 2164      20646576 
 2164      69636520 
 2165              	.LC121:
 2166 0a55 20203078 		.string	"  0x%08X\n"
 2166      25303858 
 2166      0A00
 2167 0a5f 00       		.align 8
 2168              	.LC122:
 2169 0a60 54686520 		.string	"The FPGALink device at %s scanned its JTAG chain but did not find any attached devices\n"
 2169      46504741 
 2169      4C696E6B 
 2169      20646576 
 2169      69636520 
 2170              		.align 8
 2171              	.LC123:
 2172 0ab8 4A544147 		.string	"JTAG chain scan requested but FPGALink device at %s does not support NeroProg\n"
 2172      20636861 
 2172      696E2073 
 2172      63616E20 
 2172      72657175 
 2173              	.LC124:
 2174 0b07 50726F67 		.string	"Programming device..."
 2174      72616D6D 
 2174      696E6720 
 2174      64657669 
 2174      63652E2E 
 2175 0b1d 000000   		.align 8
 2176              	.LC125:
 2177 0b20 50726F67 		.string	"Program operation requested but device at %s does not support NeroProg\n"
 2177      72616D20 
 2177      6F706572 
 2177      6174696F 
 2177      6E207265 
 2178              		.align 8
 2179              	.LC126:
 2180 0b68 52656365 		.string	"Receiving coordinates from fpga %s...\n"
 2180      6976696E 
 2180      6720636F 
 2180      6F726469 
 2180      6E617465 
 2181              	.LC127:
 2182 0b8f 636F6F72 		.string	"coordinate_enc.dat"
 2182      64696E61 
 2182      74655F65 
 2182      6E632E64 
 2182      617400
 2183 0ba2 00000000 		.align 8
 2183      0000
 2184              	.LC128:
 2185 0ba8 54686520 		.string	"The FPGALink device at %s is not ready to talk - did you forget --program?\n"
 2185      46504741 
 2185      4C696E6B 
 2185      20646576 
 2185      69636520 
 2186 0bf4 00000000 		.align 8
 2187              	.LC129:
 2188 0bf8 41637469 		.string	"Action requested but device at %s does not support CommFPGA\n"
 2188      6F6E2072 
 2188      65717565 
 2188      73746564 
 2188      20627574 
 2189              	.LC130:
 2190 0c35 456E6372 		.string	"Encrypted input: "
 2190      79707465 
 2190      6420696E 
 2190      7075743A 
 2190      2000
 2191              	.LC131:
 2192 0c47 255800   		.string	"%X"
 2193              	.LC132:
 2194 0c4a 436F6F72 		.string	"Coordinates Received: %X,%X\n"
 2194      64696E61 
 2194      74657320 
 2194      52656365 
 2194      69766564 
 2195 0c67 00       		.align 8
 2196              	.LC133:
 2197 0c68 53656E64 		.string	"Sending coordinates to fpga %s...\n"
 2197      696E6720 
 2197      636F6F72 
 2197      64696E61 
 2197      74657320 
 2198              	.LC134:
 2199 0c8b 52656365 		.string	"Receiving ACK1 %s...\n"
 2199      6976696E 
 2199      67204143 
 2199      4B312025 
 2199      732E2E2E 
 2200              	.LC135:
 2201 0ca1 41434B2E 		.string	"ACK.dat"
 2201      64617400 
 2202              	.LC136:
 2203 0ca9 456E6372 		.string	"Encrypted Ack: "
 2203      79707465 
 2203      64204163 
 2203      6B3A2000 
 2204              	.LC137:
 2205 0cb9 53656E64 		.string	"Sending ACK2 %s...\n"
 2205      696E6720 
 2205      41434B32 
 2205      2025732E 
 2205      2E2E0A00 
 2206              	.LC138:
 2207 0ccd 74726163 		.string	"track_data.csv"
 2207      6B5F6461 
 2207      74612E63 
 2207      737600
 2208              	.LC139:
 2209 0cdc 4572726F 		.string	"Error! opening file"
 2209      7221206F 
 2209      70656E69 
 2209      6E672066 
 2209      696C6500 
 2210              	.LC140:
 2211 0cf0 25642C25 		.string	"%d,%d,%d,%d,%d"
 2211      642C2564 
 2211      2C25642C 
 2211      256400
 2212              	.LC141:
 2213 0cff 53656E64 		.string	"Sending first 4 bytes %s...\n"
 2213      696E6720 
 2213      66697273 
 2213      74203420 
 2213      62797465 
 2214              	.LC142:
 2215 0d1c 52656164 		.string	"Reading ACK %s...\n"
 2215      696E6720 
 2215      41434B20 
 2215      25732E2E 
 2215      2E0A00
 2216              	.LC143:
 2217 0d2f 53656E64 		.string	"Sending next 4 bytes %s...\n"
 2217      696E6720 
 2217      6E657874 
 2217      20342062 
 2217      79746573 
 2218              	.LC144:
 2219 0d4b 53656E64 		.string	"Sending ACK %s...\n"
 2219      696E6720 
 2219      41434B20 
 2219      25732E2E 
 2219      2E0A00
 2220              	.LC145:
 2221 0d5e 54727969 		.string	"Trying to get data %s...\n"
 2221      6E672074 
 2221      6F206765 
 2221      74206461 
 2221      74612025 
 2222              	.LC146:
 2223 0d78 55706461 		.string	"Update.dat"
 2223      74652E64 
 2223      617400
 2224              	.LC147:
 2225 0d83 44617461 		.string	"Data received : %X\n"
 2225      20726563 
 2225      65697665 
 2225      64203A20 
 2225      25580A00 
 2226              	.LC148:
 2227 0d97 7700     		.string	"w"
 2228 0d99 00000000 		.align 8
 2228      000000
 2229              	.LC149:
 2230 0da0 45786563 		.string	"Executing CommFPGA actions on FPGALink device %s...\n"
 2230      7574696E 
 2230      6720436F 
 2230      6D6D4650 
 2230      47412061 
 2231 0dd5 000000   		.align 8
 2232              	.LC150:
 2233 0dd8 25733A20 		.string	"%s: invalid argument to option -l|--dumploop=<ch:file.bin>\n"
 2233      696E7661 
 2233      6C696420 
 2233      61726775 
 2233      6D656E74 
 2234 0e14 00000000 		.align 8
 2235              	.LC151:
 2236 0e18 436F7079 		.string	"Copying from channel %lu to %s"
 2236      696E6720 
 2236      66726F6D 
 2236      20636861 
 2236      6E6E656C 
 2237              	.LC152:
 2238 0e37 0A436175 		.string	"\nCaught SIGINT, quitting..."
 2238      67687420 
 2238      53494749 
 2238      4E542C20 
 2238      71756974 
 2239 0e53 00000000 		.align 8
 2239      00
 2240              	.LC153:
 2241 0e58 0A456E74 		.string	"\nEntering CommFPGA command-line mode:"
 2241      6572696E 
 2241      6720436F 
 2241      6D6D4650 
 2241      47412063 
 2242              	.LC154:
 2243 0e7e 3E2000   		.string	"> "
 2244 0e81 00000000 		.align 8
 2244      000000
 2245              	.LC155:
 2246 0e88 54686520 		.string	"The FPGALink device at %s is not ready to talk - did you forget --xsvf?\n"
 2246      46504741 
 2246      4C696E6B 
 2246      20646576 
 2246      69636520 
 2247 0ed1 00000000 		.align 8
 2247      000000
 2248              	.LC156:
 2249 0ed8 5368656C 		.string	"Shell requested but device at %s does not support CommFPGA\n"
 2249      6C207265 
 2249      71756573 
 2249      74656420 
 2249      62757420 
 2250              	.LC157:
 2251 0f14 25730A00 		.string	"%s\n"
 2252              		.text
 2253              		.globl	main
 2255              	main:
 2256              	.LFB11:
 560:main.c        **** 
 561:main.c        **** static const char *nibbles[] = {
 562:main.c        **** 	"0000",  // '0'
 563:main.c        **** 	"0001",  // '1'
 564:main.c        **** 	"0010",  // '2'
 565:main.c        **** 	"0011",  // '3'
 566:main.c        **** 	"0100",  // '4'
 567:main.c        **** 	"0101",  // '5'
 568:main.c        **** 	"0110",  // '6'
 569:main.c        **** 	"0111",  // '7'
 570:main.c        **** 	"1000",  // '8'
 571:main.c        **** 	"1001",  // '9'
 572:main.c        **** 
 573:main.c        **** 	"XXXX",  // ':'
 574:main.c        **** 	"XXXX",  // ';'
 575:main.c        **** 	"XXXX",  // '<'
 576:main.c        **** 	"XXXX",  // '='
 577:main.c        **** 	"XXXX",  // '>'
 578:main.c        **** 	"XXXX",  // '?'
 579:main.c        **** 	"XXXX",  // '@'
 580:main.c        **** 
 581:main.c        **** 	"1010",  // 'A'
 582:main.c        **** 	"1011",  // 'B'
 583:main.c        **** 	"1100",  // 'C'
 584:main.c        **** 	"1101",  // 'D'
 585:main.c        **** 	"1110",  // 'E'
 586:main.c        **** 	"1111"   // 'F'
 587:main.c        **** };
 588:main.c        **** 
 589:main.c        **** int main(int argc, char *argv[]) {
 2257              		.loc 1 589 0
 2258              		.cfi_startproc
 2259 1711 55       		pushq	%rbp
 2260              		.cfi_def_cfa_offset 16
 2261              		.cfi_offset 6, -16
 2262 1712 4889E5   		movq	%rsp, %rbp
 2263              		.cfi_def_cfa_register 6
 2264 1715 53       		pushq	%rbx
 2265 1716 4881ECA8 		subq	$936, %rsp
 2265      030000
 2266              		.cfi_offset 3, -24
 2267 171d 89BD5CFC 		movl	%edi, -932(%rbp)
 2267      FFFF
 2268 1723 4889B550 		movq	%rsi, -944(%rbp)
 2268      FCFFFF
 2269              		.loc 1 589 0
 2270 172a 64488B04 		movq	%fs:40, %rax
 2270      25280000 
 2270      00
 2271 1733 488945E8 		movq	%rax, -24(%rbp)
 2272 1737 31C0     		xorl	%eax, %eax
 590:main.c        **** 	ReturnCode retVal = FLP_SUCCESS, pStatus;
 2273              		.loc 1 590 0
 2274 1739 C78578FC 		movl	$0, -904(%rbp)
 2274      FFFF0000 
 2274      0000
 591:main.c        **** 	struct arg_str *ivpOpt = arg_str0("i", "ivp", "<VID:PID>", "            vendor ID and product ID (
 2275              		.loc 1 591 0
 2276 1743 B9000000 		movl	$.LC38, %ecx
 2276      00
 2277 1748 BA000000 		movl	$.LC39, %edx
 2277      00
 2278 174d BE000000 		movl	$.LC40, %esi
 2278      00
 2279 1752 BF000000 		movl	$.LC41, %edi
 2279      00
 2280 1757 E8000000 		call	arg_str0
 2280      00
 2281 175c 48898538 		movq	%rax, -712(%rbp)
 2281      FDFFFF
 592:main.c        **** 	struct arg_str *vpOpt = arg_str1("v", "vp", "<VID:PID[:DID]>", "       VID, PID and opt. dev ID (e
 2282              		.loc 1 592 0
 2283 1763 B9000000 		movl	$.LC42, %ecx
 2283      00
 2284 1768 BA000000 		movl	$.LC43, %edx
 2284      00
 2285 176d BE000000 		movl	$.LC44, %esi
 2285      00
 2286 1772 BF000000 		movl	$.LC45, %edi
 2286      00
 2287 1777 E8000000 		call	arg_str1
 2287      00
 2288 177c 48898540 		movq	%rax, -704(%rbp)
 2288      FDFFFF
 593:main.c        **** 	struct arg_str *fwOpt = arg_str0("f", "fw", "<firmware.hex>", "        firmware to RAM-load (or us
 2289              		.loc 1 593 0
 2290 1783 B9000000 		movl	$.LC46, %ecx
 2290      00
 2291 1788 BA000000 		movl	$.LC47, %edx
 2291      00
 2292 178d BE000000 		movl	$.LC48, %esi
 2292      00
 2293 1792 BF000000 		movl	$.LC49, %edi
 2293      00
 2294 1797 E8000000 		call	arg_str0
 2294      00
 2295 179c 48898548 		movq	%rax, -696(%rbp)
 2295      FDFFFF
 594:main.c        **** 	struct arg_str *portOpt = arg_str0("d", "ports", "<bitCfg[,bitCfg]*>", " read/write digital ports 
 2296              		.loc 1 594 0
 2297 17a3 B9000000 		movl	$.LC50, %ecx
 2297      00
 2298 17a8 BA000000 		movl	$.LC51, %edx
 2298      00
 2299 17ad BE000000 		movl	$.LC52, %esi
 2299      00
 2300 17b2 BF000000 		movl	$.LC53, %edi
 2300      00
 2301 17b7 E8000000 		call	arg_str0
 2301      00
 2302 17bc 48898550 		movq	%rax, -688(%rbp)
 2302      FDFFFF
 595:main.c        **** 	struct arg_str *queryOpt = arg_str0("q", "query", "<jtagBits>", "         query the JTAG chain");
 2303              		.loc 1 595 0
 2304 17c3 B9000000 		movl	$.LC54, %ecx
 2304      00
 2305 17c8 BA000000 		movl	$.LC55, %edx
 2305      00
 2306 17cd BE000000 		movl	$.LC56, %esi
 2306      00
 2307 17d2 BF000000 		movl	$.LC57, %edi
 2307      00
 2308 17d7 E8000000 		call	arg_str0
 2308      00
 2309 17dc 48898558 		movq	%rax, -680(%rbp)
 2309      FDFFFF
 596:main.c        **** 	struct arg_str *progOpt = arg_str0("p", "program", "<config>", "         program a device");
 2310              		.loc 1 596 0
 2311 17e3 B9000000 		movl	$.LC58, %ecx
 2311      00
 2312 17e8 BA000000 		movl	$.LC59, %edx
 2312      00
 2313 17ed BE000000 		movl	$.LC60, %esi
 2313      00
 2314 17f2 BF000000 		movl	$.LC61, %edi
 2314      00
 2315 17f7 E8000000 		call	arg_str0
 2315      00
 2316 17fc 48898560 		movq	%rax, -672(%rbp)
 2316      FDFFFF
 597:main.c        **** 	struct arg_uint *conOpt = arg_uint0("c", "conduit", "<conduit>", "        which comm conduit to ch
 2317              		.loc 1 597 0
 2318 1803 B9000000 		movl	$.LC62, %ecx
 2318      00
 2319 1808 BA000000 		movl	$.LC63, %edx
 2319      00
 2320 180d BE000000 		movl	$.LC64, %esi
 2320      00
 2321 1812 BF000000 		movl	$.LC65, %edi
 2321      00
 2322 1817 E8000000 		call	arg_uint0
 2322      00
 2323 181c 48898568 		movq	%rax, -664(%rbp)
 2323      FDFFFF
 598:main.c        **** 	struct arg_str *railOpt = arg_str0("e", "multiplesteps", "<actionString>", "    ##########");
 2324              		.loc 1 598 0
 2325 1823 B9000000 		movl	$.LC66, %ecx
 2325      00
 2326 1828 BA000000 		movl	$.LC67, %edx
 2326      00
 2327 182d BE000000 		movl	$.LC68, %esi
 2327      00
 2328 1832 BF000000 		movl	$.LC69, %edi
 2328      00
 2329 1837 E8000000 		call	arg_str0
 2329      00
 2330 183c 48898570 		movq	%rax, -656(%rbp)
 2330      FDFFFF
 599:main.c        **** 	struct arg_str *actOpt = arg_str0("a", "action", "<actionString>", "    a series of CommFPGA actio
 2331              		.loc 1 599 0
 2332 1843 B9000000 		movl	$.LC70, %ecx
 2332      00
 2333 1848 BA000000 		movl	$.LC67, %edx
 2333      00
 2334 184d BE000000 		movl	$.LC71, %esi
 2334      00
 2335 1852 BF000000 		movl	$.LC72, %edi
 2335      00
 2336 1857 E8000000 		call	arg_str0
 2336      00
 2337 185c 48898578 		movq	%rax, -648(%rbp)
 2337      FDFFFF
 600:main.c        **** 	struct arg_lit *shellOpt  = arg_lit0("s", "shell", "                    start up an interactive Co
 2338              		.loc 1 600 0
 2339 1863 BA000000 		movl	$.LC73, %edx
 2339      00
 2340 1868 BE000000 		movl	$.LC74, %esi
 2340      00
 2341 186d BF000000 		movl	$.LC75, %edi
 2341      00
 2342 1872 E8000000 		call	arg_lit0
 2342      00
 2343 1877 48898580 		movq	%rax, -640(%rbp)
 2343      FDFFFF
 601:main.c        **** 	struct arg_lit *benOpt  = arg_lit0("b", "benchmark", "                enable benchmarking & checks
 2344              		.loc 1 601 0
 2345 187e BA000000 		movl	$.LC76, %edx
 2345      00
 2346 1883 BE000000 		movl	$.LC77, %esi
 2346      00
 2347 1888 BF000000 		movl	$.LC78, %edi
 2347      00
 2348 188d E8000000 		call	arg_lit0
 2348      00
 2349 1892 48898588 		movq	%rax, -632(%rbp)
 2349      FDFFFF
 602:main.c        **** 	struct arg_lit *rstOpt  = arg_lit0("r", "reset", "                    reset the bulk endpoints");
 2350              		.loc 1 602 0
 2351 1899 BA000000 		movl	$.LC79, %edx
 2351      00
 2352 189e BE000000 		movl	$.LC80, %esi
 2352      00
 2353 18a3 BF000000 		movl	$.LC81, %edi
 2353      00
 2354 18a8 E8000000 		call	arg_lit0
 2354      00
 2355 18ad 48898590 		movq	%rax, -624(%rbp)
 2355      FDFFFF
 603:main.c        **** 	struct arg_str *dumpOpt = arg_str0("l", "dumploop", "<ch:file.bin>", "   write data from channel c
 2356              		.loc 1 603 0
 2357 18b4 B9000000 		movl	$.LC82, %ecx
 2357      00
 2358 18b9 BA000000 		movl	$.LC83, %edx
 2358      00
 2359 18be BE000000 		movl	$.LC84, %esi
 2359      00
 2360 18c3 BF000000 		movl	$.LC85, %edi
 2360      00
 2361 18c8 E8000000 		call	arg_str0
 2361      00
 2362 18cd 48898598 		movq	%rax, -616(%rbp)
 2362      FDFFFF
 604:main.c        **** 	struct arg_lit *helpOpt  = arg_lit0("h", "help", "                     print this help and exit");
 2363              		.loc 1 604 0
 2364 18d4 BA000000 		movl	$.LC86, %edx
 2364      00
 2365 18d9 BE000000 		movl	$.LC87, %esi
 2365      00
 2366 18de BF000000 		movl	$.LC88, %edi
 2366      00
 2367 18e3 E8000000 		call	arg_lit0
 2367      00
 2368 18e8 488985A0 		movq	%rax, -608(%rbp)
 2368      FDFFFF
 605:main.c        **** 	struct arg_str *eepromOpt  = arg_str0(NULL, "eeprom", "<std|fw.hex|fw.iic>", "   write firmware to
 2369              		.loc 1 605 0
 2370 18ef B9000000 		movl	$.LC89, %ecx
 2370      00
 2371 18f4 BA000000 		movl	$.LC90, %edx
 2371      00
 2372 18f9 BE000000 		movl	$.LC91, %esi
 2372      00
 2373 18fe BF000000 		movl	$0, %edi
 2373      00
 2374 1903 E8000000 		call	arg_str0
 2374      00
 2375 1908 488985A8 		movq	%rax, -600(%rbp)
 2375      FDFFFF
 606:main.c        **** 	struct arg_str *backupOpt  = arg_str0(NULL, "backup", "<kbitSize:fw.iic>", "     backup FX2's EEPR
 2376              		.loc 1 606 0
 2377 190f B9000000 		movl	$.LC92, %ecx
 2377      00
 2378 1914 BA000000 		movl	$.LC93, %edx
 2378      00
 2379 1919 BE000000 		movl	$.LC94, %esi
 2379      00
 2380 191e BF000000 		movl	$0, %edi
 2380      00
 2381 1923 E8000000 		call	arg_str0
 2381      00
 2382 1928 488985B0 		movq	%rax, -592(%rbp)
 2382      FDFFFF
 607:main.c        **** 	struct arg_end *endOpt   = arg_end(20);
 2383              		.loc 1 607 0
 2384 192f BF140000 		movl	$20, %edi
 2384      00
 2385 1934 E8000000 		call	arg_end
 2385      00
 2386 1939 488985B8 		movq	%rax, -584(%rbp)
 2386      FDFFFF
 608:main.c        **** 	void *argTable[] = {
 2387              		.loc 1 608 0
 2388 1940 488B8538 		movq	-712(%rbp), %rax
 2388      FDFFFF
 2389 1947 48898530 		movq	%rax, -208(%rbp)
 2389      FFFFFF
 2390 194e 488B8540 		movq	-704(%rbp), %rax
 2390      FDFFFF
 2391 1955 48898538 		movq	%rax, -200(%rbp)
 2391      FFFFFF
 2392 195c 488B8548 		movq	-696(%rbp), %rax
 2392      FDFFFF
 2393 1963 48898540 		movq	%rax, -192(%rbp)
 2393      FFFFFF
 2394 196a 488B8550 		movq	-688(%rbp), %rax
 2394      FDFFFF
 2395 1971 48898548 		movq	%rax, -184(%rbp)
 2395      FFFFFF
 2396 1978 488B8558 		movq	-680(%rbp), %rax
 2396      FDFFFF
 2397 197f 48898550 		movq	%rax, -176(%rbp)
 2397      FFFFFF
 2398 1986 488B8560 		movq	-672(%rbp), %rax
 2398      FDFFFF
 2399 198d 48898558 		movq	%rax, -168(%rbp)
 2399      FFFFFF
 2400 1994 488B8568 		movq	-664(%rbp), %rax
 2400      FDFFFF
 2401 199b 48898560 		movq	%rax, -160(%rbp)
 2401      FFFFFF
 2402 19a2 488B8570 		movq	-656(%rbp), %rax
 2402      FDFFFF
 2403 19a9 48898568 		movq	%rax, -152(%rbp)
 2403      FFFFFF
 2404 19b0 488B8578 		movq	-648(%rbp), %rax
 2404      FDFFFF
 2405 19b7 48898570 		movq	%rax, -144(%rbp)
 2405      FFFFFF
 2406 19be 488B8580 		movq	-640(%rbp), %rax
 2406      FDFFFF
 2407 19c5 48898578 		movq	%rax, -136(%rbp)
 2407      FFFFFF
 2408 19cc 488B8588 		movq	-632(%rbp), %rax
 2408      FDFFFF
 2409 19d3 48894580 		movq	%rax, -128(%rbp)
 2410 19d7 488B8590 		movq	-624(%rbp), %rax
 2410      FDFFFF
 2411 19de 48894588 		movq	%rax, -120(%rbp)
 2412 19e2 488B8598 		movq	-616(%rbp), %rax
 2412      FDFFFF
 2413 19e9 48894590 		movq	%rax, -112(%rbp)
 2414 19ed 488B85A0 		movq	-608(%rbp), %rax
 2414      FDFFFF
 2415 19f4 48894598 		movq	%rax, -104(%rbp)
 2416 19f8 488B85A8 		movq	-600(%rbp), %rax
 2416      FDFFFF
 2417 19ff 488945A0 		movq	%rax, -96(%rbp)
 2418 1a03 488B85B0 		movq	-592(%rbp), %rax
 2418      FDFFFF
 2419 1a0a 488945A8 		movq	%rax, -88(%rbp)
 2420 1a0e 488B85B8 		movq	-584(%rbp), %rax
 2420      FDFFFF
 2421 1a15 488945B0 		movq	%rax, -80(%rbp)
 609:main.c        **** 		ivpOpt, vpOpt, fwOpt, portOpt, queryOpt, progOpt, conOpt, railOpt, actOpt,
 610:main.c        **** 		shellOpt, benOpt, rstOpt, dumpOpt, helpOpt, eepromOpt, backupOpt, endOpt
 611:main.c        **** 	};
 612:main.c        **** 	const char *progName = "flcli";
 2422              		.loc 1 612 0
 2423 1a19 48C785C0 		movq	$.LC95, -576(%rbp)
 2423      FDFFFF00 
 2423      000000
 613:main.c        **** 	int numErrors;
 614:main.c        **** 	struct FLContext *handle = NULL;
 2424              		.loc 1 614 0
 2425 1a24 48C785E0 		movq	$0, -800(%rbp)
 2425      FCFFFF00 
 2425      000000
 615:main.c        **** 	FLStatus fStatus;
 616:main.c        **** 	const char *error = NULL;
 2426              		.loc 1 616 0
 2427 1a2f 48C785E8 		movq	$0, -792(%rbp)
 2427      FCFFFF00 
 2427      000000
 617:main.c        **** 	const char *ivp = NULL;
 2428              		.loc 1 617 0
 2429 1a3a 48C785C8 		movq	$0, -568(%rbp)
 2429      FDFFFF00 
 2429      000000
 618:main.c        **** 	const char *vp = NULL;
 2430              		.loc 1 618 0
 2431 1a45 48C785D0 		movq	$0, -560(%rbp)
 2431      FDFFFF00 
 2431      000000
 619:main.c        **** 	bool isNeroCapable, isCommCapable;
 620:main.c        **** 	uint32 numDevices, scanChain[16], i;
 621:main.c        **** 	const char *line = NULL;
 2432              		.loc 1 621 0
 2433 1a50 48C78500 		movq	$0, -768(%rbp)
 2433      FDFFFF00 
 2433      000000
 622:main.c        **** 	uint8 conduit = 0x01;
 2434              		.loc 1 622 0
 2435 1a5b C68561FC 		movb	$1, -927(%rbp)
 2435      FFFF01
 623:main.c        **** 
 624:main.c        **** 	if ( arg_nullcheck(argTable) != 0 ) {
 2436              		.loc 1 624 0
 2437 1a62 488D8530 		leaq	-208(%rbp), %rax
 2437      FFFFFF
 2438 1a69 4889C7   		movq	%rax, %rdi
 2439 1a6c E8000000 		call	arg_nullcheck
 2439      00
 2440 1a71 85C0     		testl	%eax, %eax
 2441 1a73 742F     		je	.L130
 625:main.c        **** 		fprintf(stderr, "%s: insufficient memory\n", progName);
 2442              		.loc 1 625 0
 2443 1a75 488B0500 		movq	stderr(%rip), %rax
 2443      000000
 2444 1a7c 488B95C0 		movq	-576(%rbp), %rdx
 2444      FDFFFF
 2445 1a83 BE000000 		movl	$.LC96, %esi
 2445      00
 2446 1a88 4889C7   		movq	%rax, %rdi
 2447 1a8b B8000000 		movl	$0, %eax
 2447      00
 2448 1a90 E8000000 		call	fprintf
 2448      00
 626:main.c        **** 		FAIL(1, cleanup);
 2449              		.loc 1 626 0
 2450 1a95 C78578FC 		movl	$1, -904(%rbp)
 2450      FFFF0100 
 2450      0000
 2451 1a9f E9442B00 		jmp	.L131
 2451      00
 2452              	.L130:
 627:main.c        **** 	}
 628:main.c        **** 
 629:main.c        **** 	numErrors = arg_parse(argc, argv, argTable);
 2453              		.loc 1 629 0
 2454 1aa4 488D9530 		leaq	-208(%rbp), %rdx
 2454      FFFFFF
 2455 1aab 488B8D50 		movq	-944(%rbp), %rcx
 2455      FCFFFF
 2456 1ab2 8B855CFC 		movl	-932(%rbp), %eax
 2456      FFFF
 2457 1ab8 4889CE   		movq	%rcx, %rsi
 2458 1abb 89C7     		movl	%eax, %edi
 2459 1abd E8000000 		call	arg_parse
 2459      00
 2460 1ac2 8985CCFC 		movl	%eax, -820(%rbp)
 2460      FFFF
 630:main.c        **** 
 631:main.c        **** 	if ( helpOpt->count > 0 ) {
 2461              		.loc 1 631 0
 2462 1ac8 488B85A0 		movq	-608(%rbp), %rax
 2462      FDFFFF
 2463 1acf 8B4060   		movl	96(%rax), %eax
 2464 1ad2 85C0     		testl	%eax, %eax
 2465 1ad4 7E6E     		jle	.L132
 632:main.c        **** 		printf("FPGALink Command-Line Interface Copyright (C) 2012-2014 Chris McClelland\n\nUsage: %s", p
 2466              		.loc 1 632 0
 2467 1ad6 488B85C0 		movq	-576(%rbp), %rax
 2467      FDFFFF
 2468 1add 4889C6   		movq	%rax, %rsi
 2469 1ae0 BF000000 		movl	$.LC97, %edi
 2469      00
 2470 1ae5 B8000000 		movl	$0, %eax
 2470      00
 2471 1aea E8000000 		call	printf
 2471      00
 633:main.c        **** 		arg_print_syntax(stdout, argTable, "\n");
 2472              		.loc 1 633 0
 2473 1aef 488B0500 		movq	stdout(%rip), %rax
 2473      000000
 2474 1af6 488D8D30 		leaq	-208(%rbp), %rcx
 2474      FFFFFF
 2475 1afd BA000000 		movl	$.LC98, %edx
 2475      00
 2476 1b02 4889CE   		movq	%rcx, %rsi
 2477 1b05 4889C7   		movq	%rax, %rdi
 2478 1b08 E8000000 		call	arg_print_syntax
 2478      00
 634:main.c        **** 		printf("\nInteract with an FPGALink device.\n\n");
 2479              		.loc 1 634 0
 2480 1b0d BF000000 		movl	$.LC99, %edi
 2480      00
 2481 1b12 E8000000 		call	puts
 2481      00
 635:main.c        **** 		arg_print_glossary(stdout, argTable,"  %-10s %s\n");
 2482              		.loc 1 635 0
 2483 1b17 488B0500 		movq	stdout(%rip), %rax
 2483      000000
 2484 1b1e 488D8D30 		leaq	-208(%rbp), %rcx
 2484      FFFFFF
 2485 1b25 BA000000 		movl	$.LC100, %edx
 2485      00
 2486 1b2a 4889CE   		movq	%rcx, %rsi
 2487 1b2d 4889C7   		movq	%rax, %rdi
 2488 1b30 E8000000 		call	arg_print_glossary
 2488      00
 636:main.c        **** 		FAIL(FLP_SUCCESS, cleanup);
 2489              		.loc 1 636 0
 2490 1b35 C78578FC 		movl	$0, -904(%rbp)
 2490      FFFF0000 
 2490      0000
 2491 1b3f E9A42A00 		jmp	.L131
 2491      00
 2492              	.L132:
 637:main.c        **** 	}
 638:main.c        **** 
 639:main.c        **** 	if ( numErrors > 0 ) {
 2493              		.loc 1 639 0
 2494 1b44 83BDCCFC 		cmpl	$0, -820(%rbp)
 2494      FFFF00
 2495 1b4b 7E4F     		jle	.L133
 640:main.c        **** 		arg_print_errors(stdout, endOpt, progName);
 2496              		.loc 1 640 0
 2497 1b4d 488B0500 		movq	stdout(%rip), %rax
 2497      000000
 2498 1b54 488B95C0 		movq	-576(%rbp), %rdx
 2498      FDFFFF
 2499 1b5b 488B8DB8 		movq	-584(%rbp), %rcx
 2499      FDFFFF
 2500 1b62 4889CE   		movq	%rcx, %rsi
 2501 1b65 4889C7   		movq	%rax, %rdi
 2502 1b68 E8000000 		call	arg_print_errors
 2502      00
 641:main.c        **** 		fprintf(stderr, "Try '%s --help' for more information.\n", progName);
 2503              		.loc 1 641 0
 2504 1b6d 488B0500 		movq	stderr(%rip), %rax
 2504      000000
 2505 1b74 488B95C0 		movq	-576(%rbp), %rdx
 2505      FDFFFF
 2506 1b7b BE000000 		movl	$.LC101, %esi
 2506      00
 2507 1b80 4889C7   		movq	%rax, %rdi
 2508 1b83 B8000000 		movl	$0, %eax
 2508      00
 2509 1b88 E8000000 		call	fprintf
 2509      00
 642:main.c        **** 		FAIL(FLP_ARGS, cleanup);
 2510              		.loc 1 642 0
 2511 1b8d C78578FC 		movl	$12, -904(%rbp)
 2511      FFFF0C00 
 2511      0000
 2512 1b97 E94C2A00 		jmp	.L131
 2512      00
 2513              	.L133:
 643:main.c        **** 	}
 644:main.c        **** 
 645:main.c        **** 	fStatus = flInitialise(0, &error);
 2514              		.loc 1 645 0
 2515 1b9c 488D85E8 		leaq	-792(%rbp), %rax
 2515      FCFFFF
 2516 1ba3 4889C6   		movq	%rax, %rsi
 2517 1ba6 BF000000 		movl	$0, %edi
 2517      00
 2518 1bab E8000000 		call	flInitialise
 2518      00
 2519 1bb0 89857CFC 		movl	%eax, -900(%rbp)
 2519      FFFF
 646:main.c        **** 	CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 2520              		.loc 1 646 0
 2521 1bb6 83BD7CFC 		cmpl	$0, -900(%rbp)
 2521      FFFF00
 2522 1bbd 740F     		je	.L134
 2523              		.loc 1 646 0 is_stmt 0 discriminator 1
 2524 1bbf C78578FC 		movl	$1, -904(%rbp)
 2524      FFFF0100 
 2524      0000
 2525 1bc9 E91A2A00 		jmp	.L131
 2525      00
 2526              	.L134:
 647:main.c        **** 
 648:main.c        **** 	vp = vpOpt->sval[0];
 2527              		.loc 1 648 0 is_stmt 1
 2528 1bce 488B8540 		movq	-704(%rbp), %rax
 2528      FDFFFF
 2529 1bd5 488B4068 		movq	104(%rax), %rax
 2530 1bd9 488B00   		movq	(%rax), %rax
 2531 1bdc 488985D0 		movq	%rax, -560(%rbp)
 2531      FDFFFF
 649:main.c        **** 
 650:main.c        **** 	printf("Attempting to open connection to FPGALink device %s...\n", vp);
 2532              		.loc 1 650 0
 2533 1be3 488B85D0 		movq	-560(%rbp), %rax
 2533      FDFFFF
 2534 1bea 4889C6   		movq	%rax, %rsi
 2535 1bed BF000000 		movl	$.LC102, %edi
 2535      00
 2536 1bf2 B8000000 		movl	$0, %eax
 2536      00
 2537 1bf7 E8000000 		call	printf
 2537      00
 651:main.c        **** 	fStatus = flOpen(vp, &handle, NULL);
 2538              		.loc 1 651 0
 2539 1bfc 488D8DE0 		leaq	-800(%rbp), %rcx
 2539      FCFFFF
 2540 1c03 488B85D0 		movq	-560(%rbp), %rax
 2540      FDFFFF
 2541 1c0a BA000000 		movl	$0, %edx
 2541      00
 2542 1c0f 4889CE   		movq	%rcx, %rsi
 2543 1c12 4889C7   		movq	%rax, %rdi
 2544 1c15 E8000000 		call	flOpen
 2544      00
 2545 1c1a 89857CFC 		movl	%eax, -900(%rbp)
 2545      FFFF
 652:main.c        **** 	if ( fStatus ) {
 2546              		.loc 1 652 0
 2547 1c20 83BD7CFC 		cmpl	$0, -900(%rbp)
 2547      FFFF00
 2548 1c27 0F842502 		je	.L135
 2548      0000
 653:main.c        **** 		if ( ivpOpt->count ) {
 2549              		.loc 1 653 0
 2550 1c2d 488B8538 		movq	-712(%rbp), %rax
 2550      FDFFFF
 2551 1c34 8B4060   		movl	96(%rax), %eax
 2552 1c37 85C0     		testl	%eax, %eax
 2553 1c39 0F84E401 		je	.L136
 2553      0000
 2554              	.LBB14:
 654:main.c        **** 			int count = 60;
 2555              		.loc 1 654 0
 2556 1c3f C78584FC 		movl	$60, -892(%rbp)
 2556      FFFF3C00 
 2556      0000
 655:main.c        **** 			uint8 flag;
 656:main.c        **** 			ivp = ivpOpt->sval[0];
 2557              		.loc 1 656 0
 2558 1c49 488B8538 		movq	-712(%rbp), %rax
 2558      FDFFFF
 2559 1c50 488B4068 		movq	104(%rax), %rax
 2560 1c54 488B00   		movq	(%rax), %rax
 2561 1c57 488985C8 		movq	%rax, -568(%rbp)
 2561      FDFFFF
 657:main.c        **** 			printf("Loading firmware into %s...\n", ivp);
 2562              		.loc 1 657 0
 2563 1c5e 488B85C8 		movq	-568(%rbp), %rax
 2563      FDFFFF
 2564 1c65 4889C6   		movq	%rax, %rsi
 2565 1c68 BF000000 		movl	$.LC103, %edi
 2565      00
 2566 1c6d B8000000 		movl	$0, %eax
 2566      00
 2567 1c72 E8000000 		call	printf
 2567      00
 658:main.c        **** 			if ( fwOpt->count ) {
 2568              		.loc 1 658 0
 2569 1c77 488B8548 		movq	-696(%rbp), %rax
 2569      FDFFFF
 2570 1c7e 8B4060   		movl	96(%rax), %eax
 2571 1c81 85C0     		testl	%eax, %eax
 2572 1c83 742F     		je	.L137
 659:main.c        **** 				fStatus = flLoadCustomFirmware(ivp, fwOpt->sval[0], &error);
 2573              		.loc 1 659 0
 2574 1c85 488B8548 		movq	-696(%rbp), %rax
 2574      FDFFFF
 2575 1c8c 488B4068 		movq	104(%rax), %rax
 2576 1c90 488B08   		movq	(%rax), %rcx
 2577 1c93 488D95E8 		leaq	-792(%rbp), %rdx
 2577      FCFFFF
 2578 1c9a 488B85C8 		movq	-568(%rbp), %rax
 2578      FDFFFF
 2579 1ca1 4889CE   		movq	%rcx, %rsi
 2580 1ca4 4889C7   		movq	%rax, %rdi
 2581 1ca7 E8000000 		call	flLoadCustomFirmware
 2581      00
 2582 1cac 89857CFC 		movl	%eax, -900(%rbp)
 2582      FFFF
 2583 1cb2 EB26     		jmp	.L138
 2584              	.L137:
 660:main.c        **** 			} else {
 661:main.c        **** 				fStatus = flLoadStandardFirmware(ivp, vp, &error);
 2585              		.loc 1 661 0
 2586 1cb4 488D95E8 		leaq	-792(%rbp), %rdx
 2586      FCFFFF
 2587 1cbb 488B8DD0 		movq	-560(%rbp), %rcx
 2587      FDFFFF
 2588 1cc2 488B85C8 		movq	-568(%rbp), %rax
 2588      FDFFFF
 2589 1cc9 4889CE   		movq	%rcx, %rsi
 2590 1ccc 4889C7   		movq	%rax, %rdi
 2591 1ccf E8000000 		call	flLoadStandardFirmware
 2591      00
 2592 1cd4 89857CFC 		movl	%eax, -900(%rbp)
 2592      FFFF
 2593              	.L138:
 662:main.c        **** 			}
 663:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 2594              		.loc 1 663 0
 2595 1cda 83BD7CFC 		cmpl	$0, -900(%rbp)
 2595      FFFF00
 2596 1ce1 740F     		je	.L139
 2597              		.loc 1 663 0 is_stmt 0 discriminator 1
 2598 1ce3 C78578FC 		movl	$1, -904(%rbp)
 2598      FFFF0100 
 2598      0000
 2599 1ced E9F62800 		jmp	.L131
 2599      00
 2600              	.L139:
 664:main.c        **** 			
 665:main.c        **** 			printf("Awaiting renumeration");
 2601              		.loc 1 665 0 is_stmt 1
 2602 1cf2 BF000000 		movl	$.LC104, %edi
 2602      00
 2603 1cf7 B8000000 		movl	$0, %eax
 2603      00
 2604 1cfc E8000000 		call	printf
 2604      00
 666:main.c        **** 			flSleep(1000);
 2605              		.loc 1 666 0
 2606 1d01 BFE80300 		movl	$1000, %edi
 2606      00
 2607 1d06 E8000000 		call	flSleep
 2607      00
 2608              	.L143:
 667:main.c        **** 			do {
 668:main.c        **** 				printf(".");
 2609              		.loc 1 668 0
 2610 1d0b BF2E0000 		movl	$46, %edi
 2610      00
 2611 1d10 E8000000 		call	putchar
 2611      00
 669:main.c        **** 				fflush(stdout);
 2612              		.loc 1 669 0
 2613 1d15 488B0500 		movq	stdout(%rip), %rax
 2613      000000
 2614 1d1c 4889C7   		movq	%rax, %rdi
 2615 1d1f E8000000 		call	fflush
 2615      00
 670:main.c        **** 				fStatus = flIsDeviceAvailable(vp, &flag, &error);
 2616              		.loc 1 670 0
 2617 1d24 488D95E8 		leaq	-792(%rbp), %rdx
 2617      FCFFFF
 2618 1d2b 488D8DF8 		leaq	-776(%rbp), %rcx
 2618      FCFFFF
 2619 1d32 488B85D0 		movq	-560(%rbp), %rax
 2619      FDFFFF
 2620 1d39 4889CE   		movq	%rcx, %rsi
 2621 1d3c 4889C7   		movq	%rax, %rdi
 2622 1d3f E8000000 		call	flIsDeviceAvailable
 2622      00
 2623 1d44 89857CFC 		movl	%eax, -900(%rbp)
 2623      FFFF
 671:main.c        **** 				CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 2624              		.loc 1 671 0
 2625 1d4a 83BD7CFC 		cmpl	$0, -900(%rbp)
 2625      FFFF00
 2626 1d51 740F     		je	.L141
 2627              		.loc 1 671 0 is_stmt 0 discriminator 1
 2628 1d53 C78578FC 		movl	$1, -904(%rbp)
 2628      FFFF0100 
 2628      0000
 2629 1d5d E9862800 		jmp	.L131
 2629      00
 2630              	.L141:
 672:main.c        **** 				flSleep(250);
 2631              		.loc 1 672 0 is_stmt 1
 2632 1d62 BFFA0000 		movl	$250, %edi
 2632      00
 2633 1d67 E8000000 		call	flSleep
 2633      00
 673:main.c        **** 				count--;
 2634              		.loc 1 673 0
 2635 1d6c 83AD84FC 		subl	$1, -892(%rbp)
 2635      FFFF01
 674:main.c        **** 			} while ( !flag && count );
 2636              		.loc 1 674 0
 2637 1d73 0FB685F8 		movzbl	-776(%rbp), %eax
 2637      FCFFFF
 2638 1d7a 84C0     		testb	%al, %al
 2639 1d7c 7509     		jne	.L142
 2640              		.loc 1 674 0 is_stmt 0 discriminator 1
 2641 1d7e 83BD84FC 		cmpl	$0, -892(%rbp)
 2641      FFFF00
 2642 1d85 7584     		jne	.L143
 2643              	.L142:
 675:main.c        **** 			printf("\n");
 2644              		.loc 1 675 0 is_stmt 1
 2645 1d87 BF0A0000 		movl	$10, %edi
 2645      00
 2646 1d8c E8000000 		call	putchar
 2646      00
 676:main.c        **** 			if ( !flag ) {
 2647              		.loc 1 676 0
 2648 1d91 0FB685F8 		movzbl	-776(%rbp), %eax
 2648      FCFFFF
 2649 1d98 84C0     		testb	%al, %al
 2650 1d9a 752F     		jne	.L144
 677:main.c        **** 				fprintf(stderr, "FPGALink device did not renumerate properly as %s\n", vp);
 2651              		.loc 1 677 0
 2652 1d9c 488B0500 		movq	stderr(%rip), %rax
 2652      000000
 2653 1da3 488B95D0 		movq	-560(%rbp), %rdx
 2653      FDFFFF
 2654 1daa BE000000 		movl	$.LC105, %esi
 2654      00
 2655 1daf 4889C7   		movq	%rax, %rdi
 2656 1db2 B8000000 		movl	$0, %eax
 2656      00
 2657 1db7 E8000000 		call	fprintf
 2657      00
 678:main.c        **** 				FAIL(FLP_LIBERR, cleanup);
 2658              		.loc 1 678 0
 2659 1dbc C78578FC 		movl	$1, -904(%rbp)
 2659      FFFF0100 
 2659      0000
 2660 1dc6 E91D2800 		jmp	.L131
 2660      00
 2661              	.L144:
 679:main.c        **** 			}
 680:main.c        **** 
 681:main.c        **** 			printf("Attempting to open connection to FPGLink device %s again...\n", vp);
 2662              		.loc 1 681 0
 2663 1dcb 488B85D0 		movq	-560(%rbp), %rax
 2663      FDFFFF
 2664 1dd2 4889C6   		movq	%rax, %rsi
 2665 1dd5 BF000000 		movl	$.LC106, %edi
 2665      00
 2666 1dda B8000000 		movl	$0, %eax
 2666      00
 2667 1ddf E8000000 		call	printf
 2667      00
 682:main.c        **** 			fStatus = flOpen(vp, &handle, &error);
 2668              		.loc 1 682 0
 2669 1de4 488D95E8 		leaq	-792(%rbp), %rdx
 2669      FCFFFF
 2670 1deb 488D8DE0 		leaq	-800(%rbp), %rcx
 2670      FCFFFF
 2671 1df2 488B85D0 		movq	-560(%rbp), %rax
 2671      FDFFFF
 2672 1df9 4889CE   		movq	%rcx, %rsi
 2673 1dfc 4889C7   		movq	%rax, %rdi
 2674 1dff E8000000 		call	flOpen
 2674      00
 2675 1e04 89857CFC 		movl	%eax, -900(%rbp)
 2675      FFFF
 683:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 2676              		.loc 1 683 0
 2677 1e0a 83BD7CFC 		cmpl	$0, -900(%rbp)
 2677      FFFF00
 2678 1e11 743F     		je	.L135
 2679              		.loc 1 683 0 is_stmt 0 discriminator 1
 2680 1e13 C78578FC 		movl	$1, -904(%rbp)
 2680      FFFF0100 
 2680      0000
 2681 1e1d 90       		nop
 2682 1e1e E9C52700 		jmp	.L131
 2682      00
 2683              	.L136:
 2684              	.LBE14:
 684:main.c        **** 		} else {
 685:main.c        **** 			fprintf(stderr, "Could not open FPGALink device at %s and no initial VID:PID was supplied\n", vp
 2685              		.loc 1 685 0 is_stmt 1
 2686 1e23 488B0500 		movq	stderr(%rip), %rax
 2686      000000
 2687 1e2a 488B95D0 		movq	-560(%rbp), %rdx
 2687      FDFFFF
 2688 1e31 BE000000 		movl	$.LC107, %esi
 2688      00
 2689 1e36 4889C7   		movq	%rax, %rdi
 2690 1e39 B8000000 		movl	$0, %eax
 2690      00
 2691 1e3e E8000000 		call	fprintf
 2691      00
 686:main.c        **** 			FAIL(FLP_ARGS, cleanup);
 2692              		.loc 1 686 0
 2693 1e43 C78578FC 		movl	$12, -904(%rbp)
 2693      FFFF0C00 
 2693      0000
 2694 1e4d E9962700 		jmp	.L131
 2694      00
 2695              	.L135:
 687:main.c        **** 		}
 688:main.c        **** 	}
 689:main.c        **** 
 690:main.c        **** 	printf(
 2696              		.loc 1 690 0
 2697 1e52 488B85E0 		movq	-800(%rbp), %rax
 2697      FCFFFF
 2698 1e59 4889C7   		movq	%rax, %rdi
 2699 1e5c E8000000 		call	flGetFirmwareVersion
 2699      00
 2700 1e61 89C3     		movl	%eax, %ebx
 691:main.c        **** 		"Connected to FPGALink device %s (firmwareID: 0x%04X, firmwareVersion: 0x%08X)\n",
 692:main.c        **** 		vp, flGetFirmwareID(handle), flGetFirmwareVersion(handle)
 2701              		.loc 1 692 0
 2702 1e63 488B85E0 		movq	-800(%rbp), %rax
 2702      FCFFFF
 2703 1e6a 4889C7   		movq	%rax, %rdi
 2704 1e6d E8000000 		call	flGetFirmwareID
 2704      00
 690:main.c        **** 		"Connected to FPGALink device %s (firmwareID: 0x%04X, firmwareVersion: 0x%08X)\n",
 2705              		.loc 1 690 0
 2706 1e72 0FB7D0   		movzwl	%ax, %edx
 2707 1e75 488B85D0 		movq	-560(%rbp), %rax
 2707      FDFFFF
 2708 1e7c 89D9     		movl	%ebx, %ecx
 2709 1e7e 4889C6   		movq	%rax, %rsi
 2710 1e81 BF000000 		movl	$.LC108, %edi
 2710      00
 2711 1e86 B8000000 		movl	$0, %eax
 2711      00
 2712 1e8b E8000000 		call	printf
 2712      00
 693:main.c        **** 	);
 694:main.c        **** 
 695:main.c        **** 	if ( eepromOpt->count ) {
 2713              		.loc 1 695 0
 2714 1e90 488B85A8 		movq	-600(%rbp), %rax
 2714      FDFFFF
 2715 1e97 8B4060   		movl	96(%rax), %eax
 2716 1e9a 85C0     		testl	%eax, %eax
 2717 1e9c 0F84B600 		je	.L146
 2717      0000
 696:main.c        **** 		if ( !strcmp("std", eepromOpt->sval[0]) ) {
 2718              		.loc 1 696 0
 2719 1ea2 488B85A8 		movq	-600(%rbp), %rax
 2719      FDFFFF
 2720 1ea9 488B4068 		movq	104(%rax), %rax
 2721 1ead 488B00   		movq	(%rax), %rax
 2722 1eb0 4889C6   		movq	%rax, %rsi
 2723 1eb3 BF000000 		movl	$.LC109, %edi
 2723      00
 2724 1eb8 E8000000 		call	strcmp
 2724      00
 2725 1ebd 85C0     		testl	%eax, %eax
 2726 1ebf 7532     		jne	.L147
 697:main.c        **** 			printf("Writing the standard FPGALink firmware to the FX2's EEPROM...\n");
 2727              		.loc 1 697 0
 2728 1ec1 BF000000 		movl	$.LC110, %edi
 2728      00
 2729 1ec6 E8000000 		call	puts
 2729      00
 698:main.c        **** 			fStatus = flFlashStandardFirmware(handle, vp, &error);
 2730              		.loc 1 698 0
 2731 1ecb 488B85E0 		movq	-800(%rbp), %rax
 2731      FCFFFF
 2732 1ed2 488D95E8 		leaq	-792(%rbp), %rdx
 2732      FCFFFF
 2733 1ed9 488B8DD0 		movq	-560(%rbp), %rcx
 2733      FDFFFF
 2734 1ee0 4889CE   		movq	%rcx, %rsi
 2735 1ee3 4889C7   		movq	%rax, %rdi
 2736 1ee6 E8000000 		call	flFlashStandardFirmware
 2736      00
 2737 1eeb 89857CFC 		movl	%eax, -900(%rbp)
 2737      FFFF
 2738 1ef1 EB4D     		jmp	.L148
 2739              	.L147:
 699:main.c        **** 		} else {
 700:main.c        **** 			printf("Writing custom FPGALink firmware from %s to the FX2's EEPROM...\n", eepromOpt->sval[0]);
 2740              		.loc 1 700 0
 2741 1ef3 488B85A8 		movq	-600(%rbp), %rax
 2741      FDFFFF
 2742 1efa 488B4068 		movq	104(%rax), %rax
 2743 1efe 488B00   		movq	(%rax), %rax
 2744 1f01 4889C6   		movq	%rax, %rsi
 2745 1f04 BF000000 		movl	$.LC111, %edi
 2745      00
 2746 1f09 B8000000 		movl	$0, %eax
 2746      00
 2747 1f0e E8000000 		call	printf
 2747      00
 701:main.c        **** 			fStatus = flFlashCustomFirmware(handle, eepromOpt->sval[0], &error);
 2748              		.loc 1 701 0
 2749 1f13 488B85A8 		movq	-600(%rbp), %rax
 2749      FDFFFF
 2750 1f1a 488B4068 		movq	104(%rax), %rax
 2751 1f1e 488B08   		movq	(%rax), %rcx
 2752 1f21 488B85E0 		movq	-800(%rbp), %rax
 2752      FCFFFF
 2753 1f28 488D95E8 		leaq	-792(%rbp), %rdx
 2753      FCFFFF
 2754 1f2f 4889CE   		movq	%rcx, %rsi
 2755 1f32 4889C7   		movq	%rax, %rdi
 2756 1f35 E8000000 		call	flFlashCustomFirmware
 2756      00
 2757 1f3a 89857CFC 		movl	%eax, -900(%rbp)
 2757      FFFF
 2758              	.L148:
 702:main.c        **** 		}
 703:main.c        **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 2759              		.loc 1 703 0
 2760 1f40 83BD7CFC 		cmpl	$0, -900(%rbp)
 2760      FFFF00
 2761 1f47 740F     		je	.L146
 2762              		.loc 1 703 0 is_stmt 0 discriminator 1
 2763 1f49 C78578FC 		movl	$1, -904(%rbp)
 2763      FFFF0100 
 2763      0000
 2764 1f53 E9902600 		jmp	.L131
 2764      00
 2765              	.L146:
 704:main.c        **** 	}
 705:main.c        **** 
 706:main.c        **** 	if ( backupOpt->count ) {
 2766              		.loc 1 706 0 is_stmt 1
 2767 1f58 488B85B0 		movq	-592(%rbp), %rax
 2767      FDFFFF
 2768 1f5f 8B4060   		movl	96(%rax), %eax
 2769 1f62 85C0     		testl	%eax, %eax
 2770 1f64 0F84DA00 		je	.L149
 2770      0000
 2771              	.LBB15:
 707:main.c        **** 		const char *fileName;
 708:main.c        **** 		const uint32 kbitSize = strtoul(backupOpt->sval[0], (char**)&fileName, 0);
 2772              		.loc 1 708 0
 2773 1f6a 488B85B0 		movq	-592(%rbp), %rax
 2773      FDFFFF
 2774 1f71 488B4068 		movq	104(%rax), %rax
 2775 1f75 488B00   		movq	(%rax), %rax
 2776 1f78 488D8DF8 		leaq	-776(%rbp), %rcx
 2776      FCFFFF
 2777 1f7f BA000000 		movl	$0, %edx
 2777      00
 2778 1f84 4889CE   		movq	%rcx, %rsi
 2779 1f87 4889C7   		movq	%rax, %rdi
 2780 1f8a E8000000 		call	strtoul
 2780      00
 2781 1f8f 8985D0FC 		movl	%eax, -816(%rbp)
 2781      FFFF
 709:main.c        **** 		if ( *fileName != ':' ) {
 2782              		.loc 1 709 0
 2783 1f95 488B85F8 		movq	-776(%rbp), %rax
 2783      FCFFFF
 2784 1f9c 0FB600   		movzbl	(%rax), %eax
 2785 1f9f 3C3A     		cmpb	$58, %al
 2786 1fa1 742F     		je	.L150
 710:main.c        **** 			fprintf(stderr, "%s: invalid argument to option --backup=<kbitSize:fw.iic>\n", progName);
 2787              		.loc 1 710 0
 2788 1fa3 488B0500 		movq	stderr(%rip), %rax
 2788      000000
 2789 1faa 488B95C0 		movq	-576(%rbp), %rdx
 2789      FDFFFF
 2790 1fb1 BE000000 		movl	$.LC112, %esi
 2790      00
 2791 1fb6 4889C7   		movq	%rax, %rdi
 2792 1fb9 B8000000 		movl	$0, %eax
 2792      00
 2793 1fbe E8000000 		call	fprintf
 2793      00
 711:main.c        **** 			FAIL(FLP_ARGS, cleanup);
 2794              		.loc 1 711 0
 2795 1fc3 C78578FC 		movl	$12, -904(%rbp)
 2795      FFFF0C00 
 2795      0000
 2796 1fcd E9162600 		jmp	.L131
 2796      00
 2797              	.L150:
 712:main.c        **** 		}
 713:main.c        **** 		fileName++;
 2798              		.loc 1 713 0
 2799 1fd2 488B85F8 		movq	-776(%rbp), %rax
 2799      FCFFFF
 2800 1fd9 4883C001 		addq	$1, %rax
 2801 1fdd 488985F8 		movq	%rax, -776(%rbp)
 2801      FCFFFF
 714:main.c        **** 		printf("Saving a backup of %d kbit from the FX2's EEPROM to %s...\n", kbitSize, fileName);
 2802              		.loc 1 714 0
 2803 1fe4 488B95F8 		movq	-776(%rbp), %rdx
 2803      FCFFFF
 2804 1feb 8B85D0FC 		movl	-816(%rbp), %eax
 2804      FFFF
 2805 1ff1 89C6     		movl	%eax, %esi
 2806 1ff3 BF000000 		movl	$.LC113, %edi
 2806      00
 2807 1ff8 B8000000 		movl	$0, %eax
 2807      00
 2808 1ffd E8000000 		call	printf
 2808      00
 715:main.c        **** 		fStatus = flSaveFirmware(handle, kbitSize, fileName, &error);
 2809              		.loc 1 715 0
 2810 2002 488B95F8 		movq	-776(%rbp), %rdx
 2810      FCFFFF
 2811 2009 488B85E0 		movq	-800(%rbp), %rax
 2811      FCFFFF
 2812 2010 488D8DE8 		leaq	-792(%rbp), %rcx
 2812      FCFFFF
 2813 2017 8BB5D0FC 		movl	-816(%rbp), %esi
 2813      FFFF
 2814 201d 4889C7   		movq	%rax, %rdi
 2815 2020 E8000000 		call	flSaveFirmware
 2815      00
 2816 2025 89857CFC 		movl	%eax, -900(%rbp)
 2816      FFFF
 716:main.c        **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 2817              		.loc 1 716 0
 2818 202b 83BD7CFC 		cmpl	$0, -900(%rbp)
 2818      FFFF00
 2819 2032 7410     		je	.L149
 2820              		.loc 1 716 0 is_stmt 0 discriminator 1
 2821 2034 C78578FC 		movl	$1, -904(%rbp)
 2821      FFFF0100 
 2821      0000
 2822 203e 90       		nop
 2823 203f E9A42500 		jmp	.L131
 2823      00
 2824              	.L149:
 2825              	.LBE15:
 717:main.c        **** 	}
 718:main.c        **** 
 719:main.c        **** 	if ( rstOpt->count ) {
 2826              		.loc 1 719 0 is_stmt 1
 2827 2044 488B8590 		movq	-624(%rbp), %rax
 2827      FDFFFF
 2828 204b 8B4060   		movl	96(%rax), %eax
 2829 204e 85C0     		testl	%eax, %eax
 2830 2050 7437     		je	.L153
 720:main.c        **** 		// Reset the bulk endpoints (only needed in some virtualised environments)
 721:main.c        **** 		fStatus = flResetToggle(handle, &error);
 2831              		.loc 1 721 0
 2832 2052 488B85E0 		movq	-800(%rbp), %rax
 2832      FCFFFF
 2833 2059 488D95E8 		leaq	-792(%rbp), %rdx
 2833      FCFFFF
 2834 2060 4889D6   		movq	%rdx, %rsi
 2835 2063 4889C7   		movq	%rax, %rdi
 2836 2066 E8000000 		call	flResetToggle
 2836      00
 2837 206b 89857CFC 		movl	%eax, -900(%rbp)
 2837      FFFF
 722:main.c        **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 2838              		.loc 1 722 0
 2839 2071 83BD7CFC 		cmpl	$0, -900(%rbp)
 2839      FFFF00
 2840 2078 740F     		je	.L153
 2841              		.loc 1 722 0 is_stmt 0 discriminator 1
 2842 207a C78578FC 		movl	$1, -904(%rbp)
 2842      FFFF0100 
 2842      0000
 2843 2084 E95F2500 		jmp	.L131
 2843      00
 2844              	.L153:
 723:main.c        **** 	}
 724:main.c        **** 
 725:main.c        **** 	if ( conOpt->count ) {
 2845              		.loc 1 725 0 is_stmt 1
 2846 2089 488B8568 		movq	-664(%rbp), %rax
 2846      FDFFFF
 2847 2090 8B4060   		movl	96(%rax), %eax
 2848 2093 85C0     		testl	%eax, %eax
 2849 2095 7413     		je	.L154
 726:main.c        **** 		conduit = (uint8)conOpt->ival[0];
 2850              		.loc 1 726 0
 2851 2097 488B8568 		movq	-664(%rbp), %rax
 2851      FDFFFF
 2852 209e 488B4068 		movq	104(%rax), %rax
 2853 20a2 8B00     		movl	(%rax), %eax
 2854 20a4 888561FC 		movb	%al, -927(%rbp)
 2854      FFFF
 2855              	.L154:
 727:main.c        **** 	}
 728:main.c        **** 
 729:main.c        **** 	isNeroCapable = flIsNeroCapable(handle);
 2856              		.loc 1 729 0
 2857 20aa 488B85E0 		movq	-800(%rbp), %rax
 2857      FCFFFF
 2858 20b1 4889C7   		movq	%rax, %rdi
 2859 20b4 E8000000 		call	flIsNeroCapable
 2859      00
 2860 20b9 84C0     		testb	%al, %al
 2861 20bb 0F95C0   		setne	%al
 2862 20be 888562FC 		movb	%al, -926(%rbp)
 2862      FFFF
 730:main.c        **** 	isCommCapable = flIsCommCapable(handle, conduit);
 2863              		.loc 1 730 0
 2864 20c4 0FB69561 		movzbl	-927(%rbp), %edx
 2864      FCFFFF
 2865 20cb 488B85E0 		movq	-800(%rbp), %rax
 2865      FCFFFF
 2866 20d2 89D6     		movl	%edx, %esi
 2867 20d4 4889C7   		movq	%rax, %rdi
 2868 20d7 E8000000 		call	flIsCommCapable
 2868      00
 2869 20dc 84C0     		testb	%al, %al
 2870 20de 0F95C0   		setne	%al
 2871 20e1 888563FC 		movb	%al, -925(%rbp)
 2871      FFFF
 731:main.c        **** 
 732:main.c        **** 	if ( portOpt->count ) {
 2872              		.loc 1 732 0
 2873 20e7 488B8550 		movq	-688(%rbp), %rax
 2873      FDFFFF
 2874 20ee 8B4060   		movl	96(%rax), %eax
 2875 20f1 85C0     		testl	%eax, %eax
 2876 20f3 0F843C02 		je	.L155
 2876      0000
 2877              	.LBB16:
 733:main.c        **** 		uint32 readState;
 734:main.c        **** 		char hex[9];
 735:main.c        **** 		const uint8 *p = (const uint8 *)hex;
 2878              		.loc 1 735 0
 2879 20f9 488D45C0 		leaq	-64(%rbp), %rax
 2880 20fd 488985D8 		movq	%rax, -552(%rbp)
 2880      FDFFFF
 736:main.c        **** 		printf("Configuring ports...\n");
 2881              		.loc 1 736 0
 2882 2104 BF000000 		movl	$.LC114, %edi
 2882      00
 2883 2109 E8000000 		call	puts
 2883      00
 737:main.c        **** 		fStatus = flMultiBitPortAccess(handle, portOpt->sval[0], &readState, &error);
 2884              		.loc 1 737 0
 2885 210e 488B8550 		movq	-688(%rbp), %rax
 2885      FDFFFF
 2886 2115 488B4068 		movq	104(%rax), %rax
 2887 2119 488B30   		movq	(%rax), %rsi
 2888 211c 488B85E0 		movq	-800(%rbp), %rax
 2888      FCFFFF
 2889 2123 488D8DE8 		leaq	-792(%rbp), %rcx
 2889      FCFFFF
 2890 212a 488D95F8 		leaq	-776(%rbp), %rdx
 2890      FCFFFF
 2891 2131 4889C7   		movq	%rax, %rdi
 2892 2134 E8000000 		call	flMultiBitPortAccess
 2892      00
 2893 2139 89857CFC 		movl	%eax, -900(%rbp)
 2893      FFFF
 738:main.c        **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 2894              		.loc 1 738 0
 2895 213f 83BD7CFC 		cmpl	$0, -900(%rbp)
 2895      FFFF00
 2896 2146 740F     		je	.L156
 2897              		.loc 1 738 0 is_stmt 0 discriminator 1
 2898 2148 C78578FC 		movl	$1, -904(%rbp)
 2898      FFFF0100 
 2898      0000
 2899 2152 E9912400 		jmp	.L131
 2899      00
 2900              	.L156:
 739:main.c        **** 		sprintf(hex, "%08X", readState);
 2901              		.loc 1 739 0 is_stmt 1
 2902 2157 8B95F8FC 		movl	-776(%rbp), %edx
 2902      FFFF
 2903 215d 488D45C0 		leaq	-64(%rbp), %rax
 2904 2161 BE000000 		movl	$.LC115, %esi
 2904      00
 2905 2166 4889C7   		movq	%rax, %rdi
 2906 2169 B8000000 		movl	$0, %eax
 2906      00
 2907 216e E8000000 		call	sprintf
 2907      00
 740:main.c        **** 		printf("Readback:   28   24   20   16    12    8    4    0\n          %s", nibbles[*p++ - '0']);
 2908              		.loc 1 740 0
 2909 2173 488B85D8 		movq	-552(%rbp), %rax
 2909      FDFFFF
 2910 217a 488D5001 		leaq	1(%rax), %rdx
 2911 217e 488995D8 		movq	%rdx, -552(%rbp)
 2911      FDFFFF
 2912 2185 0FB600   		movzbl	(%rax), %eax
 2913 2188 0FB6C0   		movzbl	%al, %eax
 2914 218b 83E830   		subl	$48, %eax
 2915 218e 4898     		cltq
 2916 2190 488B04C5 		movq	nibbles(,%rax,8), %rax
 2916      00000000 
 2917 2198 4889C6   		movq	%rax, %rsi
 2918 219b BF000000 		movl	$.LC116, %edi
 2918      00
 2919 21a0 B8000000 		movl	$0, %eax
 2919      00
 2920 21a5 E8000000 		call	printf
 2920      00
 741:main.c        **** 		printf(" %s", nibbles[*p++ - '0']);
 2921              		.loc 1 741 0
 2922 21aa 488B85D8 		movq	-552(%rbp), %rax
 2922      FDFFFF
 2923 21b1 488D5001 		leaq	1(%rax), %rdx
 2924 21b5 488995D8 		movq	%rdx, -552(%rbp)
 2924      FDFFFF
 2925 21bc 0FB600   		movzbl	(%rax), %eax
 2926 21bf 0FB6C0   		movzbl	%al, %eax
 2927 21c2 83E830   		subl	$48, %eax
 2928 21c5 4898     		cltq
 2929 21c7 488B04C5 		movq	nibbles(,%rax,8), %rax
 2929      00000000 
 2930 21cf 4889C6   		movq	%rax, %rsi
 2931 21d2 BF000000 		movl	$.LC117, %edi
 2931      00
 2932 21d7 B8000000 		movl	$0, %eax
 2932      00
 2933 21dc E8000000 		call	printf
 2933      00
 742:main.c        **** 		printf(" %s", nibbles[*p++ - '0']);
 2934              		.loc 1 742 0
 2935 21e1 488B85D8 		movq	-552(%rbp), %rax
 2935      FDFFFF
 2936 21e8 488D5001 		leaq	1(%rax), %rdx
 2937 21ec 488995D8 		movq	%rdx, -552(%rbp)
 2937      FDFFFF
 2938 21f3 0FB600   		movzbl	(%rax), %eax
 2939 21f6 0FB6C0   		movzbl	%al, %eax
 2940 21f9 83E830   		subl	$48, %eax
 2941 21fc 4898     		cltq
 2942 21fe 488B04C5 		movq	nibbles(,%rax,8), %rax
 2942      00000000 
 2943 2206 4889C6   		movq	%rax, %rsi
 2944 2209 BF000000 		movl	$.LC117, %edi
 2944      00
 2945 220e B8000000 		movl	$0, %eax
 2945      00
 2946 2213 E8000000 		call	printf
 2946      00
 743:main.c        **** 		printf(" %s", nibbles[*p++ - '0']);
 2947              		.loc 1 743 0
 2948 2218 488B85D8 		movq	-552(%rbp), %rax
 2948      FDFFFF
 2949 221f 488D5001 		leaq	1(%rax), %rdx
 2950 2223 488995D8 		movq	%rdx, -552(%rbp)
 2950      FDFFFF
 2951 222a 0FB600   		movzbl	(%rax), %eax
 2952 222d 0FB6C0   		movzbl	%al, %eax
 2953 2230 83E830   		subl	$48, %eax
 2954 2233 4898     		cltq
 2955 2235 488B04C5 		movq	nibbles(,%rax,8), %rax
 2955      00000000 
 2956 223d 4889C6   		movq	%rax, %rsi
 2957 2240 BF000000 		movl	$.LC117, %edi
 2957      00
 2958 2245 B8000000 		movl	$0, %eax
 2958      00
 2959 224a E8000000 		call	printf
 2959      00
 744:main.c        **** 		printf("  %s", nibbles[*p++ - '0']);
 2960              		.loc 1 744 0
 2961 224f 488B85D8 		movq	-552(%rbp), %rax
 2961      FDFFFF
 2962 2256 488D5001 		leaq	1(%rax), %rdx
 2963 225a 488995D8 		movq	%rdx, -552(%rbp)
 2963      FDFFFF
 2964 2261 0FB600   		movzbl	(%rax), %eax
 2965 2264 0FB6C0   		movzbl	%al, %eax
 2966 2267 83E830   		subl	$48, %eax
 2967 226a 4898     		cltq
 2968 226c 488B04C5 		movq	nibbles(,%rax,8), %rax
 2968      00000000 
 2969 2274 4889C6   		movq	%rax, %rsi
 2970 2277 BF000000 		movl	$.LC118, %edi
 2970      00
 2971 227c B8000000 		movl	$0, %eax
 2971      00
 2972 2281 E8000000 		call	printf
 2972      00
 745:main.c        **** 		printf(" %s", nibbles[*p++ - '0']);
 2973              		.loc 1 745 0
 2974 2286 488B85D8 		movq	-552(%rbp), %rax
 2974      FDFFFF
 2975 228d 488D5001 		leaq	1(%rax), %rdx
 2976 2291 488995D8 		movq	%rdx, -552(%rbp)
 2976      FDFFFF
 2977 2298 0FB600   		movzbl	(%rax), %eax
 2978 229b 0FB6C0   		movzbl	%al, %eax
 2979 229e 83E830   		subl	$48, %eax
 2980 22a1 4898     		cltq
 2981 22a3 488B04C5 		movq	nibbles(,%rax,8), %rax
 2981      00000000 
 2982 22ab 4889C6   		movq	%rax, %rsi
 2983 22ae BF000000 		movl	$.LC117, %edi
 2983      00
 2984 22b3 B8000000 		movl	$0, %eax
 2984      00
 2985 22b8 E8000000 		call	printf
 2985      00
 746:main.c        **** 		printf(" %s", nibbles[*p++ - '0']);
 2986              		.loc 1 746 0
 2987 22bd 488B85D8 		movq	-552(%rbp), %rax
 2987      FDFFFF
 2988 22c4 488D5001 		leaq	1(%rax), %rdx
 2989 22c8 488995D8 		movq	%rdx, -552(%rbp)
 2989      FDFFFF
 2990 22cf 0FB600   		movzbl	(%rax), %eax
 2991 22d2 0FB6C0   		movzbl	%al, %eax
 2992 22d5 83E830   		subl	$48, %eax
 2993 22d8 4898     		cltq
 2994 22da 488B04C5 		movq	nibbles(,%rax,8), %rax
 2994      00000000 
 2995 22e2 4889C6   		movq	%rax, %rsi
 2996 22e5 BF000000 		movl	$.LC117, %edi
 2996      00
 2997 22ea B8000000 		movl	$0, %eax
 2997      00
 2998 22ef E8000000 		call	printf
 2998      00
 747:main.c        **** 		printf(" %s\n", nibbles[*p++ - '0']);
 2999              		.loc 1 747 0
 3000 22f4 488B85D8 		movq	-552(%rbp), %rax
 3000      FDFFFF
 3001 22fb 488D5001 		leaq	1(%rax), %rdx
 3002 22ff 488995D8 		movq	%rdx, -552(%rbp)
 3002      FDFFFF
 3003 2306 0FB600   		movzbl	(%rax), %eax
 3004 2309 0FB6C0   		movzbl	%al, %eax
 3005 230c 83E830   		subl	$48, %eax
 3006 230f 4898     		cltq
 3007 2311 488B04C5 		movq	nibbles(,%rax,8), %rax
 3007      00000000 
 3008 2319 4889C6   		movq	%rax, %rsi
 3009 231c BF000000 		movl	$.LC119, %edi
 3009      00
 3010 2321 B8000000 		movl	$0, %eax
 3010      00
 3011 2326 E8000000 		call	printf
 3011      00
 748:main.c        **** 		flSleep(100);
 3012              		.loc 1 748 0
 3013 232b BF640000 		movl	$100, %edi
 3013      00
 3014 2330 E8000000 		call	flSleep
 3014      00
 3015              	.L155:
 3016              	.LBE16:
 749:main.c        **** 	}
 750:main.c        **** 
 751:main.c        **** 	if ( queryOpt->count ) {
 3017              		.loc 1 751 0
 3018 2335 488B8558 		movq	-680(%rbp), %rax
 3018      FDFFFF
 3019 233c 8B4060   		movl	96(%rax), %eax
 3020 233f 85C0     		testl	%eax, %eax
 3021 2341 0F844D01 		je	.L157
 3021      0000
 752:main.c        **** 		if ( isNeroCapable ) {
 3022              		.loc 1 752 0
 3023 2347 80BD62FC 		cmpb	$0, -926(%rbp)
 3023      FFFF00
 3024 234e 0F841101 		je	.L158
 3024      0000
 753:main.c        **** 			fStatus = flSelectConduit(handle, 0x00, &error);
 3025              		.loc 1 753 0
 3026 2354 488B85E0 		movq	-800(%rbp), %rax
 3026      FCFFFF
 3027 235b 488D95E8 		leaq	-792(%rbp), %rdx
 3027      FCFFFF
 3028 2362 BE000000 		movl	$0, %esi
 3028      00
 3029 2367 4889C7   		movq	%rax, %rdi
 3030 236a E8000000 		call	flSelectConduit
 3030      00
 3031 236f 89857CFC 		movl	%eax, -900(%rbp)
 3031      FFFF
 754:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3032              		.loc 1 754 0
 3033 2375 83BD7CFC 		cmpl	$0, -900(%rbp)
 3033      FFFF00
 3034 237c 740F     		je	.L159
 3035              		.loc 1 754 0 is_stmt 0 discriminator 1
 3036 237e C78578FC 		movl	$1, -904(%rbp)
 3036      FFFF0100 
 3036      0000
 3037 2388 E95B2200 		jmp	.L131
 3037      00
 3038              	.L159:
 755:main.c        **** 			fStatus = jtagScanChain(handle, queryOpt->sval[0], &numDevices, scanChain, 16, &error);
 3039              		.loc 1 755 0 is_stmt 1
 3040 238d 488B8558 		movq	-680(%rbp), %rax
 3040      FDFFFF
 3041 2394 488B4068 		movq	104(%rax), %rax
 3042 2398 488B30   		movq	(%rax), %rsi
 3043 239b 488B85E0 		movq	-800(%rbp), %rax
 3043      FCFFFF
 3044 23a2 488DBDE8 		leaq	-792(%rbp), %rdi
 3044      FCFFFF
 3045 23a9 488D8DB0 		leaq	-336(%rbp), %rcx
 3045      FEFFFF
 3046 23b0 488D9568 		leaq	-920(%rbp), %rdx
 3046      FCFFFF
 3047 23b7 4989F9   		movq	%rdi, %r9
 3048 23ba 41B81000 		movl	$16, %r8d
 3048      0000
 3049 23c0 4889C7   		movq	%rax, %rdi
 3050 23c3 E8000000 		call	jtagScanChain
 3050      00
 3051 23c8 89857CFC 		movl	%eax, -900(%rbp)
 3051      FFFF
 756:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3052              		.loc 1 756 0
 3053 23ce 83BD7CFC 		cmpl	$0, -900(%rbp)
 3053      FFFF00
 3054 23d5 740F     		je	.L160
 3055              		.loc 1 756 0 is_stmt 0 discriminator 1
 3056 23d7 C78578FC 		movl	$1, -904(%rbp)
 3056      FFFF0100 
 3056      0000
 3057 23e1 E9022200 		jmp	.L131
 3057      00
 3058              	.L160:
 757:main.c        **** 			if ( numDevices ) {
 3059              		.loc 1 757 0 is_stmt 1
 3060 23e6 8B8568FC 		movl	-920(%rbp), %eax
 3060      FFFF
 3061 23ec 85C0     		testl	%eax, %eax
 3062 23ee 745A     		je	.L161
 758:main.c        **** 				printf("The FPGALink device at %s scanned its JTAG chain, yielding:\n", vp);
 3063              		.loc 1 758 0
 3064 23f0 488B85D0 		movq	-560(%rbp), %rax
 3064      FDFFFF
 3065 23f7 4889C6   		movq	%rax, %rsi
 3066 23fa BF000000 		movl	$.LC120, %edi
 3066      00
 3067 23ff B8000000 		movl	$0, %eax
 3067      00
 3068 2404 E8000000 		call	printf
 3068      00
 759:main.c        **** 				for ( i = 0; i < numDevices; i++ ) {
 3069              		.loc 1 759 0
 3070 2409 C78580FC 		movl	$0, -896(%rbp)
 3070      FFFF0000 
 3070      0000
 3071 2413 EB25     		jmp	.L162
 3072              	.L163:
 760:main.c        **** 					printf("  0x%08X\n", scanChain[i]);
 3073              		.loc 1 760 0 discriminator 3
 3074 2415 8B8580FC 		movl	-896(%rbp), %eax
 3074      FFFF
 3075 241b 8B8485B0 		movl	-336(%rbp,%rax,4), %eax
 3075      FEFFFF
 3076 2422 89C6     		movl	%eax, %esi
 3077 2424 BF000000 		movl	$.LC121, %edi
 3077      00
 3078 2429 B8000000 		movl	$0, %eax
 3078      00
 3079 242e E8000000 		call	printf
 3079      00
 759:main.c        **** 				for ( i = 0; i < numDevices; i++ ) {
 3080              		.loc 1 759 0 discriminator 3
 3081 2433 838580FC 		addl	$1, -896(%rbp)
 3081      FFFF01
 3082              	.L162:
 759:main.c        **** 				for ( i = 0; i < numDevices; i++ ) {
 3083              		.loc 1 759 0 is_stmt 0 discriminator 1
 3084 243a 8B8568FC 		movl	-920(%rbp), %eax
 3084      FFFF
 3085 2440 398580FC 		cmpl	%eax, -896(%rbp)
 3085      FFFF
 3086 2446 72CD     		jb	.L163
 3087 2448 EB4A     		jmp	.L157
 3088              	.L161:
 761:main.c        **** 				}
 762:main.c        **** 			} else {
 763:main.c        **** 				printf("The FPGALink device at %s scanned its JTAG chain but did not find any attached devices\
 3089              		.loc 1 763 0 is_stmt 1
 3090 244a 488B85D0 		movq	-560(%rbp), %rax
 3090      FDFFFF
 3091 2451 4889C6   		movq	%rax, %rsi
 3092 2454 BF000000 		movl	$.LC122, %edi
 3092      00
 3093 2459 B8000000 		movl	$0, %eax
 3093      00
 3094 245e E8000000 		call	printf
 3094      00
 3095 2463 EB2F     		jmp	.L157
 3096              	.L158:
 764:main.c        **** 			}
 765:main.c        **** 		} else {
 766:main.c        **** 			fprintf(stderr, "JTAG chain scan requested but FPGALink device at %s does not support NeroProg\n
 3097              		.loc 1 766 0
 3098 2465 488B0500 		movq	stderr(%rip), %rax
 3098      000000
 3099 246c 488B95D0 		movq	-560(%rbp), %rdx
 3099      FDFFFF
 3100 2473 BE000000 		movl	$.LC123, %esi
 3100      00
 3101 2478 4889C7   		movq	%rax, %rdi
 3102 247b B8000000 		movl	$0, %eax
 3102      00
 3103 2480 E8000000 		call	fprintf
 3103      00
 767:main.c        **** 			FAIL(FLP_ARGS, cleanup);
 3104              		.loc 1 767 0
 3105 2485 C78578FC 		movl	$12, -904(%rbp)
 3105      FFFF0C00 
 3105      0000
 3106 248f E9542100 		jmp	.L131
 3106      00
 3107              	.L157:
 768:main.c        **** 		}
 769:main.c        **** 	}
 770:main.c        **** 
 771:main.c        **** 	if ( progOpt->count ) {
 3108              		.loc 1 771 0
 3109 2494 488B8560 		movq	-672(%rbp), %rax
 3109      FDFFFF
 3110 249b 8B4060   		movl	96(%rax), %eax
 3111 249e 85C0     		testl	%eax, %eax
 3112 24a0 0F84C900 		je	.L165
 3112      0000
 772:main.c        **** 		printf("Programming device...\n");
 3113              		.loc 1 772 0
 3114 24a6 BF000000 		movl	$.LC124, %edi
 3114      00
 3115 24ab E8000000 		call	puts
 3115      00
 773:main.c        **** 		if ( isNeroCapable ) {
 3116              		.loc 1 773 0
 3117 24b0 80BD62FC 		cmpb	$0, -926(%rbp)
 3117      FFFF00
 3118 24b7 0F848300 		je	.L166
 3118      0000
 774:main.c        **** 			fStatus = flSelectConduit(handle, 0x00, &error);
 3119              		.loc 1 774 0
 3120 24bd 488B85E0 		movq	-800(%rbp), %rax
 3120      FCFFFF
 3121 24c4 488D95E8 		leaq	-792(%rbp), %rdx
 3121      FCFFFF
 3122 24cb BE000000 		movl	$0, %esi
 3122      00
 3123 24d0 4889C7   		movq	%rax, %rdi
 3124 24d3 E8000000 		call	flSelectConduit
 3124      00
 3125 24d8 89857CFC 		movl	%eax, -900(%rbp)
 3125      FFFF
 775:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3126              		.loc 1 775 0
 3127 24de 83BD7CFC 		cmpl	$0, -900(%rbp)
 3127      FFFF00
 3128 24e5 740F     		je	.L167
 3129              		.loc 1 775 0 is_stmt 0 discriminator 1
 3130 24e7 C78578FC 		movl	$1, -904(%rbp)
 3130      FFFF0100 
 3130      0000
 3131 24f1 E9F22000 		jmp	.L131
 3131      00
 3132              	.L167:
 776:main.c        **** 			fStatus = flProgram(handle, progOpt->sval[0], NULL, &error);
 3133              		.loc 1 776 0 is_stmt 1
 3134 24f6 488B8560 		movq	-672(%rbp), %rax
 3134      FDFFFF
 3135 24fd 488B4068 		movq	104(%rax), %rax
 3136 2501 488B30   		movq	(%rax), %rsi
 3137 2504 488B85E0 		movq	-800(%rbp), %rax
 3137      FCFFFF
 3138 250b 488D95E8 		leaq	-792(%rbp), %rdx
 3138      FCFFFF
 3139 2512 4889D1   		movq	%rdx, %rcx
 3140 2515 BA000000 		movl	$0, %edx
 3140      00
 3141 251a 4889C7   		movq	%rax, %rdi
 3142 251d E8000000 		call	flProgram
 3142      00
 3143 2522 89857CFC 		movl	%eax, -900(%rbp)
 3143      FFFF
 777:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3144              		.loc 1 777 0
 3145 2528 83BD7CFC 		cmpl	$0, -900(%rbp)
 3145      FFFF00
 3146 252f 743E     		je	.L165
 3147              		.loc 1 777 0 is_stmt 0 discriminator 1
 3148 2531 C78578FC 		movl	$1, -904(%rbp)
 3148      FFFF0100 
 3148      0000
 3149 253b E9A82000 		jmp	.L131
 3149      00
 3150              	.L166:
 778:main.c        **** 		} else {
 779:main.c        **** 			fprintf(stderr, "Program operation requested but device at %s does not support NeroProg\n", vp);
 3151              		.loc 1 779 0 is_stmt 1
 3152 2540 488B0500 		movq	stderr(%rip), %rax
 3152      000000
 3153 2547 488B95D0 		movq	-560(%rbp), %rdx
 3153      FDFFFF
 3154 254e BE000000 		movl	$.LC125, %esi
 3154      00
 3155 2553 4889C7   		movq	%rax, %rdi
 3156 2556 B8000000 		movl	$0, %eax
 3156      00
 3157 255b E8000000 		call	fprintf
 3157      00
 780:main.c        **** 			FAIL(FLP_ARGS, cleanup);
 3158              		.loc 1 780 0
 3159 2560 C78578FC 		movl	$12, -904(%rbp)
 3159      FFFF0C00 
 3159      0000
 3160 256a E9792000 		jmp	.L131
 3160      00
 3161              	.L165:
 781:main.c        **** 		}
 782:main.c        **** 	}
 783:main.c        **** 
 784:main.c        **** 	if ( benOpt->count ) {
 3162              		.loc 1 784 0
 3163 256f 488B8588 		movq	-632(%rbp), %rax
 3163      FDFFFF
 3164 2576 8B4060   		movl	96(%rax), %eax
 3165 2579 85C0     		testl	%eax, %eax
 3166 257b 7407     		je	.L168
 785:main.c        **** 		enableBenchmarking = true;
 3167              		.loc 1 785 0
 3168 257d C6050000 		movb	$1, enableBenchmarking(%rip)
 3168      000001
 3169              	.L168:
 786:main.c        **** 	}
 787:main.c        **** 
 788:main.c        **** 	if ( railOpt->count ) {
 3170              		.loc 1 788 0
 3171 2584 488B8570 		movq	-656(%rbp), %rax
 3171      FDFFFF
 3172 258b 8B4060   		movl	96(%rax), %eax
 3173 258e 85C0     		testl	%eax, %eax
 3174 2590 0F841A1A 		je	.L169
 3174      0000
 3175              	.LBB17:
 789:main.c        **** 		///////////////////////
 790:main.c        **** 		int chan=0,DONE=0,n=63,X=0,Y=0,checkstart=0;
 3176              		.loc 1 790 0
 3177 2596 C78588FC 		movl	$0, -888(%rbp)
 3177      FFFF0000 
 3177      0000
 3178 25a0 C7858CFC 		movl	$0, -884(%rbp)
 3178      FFFF0000 
 3178      0000
 3179 25aa C78590FC 		movl	$63, -880(%rbp)
 3179      FFFF3F00 
 3179      0000
 3180 25b4 C78594FC 		movl	$0, -876(%rbp)
 3180      FFFF0000 
 3180      0000
 3181 25be C78598FC 		movl	$0, -872(%rbp)
 3181      FFFF0000 
 3181      0000
 3182 25c8 C7859CFC 		movl	$0, -868(%rbp)
 3182      FFFF0000 
 3182      0000
 3183              	.L298:
 3184              	.LBB18:
 791:main.c        **** 		while(true) {
 792:main.c        **** 			if(DONE==1){
 3185              		.loc 1 792 0
 3186 25d2 83BD8CFC 		cmpl	$1, -884(%rbp)
 3186      FFFF01
 3187 25d9 750C     		jne	.L170
 793:main.c        **** 				n=chan;
 3188              		.loc 1 793 0
 3189 25db 8B8588FC 		movl	-888(%rbp), %eax
 3189      FFFF
 3190 25e1 898590FC 		movl	%eax, -880(%rbp)
 3190      FFFF
 3191              	.L170:
 3192              	.LBB19:
 794:main.c        **** 			}
 795:main.c        **** 			for(int i=chan;i<=n;i=(i+1)%64){
 3193              		.loc 1 795 0
 3194 25e7 8B8588FC 		movl	-888(%rbp), %eax
 3194      FFFF
 3195 25ed 8985A0FC 		movl	%eax, -864(%rbp)
 3195      FFFF
 3196 25f3 E98F0700 		jmp	.L171
 3196      00
 3197              	.L210:
 3198              	.LBB20:
 796:main.c        **** 				if(checkstart==0){
 3199              		.loc 1 796 0
 3200 25f8 83BD9CFC 		cmpl	$0, -868(%rbp)
 3200      FFFF00
 3201 25ff 0F859001 		jne	.L172
 3201      0000
 797:main.c        **** 					printf("Receiving coordinates from fpga %s...\n", vp);
 3202              		.loc 1 797 0
 3203 2605 488B85D0 		movq	-560(%rbp), %rax
 3203      FDFFFF
 3204 260c 4889C6   		movq	%rax, %rsi
 3205 260f BF000000 		movl	$.LC126, %edi
 3205      00
 3206 2614 B8000000 		movl	$0, %eax
 3206      00
 3207 2619 E8000000 		call	printf
 3207      00
 798:main.c        **** 					if ( isCommCapable ) {
 3208              		.loc 1 798 0
 3209 261e 80BD63FC 		cmpb	$0, -925(%rbp)
 3209      FFFF00
 3210 2625 0F843B01 		je	.L173
 3210      0000
 3211              	.LBB21:
 799:main.c        **** 						uint8 isRunning;
 800:main.c        **** 						fStatus = flSelectConduit(handle, conduit, &error);
 3212              		.loc 1 800 0
 3213 262b 0FB68D61 		movzbl	-927(%rbp), %ecx
 3213      FCFFFF
 3214 2632 488B85E0 		movq	-800(%rbp), %rax
 3214      FCFFFF
 3215 2639 488D95E8 		leaq	-792(%rbp), %rdx
 3215      FCFFFF
 3216 2640 89CE     		movl	%ecx, %esi
 3217 2642 4889C7   		movq	%rax, %rdi
 3218 2645 E8000000 		call	flSelectConduit
 3218      00
 3219 264a 89857CFC 		movl	%eax, -900(%rbp)
 3219      FFFF
 801:main.c        **** 						CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3220              		.loc 1 801 0
 3221 2650 83BD7CFC 		cmpl	$0, -900(%rbp)
 3221      FFFF00
 3222 2657 740F     		je	.L174
 3223              		.loc 1 801 0 is_stmt 0 discriminator 1
 3224 2659 C78578FC 		movl	$1, -904(%rbp)
 3224      FFFF0100 
 3224      0000
 3225 2663 E9801F00 		jmp	.L131
 3225      00
 3226              	.L174:
 802:main.c        **** 						fStatus = flIsFPGARunning(handle, &isRunning, &error);
 3227              		.loc 1 802 0 is_stmt 1
 3228 2668 488B85E0 		movq	-800(%rbp), %rax
 3228      FCFFFF
 3229 266f 488D95E8 		leaq	-792(%rbp), %rdx
 3229      FCFFFF
 3230 2676 488D8DF8 		leaq	-776(%rbp), %rcx
 3230      FCFFFF
 3231 267d 4889CE   		movq	%rcx, %rsi
 3232 2680 4889C7   		movq	%rax, %rdi
 3233 2683 E8000000 		call	flIsFPGARunning
 3233      00
 3234 2688 89857CFC 		movl	%eax, -900(%rbp)
 3234      FFFF
 803:main.c        **** 						CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3235              		.loc 1 803 0
 3236 268e 83BD7CFC 		cmpl	$0, -900(%rbp)
 3236      FFFF00
 3237 2695 740F     		je	.L176
 3238              		.loc 1 803 0 is_stmt 0 discriminator 1
 3239 2697 C78578FC 		movl	$1, -904(%rbp)
 3239      FFFF0100 
 3239      0000
 3240 26a1 E9421F00 		jmp	.L131
 3240      00
 3241              	.L176:
 804:main.c        **** 						if ( isRunning ) {
 3242              		.loc 1 804 0 is_stmt 1
 3243 26a6 0FB685F8 		movzbl	-776(%rbp), %eax
 3243      FCFFFF
 3244 26ad 84C0     		testb	%al, %al
 3245 26af 0F848100 		je	.L177
 3245      0000
 3246              	.LBB22:
 805:main.c        **** 							char str1[40]=" ";
 3247              		.loc 1 805 0
 3248 26b5 48C745C0 		movq	$32, -64(%rbp)
 3248      20000000 
 3249 26bd 48C745C8 		movq	$0, -56(%rbp)
 3249      00000000 
 3250 26c5 48C745D0 		movq	$0, -48(%rbp)
 3250      00000000 
 3251 26cd 48C745D8 		movq	$0, -40(%rbp)
 3251      00000000 
 3252 26d5 48C745E0 		movq	$0, -32(%rbp)
 3252      00000000 
 806:main.c        **** 							// printf("%s...\n", str1);
 807:main.c        **** 							read_chan("coordinate_enc.dat", str1, 2*i);
 3253              		.loc 1 807 0
 3254 26dd 8B85A0FC 		movl	-864(%rbp), %eax
 3254      FFFF
 3255 26e3 8D1400   		leal	(%rax,%rax), %edx
 3256 26e6 488D45C0 		leaq	-64(%rbp), %rax
 3257 26ea 4889C6   		movq	%rax, %rsi
 3258 26ed BF000000 		movl	$.LC127, %edi
 3258      00
 3259 26f2 E8000000 		call	read_chan
 3259      00
 808:main.c        **** 							// printf("%s\n", str1);
 809:main.c        **** 							pStatus = parseLine(handle, str1, &error, UINT_MAX);
 3260              		.loc 1 809 0
 3261 26f7 488B85E0 		movq	-800(%rbp), %rax
 3261      FCFFFF
 3262 26fe 488D95E8 		leaq	-792(%rbp), %rdx
 3262      FCFFFF
 3263 2705 488D75C0 		leaq	-64(%rbp), %rsi
 3264 2709 B9FFFFFF 		movl	$4294967295, %ecx
 3264      FF
 3265 270e 4889C7   		movq	%rax, %rdi
 3266 2711 E82DDFFF 		call	parseLine
 3266      FF
 3267 2716 8985D4FC 		movl	%eax, -812(%rbp)
 3267      FFFF
 810:main.c        **** 							CHECK_STATUS(pStatus, pStatus, cleanup);
 3268              		.loc 1 810 0
 3269 271c 83BDD4FC 		cmpl	$0, -812(%rbp)
 3269      FFFF00
 3270 2723 747A     		je	.L179
 3271              		.loc 1 810 0 is_stmt 0 discriminator 1
 3272 2725 8B85D4FC 		movl	-812(%rbp), %eax
 3272      FFFF
 3273 272b 898578FC 		movl	%eax, -904(%rbp)
 3273      FFFF
 3274              	.LBE22:
 801:main.c        **** 						fStatus = flIsFPGARunning(handle, &isRunning, &error);
 3275              		.loc 1 801 0 is_stmt 1 discriminator 1
 3276 2731 E9B21E00 		jmp	.L131
 3276      00
 3277              	.L177:
 811:main.c        **** 						} else {
 812:main.c        **** 							fprintf(stderr, "The FPGALink device at %s is not ready to talk - did you forget --program?\
 3278              		.loc 1 812 0
 3279 2736 488B0500 		movq	stderr(%rip), %rax
 3279      000000
 3280 273d 488B95D0 		movq	-560(%rbp), %rdx
 3280      FDFFFF
 3281 2744 BE000000 		movl	$.LC128, %esi
 3281      00
 3282 2749 4889C7   		movq	%rax, %rdi
 3283 274c B8000000 		movl	$0, %eax
 3283      00
 3284 2751 E8000000 		call	fprintf
 3284      00
 813:main.c        **** 							FAIL(FLP_ARGS, cleanup);
 3285              		.loc 1 813 0
 3286 2756 C78578FC 		movl	$12, -904(%rbp)
 3286      FFFF0C00 
 3286      0000
 3287 2760 90       		nop
 3288 2761 E9821E00 		jmp	.L131
 3288      00
 3289              	.L173:
 3290              	.LBE21:
 814:main.c        **** 						}
 815:main.c        **** 					} else {
 816:main.c        **** 						fprintf(stderr, "Action requested but device at %s does not support CommFPGA\n", vp);
 3291              		.loc 1 816 0
 3292 2766 488B0500 		movq	stderr(%rip), %rax
 3292      000000
 3293 276d 488B95D0 		movq	-560(%rbp), %rdx
 3293      FDFFFF
 3294 2774 BE000000 		movl	$.LC129, %esi
 3294      00
 3295 2779 4889C7   		movq	%rax, %rdi
 3296 277c B8000000 		movl	$0, %eax
 3296      00
 3297 2781 E8000000 		call	fprintf
 3297      00
 817:main.c        **** 						FAIL(FLP_ARGS, cleanup);
 3298              		.loc 1 817 0
 3299 2786 C78578FC 		movl	$12, -904(%rbp)
 3299      FFFF0C00 
 3299      0000
 3300 2790 E9531E00 		jmp	.L131
 3300      00
 3301              	.L172:
 818:main.c        **** 					}
 819:main.c        **** 				}
 820:main.c        **** 				else{
 821:main.c        **** 					checkstart=0;
 3302              		.loc 1 821 0
 3303 2795 C7859CFC 		movl	$0, -868(%rbp)
 3303      FFFF0000 
 3303      0000
 3304              	.L179:
 822:main.c        **** 				}
 823:main.c        **** 				// printf("Sending coordinates to fpga %s...\n", vp);
 824:main.c        **** 				// int a,b,c,d,e;
 825:main.c        **** 				FILE *fptr1;
 826:main.c        **** 				// int X=0,Y=0,Track_OK[8],Track_exists[8],Next_Signal[8];
 827:main.c        **** 				fptr1 = fopen("coordinate_enc.dat","r");
 3305              		.loc 1 827 0
 3306 279f BE000000 		movl	$.LC81, %esi
 3306      00
 3307 27a4 BF000000 		movl	$.LC127, %edi
 3307      00
 3308 27a9 E8000000 		call	fopen
 3308      00
 3309 27ae 48898528 		movq	%rax, -472(%rbp)
 3309      FEFFFF
 828:main.c        **** 				char ch;
 829:main.c        **** 				long inp=0;
 3310              		.loc 1 829 0
 3311 27b5 48C78508 		movq	$0, -760(%rbp)
 3311      FDFFFF00 
 3311      000000
 830:main.c        **** 				printf("Encrypted input: ");
 3312              		.loc 1 830 0
 3313 27c0 BF000000 		movl	$.LC130, %edi
 3313      00
 3314 27c5 B8000000 		movl	$0, %eax
 3314      00
 3315 27ca E8000000 		call	printf
 3315      00
 831:main.c        **** 				while((ch=fgetc(fptr1))!=EOF) {
 3316              		.loc 1 831 0
 3317 27cf EB61     		jmp	.L181
 3318              	.L184:
 3319              	.LBB23:
 832:main.c        **** 					int x;
 833:main.c        **** 					if ((int)ch < 0){
 3320              		.loc 1 833 0
 3321 27d1 80BD67FC 		cmpb	$0, -921(%rbp)
 3321      FFFF00
 3322 27d8 7914     		jns	.L182
 834:main.c        **** 						x = (int)ch + 256;
 3323              		.loc 1 834 0
 3324 27da 0FBE8567 		movsbl	-921(%rbp), %eax
 3324      FCFFFF
 3325 27e1 05000100 		addl	$256, %eax
 3325      00
 3326 27e6 8985A4FC 		movl	%eax, -860(%rbp)
 3326      FFFF
 3327 27ec EB0D     		jmp	.L183
 3328              	.L182:
 835:main.c        **** 					}
 836:main.c        **** 					else{
 837:main.c        **** 						x = (int)ch;
 3329              		.loc 1 837 0
 3330 27ee 0FBE8567 		movsbl	-921(%rbp), %eax
 3330      FCFFFF
 3331 27f5 8985A4FC 		movl	%eax, -860(%rbp)
 3331      FFFF
 3332              	.L183:
 838:main.c        **** 					}
 839:main.c        **** 					inp = inp * 16 * 16 + x;
 3333              		.loc 1 839 0
 3334 27fb 488B8508 		movq	-760(%rbp), %rax
 3334      FDFFFF
 3335 2802 48C1E008 		salq	$8, %rax
 3336 2806 4889C2   		movq	%rax, %rdx
 3337 2809 8B85A4FC 		movl	-860(%rbp), %eax
 3337      FFFF
 3338 280f 4898     		cltq
 3339 2811 4801D0   		addq	%rdx, %rax
 3340 2814 48898508 		movq	%rax, -760(%rbp)
 3340      FDFFFF
 840:main.c        **** 					printf("%X",x);
 3341              		.loc 1 840 0
 3342 281b 8B85A4FC 		movl	-860(%rbp), %eax
 3342      FFFF
 3343 2821 89C6     		movl	%eax, %esi
 3344 2823 BF000000 		movl	$.LC131, %edi
 3344      00
 3345 2828 B8000000 		movl	$0, %eax
 3345      00
 3346 282d E8000000 		call	printf
 3346      00
 3347              	.L181:
 3348              	.LBE23:
 831:main.c        **** 					int x;
 3349              		.loc 1 831 0
 3350 2832 488B8528 		movq	-472(%rbp), %rax
 3350      FEFFFF
 3351 2839 4889C7   		movq	%rax, %rdi
 3352 283c E8000000 		call	fgetc
 3352      00
 3353 2841 888567FC 		movb	%al, -921(%rbp)
 3353      FFFF
 3354 2847 80BD67FC 		cmpb	$-1, -921(%rbp)
 3354      FFFFFF
 3355 284e 7581     		jne	.L184
 841:main.c        **** 				}
 842:main.c        **** 				printf("\n");
 3356              		.loc 1 842 0
 3357 2850 BF0A0000 		movl	$10, %edi
 3357      00
 3358 2855 E8000000 		call	putchar
 3358      00
 843:main.c        **** 				fclose(fptr1);
 3359              		.loc 1 843 0
 3360 285a 488B8528 		movq	-472(%rbp), %rax
 3360      FEFFFF
 3361 2861 4889C7   		movq	%rax, %rdi
 3362 2864 E8000000 		call	fclose
 3362      00
 844:main.c        **** 				long decrypted_inp=decrypter(inp,Key);
 3363              		.loc 1 844 0
 3364 2869 488B1500 		movq	Key(%rip), %rdx
 3364      000000
 3365 2870 488B8508 		movq	-760(%rbp), %rax
 3365      FDFFFF
 3366 2877 4889D6   		movq	%rdx, %rsi
 3367 287a 4889C7   		movq	%rax, %rdi
 3368 287d E8000000 		call	decrypter
 3368      00
 3369 2882 48898530 		movq	%rax, -464(%rbp)
 3369      FEFFFF
 845:main.c        **** 				Y=decrypted_inp%16;
 3370              		.loc 1 845 0
 3371 2889 488B8530 		movq	-464(%rbp), %rax
 3371      FEFFFF
 3372 2890 4899     		cqto
 3373 2892 48C1EA3C 		shrq	$60, %rdx
 3374 2896 4801D0   		addq	%rdx, %rax
 3375 2899 83E00F   		andl	$15, %eax
 3376 289c 4829D0   		subq	%rdx, %rax
 3377 289f 898598FC 		movl	%eax, -872(%rbp)
 3377      FFFF
 846:main.c        **** 				X=decrypted_inp/16;
 3378              		.loc 1 846 0
 3379 28a5 488B8530 		movq	-464(%rbp), %rax
 3379      FEFFFF
 3380 28ac 488D500F 		leaq	15(%rax), %rdx
 3381 28b0 4885C0   		testq	%rax, %rax
 3382 28b3 480F48C2 		cmovs	%rdx, %rax
 3383 28b7 48C1F804 		sarq	$4, %rax
 3384 28bb 898594FC 		movl	%eax, -876(%rbp)
 3384      FFFF
 847:main.c        **** 				printf("Coordinates Received: %X,%X\n",X,Y);
 3385              		.loc 1 847 0
 3386 28c1 8B9598FC 		movl	-872(%rbp), %edx
 3386      FFFF
 3387 28c7 8B8594FC 		movl	-876(%rbp), %eax
 3387      FFFF
 3388 28cd 89C6     		movl	%eax, %esi
 3389 28cf BF000000 		movl	$.LC132, %edi
 3389      00
 3390 28d4 B8000000 		movl	$0, %eax
 3390      00
 3391 28d9 E8000000 		call	printf
 3391      00
 848:main.c        **** 				//////////////////////////////Send back coordinates
 849:main.c        **** 				printf("Sending coordinates to fpga %s...\n", vp);
 3392              		.loc 1 849 0
 3393 28de 488B85D0 		movq	-560(%rbp), %rax
 3393      FDFFFF
 3394 28e5 4889C6   		movq	%rax, %rsi
 3395 28e8 BF000000 		movl	$.LC133, %edi
 3395      00
 3396 28ed B8000000 		movl	$0, %eax
 3396      00
 3397 28f2 E8000000 		call	printf
 3397      00
 850:main.c        **** 				if ( isCommCapable ) {
 3398              		.loc 1 850 0
 3399 28f7 80BD63FC 		cmpb	$0, -925(%rbp)
 3399      FFFF00
 3400 28fe 0F845001 		je	.L185
 3400      0000
 3401              	.LBB24:
 851:main.c        **** 					uint8 isRunning;
 852:main.c        **** 					fStatus = flSelectConduit(handle, conduit, &error);
 3402              		.loc 1 852 0
 3403 2904 0FB68D61 		movzbl	-927(%rbp), %ecx
 3403      FCFFFF
 3404 290b 488B85E0 		movq	-800(%rbp), %rax
 3404      FCFFFF
 3405 2912 488D95E8 		leaq	-792(%rbp), %rdx
 3405      FCFFFF
 3406 2919 89CE     		movl	%ecx, %esi
 3407 291b 4889C7   		movq	%rax, %rdi
 3408 291e E8000000 		call	flSelectConduit
 3408      00
 3409 2923 89857CFC 		movl	%eax, -900(%rbp)
 3409      FFFF
 853:main.c        **** 					CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3410              		.loc 1 853 0
 3411 2929 83BD7CFC 		cmpl	$0, -900(%rbp)
 3411      FFFF00
 3412 2930 740F     		je	.L186
 3413              		.loc 1 853 0 is_stmt 0 discriminator 1
 3414 2932 C78578FC 		movl	$1, -904(%rbp)
 3414      FFFF0100 
 3414      0000
 3415 293c E9A71C00 		jmp	.L131
 3415      00
 3416              	.L186:
 854:main.c        **** 					fStatus = flIsFPGARunning(handle, &isRunning, &error);
 3417              		.loc 1 854 0 is_stmt 1
 3418 2941 488B85E0 		movq	-800(%rbp), %rax
 3418      FCFFFF
 3419 2948 488D95E8 		leaq	-792(%rbp), %rdx
 3419      FCFFFF
 3420 294f 488D8DF8 		leaq	-776(%rbp), %rcx
 3420      FCFFFF
 3421 2956 4889CE   		movq	%rcx, %rsi
 3422 2959 4889C7   		movq	%rax, %rdi
 3423 295c E8000000 		call	flIsFPGARunning
 3423      00
 3424 2961 89857CFC 		movl	%eax, -900(%rbp)
 3424      FFFF
 855:main.c        **** 					CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3425              		.loc 1 855 0
 3426 2967 83BD7CFC 		cmpl	$0, -900(%rbp)
 3426      FFFF00
 3427 296e 740F     		je	.L188
 3428              		.loc 1 855 0 is_stmt 0 discriminator 1
 3429 2970 C78578FC 		movl	$1, -904(%rbp)
 3429      FFFF0100 
 3429      0000
 3430 297a E9691C00 		jmp	.L131
 3430      00
 3431              	.L188:
 856:main.c        **** 					if ( isRunning ) {
 3432              		.loc 1 856 0 is_stmt 1
 3433 297f 0FB685F8 		movzbl	-776(%rbp), %eax
 3433      FCFFFF
 3434 2986 84C0     		testb	%al, %al
 3435 2988 0F849600 		je	.L189
 3435      0000
 3436              	.LBB25:
 857:main.c        **** 						char str1[40]=" ";
 3437              		.loc 1 857 0
 3438 298e 48C745C0 		movq	$32, -64(%rbp)
 3438      20000000 
 3439 2996 48C745C8 		movq	$0, -56(%rbp)
 3439      00000000 
 3440 299e 48C745D0 		movq	$0, -48(%rbp)
 3440      00000000 
 3441 29a6 48C745D8 		movq	$0, -40(%rbp)
 3441      00000000 
 3442 29ae 48C745E0 		movq	$0, -32(%rbp)
 3442      00000000 
 858:main.c        **** 						send_chan(X*16+Y,str1,2*i+1);
 3443              		.loc 1 858 0
 3444 29b6 8B85A0FC 		movl	-864(%rbp), %eax
 3444      FFFF
 3445 29bc 01C0     		addl	%eax, %eax
 3446 29be 8D5001   		leal	1(%rax), %edx
 3447 29c1 8B8594FC 		movl	-876(%rbp), %eax
 3447      FFFF
 3448 29c7 C1E004   		sall	$4, %eax
 3449 29ca 89C1     		movl	%eax, %ecx
 3450 29cc 8B8598FC 		movl	-872(%rbp), %eax
 3450      FFFF
 3451 29d2 01C8     		addl	%ecx, %eax
 3452 29d4 4898     		cltq
 3453 29d6 488D4DC0 		leaq	-64(%rbp), %rcx
 3454 29da 4889CE   		movq	%rcx, %rsi
 3455 29dd 4889C7   		movq	%rax, %rdi
 3456 29e0 E8000000 		call	send_chan
 3456      00
 859:main.c        **** 						// printf("%s\n",str1);
 860:main.c        **** 						pStatus = parseLine(handle, str1, &error, UINT_MAX);
 3457              		.loc 1 860 0
 3458 29e5 488B85E0 		movq	-800(%rbp), %rax
 3458      FCFFFF
 3459 29ec 488D95E8 		leaq	-792(%rbp), %rdx
 3459      FCFFFF
 3460 29f3 488D75C0 		leaq	-64(%rbp), %rsi
 3461 29f7 B9FFFFFF 		movl	$4294967295, %ecx
 3461      FF
 3462 29fc 4889C7   		movq	%rax, %rdi
 3463 29ff E83FDCFF 		call	parseLine
 3463      FF
 3464 2a04 8985D4FC 		movl	%eax, -812(%rbp)
 3464      FFFF
 861:main.c        **** 						CHECK_STATUS(pStatus, pStatus, cleanup);
 3465              		.loc 1 861 0
 3466 2a0a 83BDD4FC 		cmpl	$0, -812(%rbp)
 3466      FFFF00
 3467 2a11 7470     		je	.L191
 3468              		.loc 1 861 0 is_stmt 0 discriminator 1
 3469 2a13 8B85D4FC 		movl	-812(%rbp), %eax
 3469      FFFF
 3470 2a19 898578FC 		movl	%eax, -904(%rbp)
 3470      FFFF
 3471              	.LBE25:
 853:main.c        **** 					fStatus = flIsFPGARunning(handle, &isRunning, &error);
 3472              		.loc 1 853 0 is_stmt 1 discriminator 1
 3473 2a1f E9C41B00 		jmp	.L131
 3473      00
 3474              	.L189:
 862:main.c        **** 					} else {
 863:main.c        **** 						fprintf(stderr, "The FPGALink device at %s is not ready to talk - did you forget --program?\n
 3475              		.loc 1 863 0
 3476 2a24 488B0500 		movq	stderr(%rip), %rax
 3476      000000
 3477 2a2b 488B95D0 		movq	-560(%rbp), %rdx
 3477      FDFFFF
 3478 2a32 BE000000 		movl	$.LC128, %esi
 3478      00
 3479 2a37 4889C7   		movq	%rax, %rdi
 3480 2a3a B8000000 		movl	$0, %eax
 3480      00
 3481 2a3f E8000000 		call	fprintf
 3481      00
 864:main.c        **** 						FAIL(FLP_ARGS, cleanup);
 3482              		.loc 1 864 0
 3483 2a44 C78578FC 		movl	$12, -904(%rbp)
 3483      FFFF0C00 
 3483      0000
 3484 2a4e 90       		nop
 3485 2a4f E9941B00 		jmp	.L131
 3485      00
 3486              	.L185:
 3487              	.LBE24:
 865:main.c        **** 					}
 866:main.c        **** 				} else {
 867:main.c        **** 					fprintf(stderr, "Action requested but device at %s does not support CommFPGA\n", vp);
 3488              		.loc 1 867 0
 3489 2a54 488B0500 		movq	stderr(%rip), %rax
 3489      000000
 3490 2a5b 488B95D0 		movq	-560(%rbp), %rdx
 3490      FDFFFF
 3491 2a62 BE000000 		movl	$.LC129, %esi
 3491      00
 3492 2a67 4889C7   		movq	%rax, %rdi
 3493 2a6a B8000000 		movl	$0, %eax
 3493      00
 3494 2a6f E8000000 		call	fprintf
 3494      00
 868:main.c        **** 					FAIL(FLP_ARGS, cleanup);
 3495              		.loc 1 868 0
 3496 2a74 C78578FC 		movl	$12, -904(%rbp)
 3496      FFFF0C00 
 3496      0000
 3497 2a7e E9651B00 		jmp	.L131
 3497      00
 3498              	.L191:
 869:main.c        **** 				}
 870:main.c        **** 						
 871:main.c        **** 				//////////////////////////////receive ACK1
 872:main.c        **** 				int qwerty=0;
 3499              		.loc 1 872 0
 3500 2a83 C785A8FC 		movl	$0, -856(%rbp)
 3500      FFFF0000 
 3500      0000
 873:main.c        **** 				for(;qwerty<2;qwerty++){
 3501              		.loc 1 873 0
 3502 2a8d E9B30200 		jmp	.L192
 3502      00
 3503              	.L206:
 3504              	.LBB26:
 874:main.c        **** 					printf("Receiving ACK1 %s...\n", vp);
 3505              		.loc 1 874 0
 3506 2a92 488B85D0 		movq	-560(%rbp), %rax
 3506      FDFFFF
 3507 2a99 4889C6   		movq	%rax, %rsi
 3508 2a9c BF000000 		movl	$.LC134, %edi
 3508      00
 3509 2aa1 B8000000 		movl	$0, %eax
 3509      00
 3510 2aa6 E8000000 		call	printf
 3510      00
 875:main.c        **** 					if ( isCommCapable ) {
 3511              		.loc 1 875 0
 3512 2aab 80BD63FC 		cmpb	$0, -925(%rbp)
 3512      FFFF00
 3513 2ab2 0F843B01 		je	.L193
 3513      0000
 3514              	.LBB27:
 876:main.c        **** 						uint8 isRunning;
 877:main.c        **** 						fStatus = flSelectConduit(handle, conduit, &error);
 3515              		.loc 1 877 0
 3516 2ab8 0FB68D61 		movzbl	-927(%rbp), %ecx
 3516      FCFFFF
 3517 2abf 488B85E0 		movq	-800(%rbp), %rax
 3517      FCFFFF
 3518 2ac6 488D95E8 		leaq	-792(%rbp), %rdx
 3518      FCFFFF
 3519 2acd 89CE     		movl	%ecx, %esi
 3520 2acf 4889C7   		movq	%rax, %rdi
 3521 2ad2 E8000000 		call	flSelectConduit
 3521      00
 3522 2ad7 89857CFC 		movl	%eax, -900(%rbp)
 3522      FFFF
 878:main.c        **** 						CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3523              		.loc 1 878 0
 3524 2add 83BD7CFC 		cmpl	$0, -900(%rbp)
 3524      FFFF00
 3525 2ae4 740F     		je	.L194
 3526              		.loc 1 878 0 is_stmt 0 discriminator 1
 3527 2ae6 C78578FC 		movl	$1, -904(%rbp)
 3527      FFFF0100 
 3527      0000
 3528 2af0 E9F31A00 		jmp	.L131
 3528      00
 3529              	.L194:
 879:main.c        **** 						fStatus = flIsFPGARunning(handle, &isRunning, &error);
 3530              		.loc 1 879 0 is_stmt 1
 3531 2af5 488B85E0 		movq	-800(%rbp), %rax
 3531      FCFFFF
 3532 2afc 488D95E8 		leaq	-792(%rbp), %rdx
 3532      FCFFFF
 3533 2b03 488D8DF8 		leaq	-776(%rbp), %rcx
 3533      FCFFFF
 3534 2b0a 4889CE   		movq	%rcx, %rsi
 3535 2b0d 4889C7   		movq	%rax, %rdi
 3536 2b10 E8000000 		call	flIsFPGARunning
 3536      00
 3537 2b15 89857CFC 		movl	%eax, -900(%rbp)
 3537      FFFF
 880:main.c        **** 						CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3538              		.loc 1 880 0
 3539 2b1b 83BD7CFC 		cmpl	$0, -900(%rbp)
 3539      FFFF00
 3540 2b22 740F     		je	.L196
 3541              		.loc 1 880 0 is_stmt 0 discriminator 1
 3542 2b24 C78578FC 		movl	$1, -904(%rbp)
 3542      FFFF0100 
 3542      0000
 3543 2b2e E9B51A00 		jmp	.L131
 3543      00
 3544              	.L196:
 881:main.c        **** 						if ( isRunning ) {
 3545              		.loc 1 881 0 is_stmt 1
 3546 2b33 0FB685F8 		movzbl	-776(%rbp), %eax
 3546      FCFFFF
 3547 2b3a 84C0     		testb	%al, %al
 3548 2b3c 0F848100 		je	.L197
 3548      0000
 3549              	.LBB28:
 882:main.c        **** 							char str1[40]=" ";
 3550              		.loc 1 882 0
 3551 2b42 48C745C0 		movq	$32, -64(%rbp)
 3551      20000000 
 3552 2b4a 48C745C8 		movq	$0, -56(%rbp)
 3552      00000000 
 3553 2b52 48C745D0 		movq	$0, -48(%rbp)
 3553      00000000 
 3554 2b5a 48C745D8 		movq	$0, -40(%rbp)
 3554      00000000 
 3555 2b62 48C745E0 		movq	$0, -32(%rbp)
 3555      00000000 
 883:main.c        **** 							read_chan("ACK.dat",str1,2*i);
 3556              		.loc 1 883 0
 3557 2b6a 8B85A0FC 		movl	-864(%rbp), %eax
 3557      FFFF
 3558 2b70 8D1400   		leal	(%rax,%rax), %edx
 3559 2b73 488D45C0 		leaq	-64(%rbp), %rax
 3560 2b77 4889C6   		movq	%rax, %rsi
 3561 2b7a BF000000 		movl	$.LC135, %edi
 3561      00
 3562 2b7f E8000000 		call	read_chan
 3562      00
 884:main.c        **** 							pStatus = parseLine(handle, str1, &error, UINT_MAX);
 3563              		.loc 1 884 0
 3564 2b84 488B85E0 		movq	-800(%rbp), %rax
 3564      FCFFFF
 3565 2b8b 488D95E8 		leaq	-792(%rbp), %rdx
 3565      FCFFFF
 3566 2b92 488D75C0 		leaq	-64(%rbp), %rsi
 3567 2b96 B9FFFFFF 		movl	$4294967295, %ecx
 3567      FF
 3568 2b9b 4889C7   		movq	%rax, %rdi
 3569 2b9e E8A0DAFF 		call	parseLine
 3569      FF
 3570 2ba3 8985D4FC 		movl	%eax, -812(%rbp)
 3570      FFFF
 885:main.c        **** 							CHECK_STATUS(pStatus, pStatus, cleanup);
 3571              		.loc 1 885 0
 3572 2ba9 83BDD4FC 		cmpl	$0, -812(%rbp)
 3572      FFFF00
 3573 2bb0 7470     		je	.L199
 3574              		.loc 1 885 0 is_stmt 0 discriminator 1
 3575 2bb2 8B85D4FC 		movl	-812(%rbp), %eax
 3575      FFFF
 3576 2bb8 898578FC 		movl	%eax, -904(%rbp)
 3576      FFFF
 3577              	.LBE28:
 878:main.c        **** 						fStatus = flIsFPGARunning(handle, &isRunning, &error);
 3578              		.loc 1 878 0 is_stmt 1 discriminator 1
 3579 2bbe E9251A00 		jmp	.L131
 3579      00
 3580              	.L197:
 886:main.c        **** 						} else {
 887:main.c        **** 							fprintf(stderr, "The FPGALink device at %s is not ready to talk - did you forget --program?\
 3581              		.loc 1 887 0
 3582 2bc3 488B0500 		movq	stderr(%rip), %rax
 3582      000000
 3583 2bca 488B95D0 		movq	-560(%rbp), %rdx
 3583      FDFFFF
 3584 2bd1 BE000000 		movl	$.LC128, %esi
 3584      00
 3585 2bd6 4889C7   		movq	%rax, %rdi
 3586 2bd9 B8000000 		movl	$0, %eax
 3586      00
 3587 2bde E8000000 		call	fprintf
 3587      00
 888:main.c        **** 							FAIL(FLP_ARGS, cleanup);
 3588              		.loc 1 888 0
 3589 2be3 C78578FC 		movl	$12, -904(%rbp)
 3589      FFFF0C00 
 3589      0000
 3590 2bed 90       		nop
 3591 2bee E9F51900 		jmp	.L131
 3591      00
 3592              	.L193:
 3593              	.LBE27:
 889:main.c        **** 						}
 890:main.c        **** 					} else {
 891:main.c        **** 						fprintf(stderr, "Action requested but device at %s does not support CommFPGA\n", vp);
 3594              		.loc 1 891 0
 3595 2bf3 488B0500 		movq	stderr(%rip), %rax
 3595      000000
 3596 2bfa 488B95D0 		movq	-560(%rbp), %rdx
 3596      FDFFFF
 3597 2c01 BE000000 		movl	$.LC129, %esi
 3597      00
 3598 2c06 4889C7   		movq	%rax, %rdi
 3599 2c09 B8000000 		movl	$0, %eax
 3599      00
 3600 2c0e E8000000 		call	fprintf
 3600      00
 892:main.c        **** 						FAIL(FLP_ARGS, cleanup);
 3601              		.loc 1 892 0
 3602 2c13 C78578FC 		movl	$12, -904(%rbp)
 3602      FFFF0C00 
 3602      0000
 3603 2c1d E9C61900 		jmp	.L131
 3603      00
 3604              	.L199:
 893:main.c        **** 					}
 894:main.c        **** 					//////////////////////////////////
 895:main.c        **** 					FILE *fptrAck;
 896:main.c        **** 					// int X=0,Y=0,Track_OK[8],Track_exists[8],Next_Signal[8];
 897:main.c        **** 					fptrAck = fopen("ACK.dat","r");
 3605              		.loc 1 897 0
 3606 2c22 BE000000 		movl	$.LC81, %esi
 3606      00
 3607 2c27 BF000000 		movl	$.LC135, %edi
 3607      00
 3608 2c2c E8000000 		call	fopen
 3608      00
 3609 2c31 48898538 		movq	%rax, -456(%rbp)
 3609      FEFFFF
 898:main.c        **** 					inp=0;
 3610              		.loc 1 898 0
 3611 2c38 48C78508 		movq	$0, -760(%rbp)
 3611      FDFFFF00 
 3611      000000
 899:main.c        **** 					printf("Encrypted Ack: ");
 3612              		.loc 1 899 0
 3613 2c43 BF000000 		movl	$.LC136, %edi
 3613      00
 3614 2c48 B8000000 		movl	$0, %eax
 3614      00
 3615 2c4d E8000000 		call	printf
 3615      00
 900:main.c        **** 					while((ch=fgetc(fptrAck))!=EOF) {
 3616              		.loc 1 900 0
 3617 2c52 EB61     		jmp	.L200
 3618              	.L203:
 3619              	.LBB29:
 901:main.c        **** 						int x;
 902:main.c        **** 						if ((int)ch < 0){
 3620              		.loc 1 902 0
 3621 2c54 80BD67FC 		cmpb	$0, -921(%rbp)
 3621      FFFF00
 3622 2c5b 7914     		jns	.L201
 903:main.c        **** 							x = (int)ch + 256;
 3623              		.loc 1 903 0
 3624 2c5d 0FBE8567 		movsbl	-921(%rbp), %eax
 3624      FCFFFF
 3625 2c64 05000100 		addl	$256, %eax
 3625      00
 3626 2c69 8985ACFC 		movl	%eax, -852(%rbp)
 3626      FFFF
 3627 2c6f EB0D     		jmp	.L202
 3628              	.L201:
 904:main.c        **** 						}
 905:main.c        **** 						else{
 906:main.c        **** 							x = (int)ch;
 3629              		.loc 1 906 0
 3630 2c71 0FBE8567 		movsbl	-921(%rbp), %eax
 3630      FCFFFF
 3631 2c78 8985ACFC 		movl	%eax, -852(%rbp)
 3631      FFFF
 3632              	.L202:
 907:main.c        **** 						}
 908:main.c        **** 						inp = inp * 16 * 16 + x;
 3633              		.loc 1 908 0
 3634 2c7e 488B8508 		movq	-760(%rbp), %rax
 3634      FDFFFF
 3635 2c85 48C1E008 		salq	$8, %rax
 3636 2c89 4889C2   		movq	%rax, %rdx
 3637 2c8c 8B85ACFC 		movl	-852(%rbp), %eax
 3637      FFFF
 3638 2c92 4898     		cltq
 3639 2c94 4801D0   		addq	%rdx, %rax
 3640 2c97 48898508 		movq	%rax, -760(%rbp)
 3640      FDFFFF
 909:main.c        **** 						printf("%X",x);
 3641              		.loc 1 909 0
 3642 2c9e 8B85ACFC 		movl	-852(%rbp), %eax
 3642      FFFF
 3643 2ca4 89C6     		movl	%eax, %esi
 3644 2ca6 BF000000 		movl	$.LC131, %edi
 3644      00
 3645 2cab B8000000 		movl	$0, %eax
 3645      00
 3646 2cb0 E8000000 		call	printf
 3646      00
 3647              	.L200:
 3648              	.LBE29:
 900:main.c        **** 						int x;
 3649              		.loc 1 900 0
 3650 2cb5 488B8538 		movq	-456(%rbp), %rax
 3650      FEFFFF
 3651 2cbc 4889C7   		movq	%rax, %rdi
 3652 2cbf E8000000 		call	fgetc
 3652      00
 3653 2cc4 888567FC 		movb	%al, -921(%rbp)
 3653      FFFF
 3654 2cca 80BD67FC 		cmpb	$-1, -921(%rbp)
 3654      FFFFFF
 3655 2cd1 7581     		jne	.L203
 910:main.c        **** 					}
 911:main.c        **** 					printf("\n");
 3656              		.loc 1 911 0
 3657 2cd3 BF0A0000 		movl	$10, %edi
 3657      00
 3658 2cd8 E8000000 		call	putchar
 3658      00
 912:main.c        **** 					fclose(fptrAck);
 3659              		.loc 1 912 0
 3660 2cdd 488B8538 		movq	-456(%rbp), %rax
 3660      FEFFFF
 3661 2ce4 4889C7   		movq	%rax, %rdi
 3662 2ce7 E8000000 		call	fclose
 3662      00
 913:main.c        **** 					decrypted_inp=decrypter(inp,Key);
 3663              		.loc 1 913 0
 3664 2cec 488B1500 		movq	Key(%rip), %rdx
 3664      000000
 3665 2cf3 488B8508 		movq	-760(%rbp), %rax
 3665      FDFFFF
 3666 2cfa 4889D6   		movq	%rdx, %rsi
 3667 2cfd 4889C7   		movq	%rax, %rdi
 3668 2d00 E8000000 		call	decrypter
 3668      00
 3669 2d05 48898530 		movq	%rax, -464(%rbp)
 3669      FEFFFF
 914:main.c        **** 					// printf("dec%ld\n", decrypted_inp);
 915:main.c        **** 					if(decrypted_inp == Kack1){
 3670              		.loc 1 915 0
 3671 2d0c 488B0500 		movq	Kack1(%rip), %rax
 3671      000000
 3672 2d13 48398530 		cmpq	%rax, -464(%rbp)
 3672      FEFFFF
 3673 2d1a 7518     		jne	.L204
 916:main.c        **** 						// printf("1\n");
 917:main.c        **** 						DONE=1;
 3674              		.loc 1 917 0
 3675 2d1c C7858CFC 		movl	$1, -884(%rbp)
 3675      FFFF0100 
 3675      0000
 918:main.c        **** 						chan=i;
 3676              		.loc 1 918 0
 3677 2d26 8B85A0FC 		movl	-864(%rbp), %eax
 3677      FFFF
 3678 2d2c 898588FC 		movl	%eax, -888(%rbp)
 3678      FFFF
 919:main.c        **** 						break;
 3679              		.loc 1 919 0
 3680 2d32 EB1E     		jmp	.L205
 3681              	.L204:
 920:main.c        **** 					}
 921:main.c        **** 					else{
 922:main.c        **** 						sleep(5);
 3682              		.loc 1 922 0
 3683 2d34 BF050000 		movl	$5, %edi
 3683      00
 3684 2d39 E8000000 		call	sleep
 3684      00
 3685              	.LBE26:
 873:main.c        **** 					printf("Receiving ACK1 %s...\n", vp);
 3686              		.loc 1 873 0
 3687 2d3e 8385A8FC 		addl	$1, -856(%rbp)
 3687      FFFF01
 3688              	.L192:
 873:main.c        **** 					printf("Receiving ACK1 %s...\n", vp);
 3689              		.loc 1 873 0 is_stmt 0 discriminator 1
 3690 2d45 83BDA8FC 		cmpl	$1, -856(%rbp)
 3690      FFFF01
 3691 2d4c 0F8E40FD 		jle	.L206
 3691      FFFF
 3692              	.L205:
 923:main.c        **** 					}
 924:main.c        **** 				}
 925:main.c        **** 				if(qwerty==2){
 3693              		.loc 1 925 0 is_stmt 1
 3694 2d52 83BDA8FC 		cmpl	$2, -856(%rbp)
 3694      FFFF02
 3695 2d59 740B     		je	.L328
 926:main.c        **** 					continue;
 927:main.c        **** 				}
 928:main.c        **** 				if(DONE==1){
 3696              		.loc 1 928 0
 3697 2d5b 83BD8CFC 		cmpl	$1, -884(%rbp)
 3697      FFFF01
 3698 2d62 7437     		je	.L329
 3699 2d64 EB01     		jmp	.L208
 3700              	.L328:
 926:main.c        **** 					continue;
 3701              		.loc 1 926 0
 3702 2d66 90       		nop
 3703              	.L208:
 3704              	.LBE20:
 795:main.c        **** 				if(checkstart==0){
 3705              		.loc 1 795 0 discriminator 2
 3706 2d67 8B85A0FC 		movl	-864(%rbp), %eax
 3706      FFFF
 3707 2d6d 8D5001   		leal	1(%rax), %edx
 3708 2d70 89D0     		movl	%edx, %eax
 3709 2d72 C1F81F   		sarl	$31, %eax
 3710 2d75 C1E81A   		shrl	$26, %eax
 3711 2d78 01C2     		addl	%eax, %edx
 3712 2d7a 83E23F   		andl	$63, %edx
 3713 2d7d 29C2     		subl	%eax, %edx
 3714 2d7f 89D0     		movl	%edx, %eax
 3715 2d81 8985A0FC 		movl	%eax, -864(%rbp)
 3715      FFFF
 3716              	.L171:
 795:main.c        **** 				if(checkstart==0){
 3717              		.loc 1 795 0 is_stmt 0 discriminator 1
 3718 2d87 8B85A0FC 		movl	-864(%rbp), %eax
 3718      FFFF
 3719 2d8d 3B8590FC 		cmpl	-880(%rbp), %eax
 3719      FFFF
 3720 2d93 0F8E5FF8 		jle	.L210
 3720      FFFF
 3721 2d99 EB01     		jmp	.L209
 3722              	.L329:
 3723              	.LBB30:
 929:main.c        **** 					break;
 3724              		.loc 1 929 0 is_stmt 1
 3725 2d9b 90       		nop
 3726              	.L209:
 3727              	.LBE30:
 3728              	.LBE19:
 930:main.c        **** 				}
 931:main.c        **** 
 932:main.c        **** 			}
 933:main.c        **** 			//////////////////////////////////send ACK2
 934:main.c        **** 			printf("Sending ACK2 %s...\n", vp);
 3729              		.loc 1 934 0
 3730 2d9c 488B85D0 		movq	-560(%rbp), %rax
 3730      FDFFFF
 3731 2da3 4889C6   		movq	%rax, %rsi
 3732 2da6 BF000000 		movl	$.LC137, %edi
 3732      00
 3733 2dab B8000000 		movl	$0, %eax
 3733      00
 3734 2db0 E8000000 		call	printf
 3734      00
 935:main.c        **** 			if ( isCommCapable ) {
 3735              		.loc 1 935 0
 3736 2db5 80BD63FC 		cmpb	$0, -925(%rbp)
 3736      FFFF00
 3737 2dbc 0F844201 		je	.L211
 3737      0000
 3738              	.LBB31:
 936:main.c        **** 				uint8 isRunning;
 937:main.c        **** 				fStatus = flSelectConduit(handle, conduit, &error);
 3739              		.loc 1 937 0
 3740 2dc2 0FB68D61 		movzbl	-927(%rbp), %ecx
 3740      FCFFFF
 3741 2dc9 488B85E0 		movq	-800(%rbp), %rax
 3741      FCFFFF
 3742 2dd0 488D95E8 		leaq	-792(%rbp), %rdx
 3742      FCFFFF
 3743 2dd7 89CE     		movl	%ecx, %esi
 3744 2dd9 4889C7   		movq	%rax, %rdi
 3745 2ddc E8000000 		call	flSelectConduit
 3745      00
 3746 2de1 89857CFC 		movl	%eax, -900(%rbp)
 3746      FFFF
 938:main.c        **** 				CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3747              		.loc 1 938 0
 3748 2de7 83BD7CFC 		cmpl	$0, -900(%rbp)
 3748      FFFF00
 3749 2dee 740F     		je	.L212
 3750              		.loc 1 938 0 is_stmt 0 discriminator 1
 3751 2df0 C78578FC 		movl	$1, -904(%rbp)
 3751      FFFF0100 
 3751      0000
 3752 2dfa E9E91700 		jmp	.L131
 3752      00
 3753              	.L212:
 939:main.c        **** 				fStatus = flIsFPGARunning(handle, &isRunning, &error);
 3754              		.loc 1 939 0 is_stmt 1
 3755 2dff 488B85E0 		movq	-800(%rbp), %rax
 3755      FCFFFF
 3756 2e06 488D95E8 		leaq	-792(%rbp), %rdx
 3756      FCFFFF
 3757 2e0d 488D8DF8 		leaq	-776(%rbp), %rcx
 3757      FCFFFF
 3758 2e14 4889CE   		movq	%rcx, %rsi
 3759 2e17 4889C7   		movq	%rax, %rdi
 3760 2e1a E8000000 		call	flIsFPGARunning
 3760      00
 3761 2e1f 89857CFC 		movl	%eax, -900(%rbp)
 3761      FFFF
 940:main.c        **** 				CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3762              		.loc 1 940 0
 3763 2e25 83BD7CFC 		cmpl	$0, -900(%rbp)
 3763      FFFF00
 3764 2e2c 740F     		je	.L214
 3765              		.loc 1 940 0 is_stmt 0 discriminator 1
 3766 2e2e C78578FC 		movl	$1, -904(%rbp)
 3766      FFFF0100 
 3766      0000
 3767 2e38 E9AB1700 		jmp	.L131
 3767      00
 3768              	.L214:
 941:main.c        **** 				if ( isRunning ) {
 3769              		.loc 1 941 0 is_stmt 1
 3770 2e3d 0FB685F8 		movzbl	-776(%rbp), %eax
 3770      FCFFFF
 3771 2e44 84C0     		testb	%al, %al
 3772 2e46 0F848800 		je	.L215
 3772      0000
 3773              	.LBB32:
 942:main.c        **** 					char str1[40]=" ";
 3774              		.loc 1 942 0
 3775 2e4c 48C745C0 		movq	$32, -64(%rbp)
 3775      20000000 
 3776 2e54 48C745C8 		movq	$0, -56(%rbp)
 3776      00000000 
 3777 2e5c 48C745D0 		movq	$0, -48(%rbp)
 3777      00000000 
 3778 2e64 48C745D8 		movq	$0, -40(%rbp)
 3778      00000000 
 3779 2e6c 48C745E0 		movq	$0, -32(%rbp)
 3779      00000000 
 943:main.c        **** 					send_chan(Kack2,str1,2*chan+1);
 3780              		.loc 1 943 0
 3781 2e74 8B8588FC 		movl	-888(%rbp), %eax
 3781      FFFF
 3782 2e7a 01C0     		addl	%eax, %eax
 3783 2e7c 8D5001   		leal	1(%rax), %edx
 3784 2e7f 488B0500 		movq	Kack2(%rip), %rax
 3784      000000
 3785 2e86 488D4DC0 		leaq	-64(%rbp), %rcx
 3786 2e8a 4889CE   		movq	%rcx, %rsi
 3787 2e8d 4889C7   		movq	%rax, %rdi
 3788 2e90 E8000000 		call	send_chan
 3788      00
 944:main.c        **** 					pStatus = parseLine(handle, str1, &error, UINT_MAX);
 3789              		.loc 1 944 0
 3790 2e95 488B85E0 		movq	-800(%rbp), %rax
 3790      FCFFFF
 3791 2e9c 488D95E8 		leaq	-792(%rbp), %rdx
 3791      FCFFFF
 3792 2ea3 488D75C0 		leaq	-64(%rbp), %rsi
 3793 2ea7 B9FFFFFF 		movl	$4294967295, %ecx
 3793      FF
 3794 2eac 4889C7   		movq	%rax, %rdi
 3795 2eaf E88FD7FF 		call	parseLine
 3795      FF
 3796 2eb4 8985D4FC 		movl	%eax, -812(%rbp)
 3796      FFFF
 945:main.c        **** 					CHECK_STATUS(pStatus, pStatus, cleanup);
 3797              		.loc 1 945 0
 3798 2eba 83BDD4FC 		cmpl	$0, -812(%rbp)
 3798      FFFF00
 3799 2ec1 7470     		je	.L217
 3800              		.loc 1 945 0 is_stmt 0 discriminator 1
 3801 2ec3 8B85D4FC 		movl	-812(%rbp), %eax
 3801      FFFF
 3802 2ec9 898578FC 		movl	%eax, -904(%rbp)
 3802      FFFF
 3803              	.LBE32:
 938:main.c        **** 				fStatus = flIsFPGARunning(handle, &isRunning, &error);
 3804              		.loc 1 938 0 is_stmt 1 discriminator 1
 3805 2ecf E9141700 		jmp	.L131
 3805      00
 3806              	.L215:
 946:main.c        **** 				} else {
 947:main.c        **** 					fprintf(stderr, "The FPGALink device at %s is not ready to talk - did you forget --program?\n"
 3807              		.loc 1 947 0
 3808 2ed4 488B0500 		movq	stderr(%rip), %rax
 3808      000000
 3809 2edb 488B95D0 		movq	-560(%rbp), %rdx
 3809      FDFFFF
 3810 2ee2 BE000000 		movl	$.LC128, %esi
 3810      00
 3811 2ee7 4889C7   		movq	%rax, %rdi
 3812 2eea B8000000 		movl	$0, %eax
 3812      00
 3813 2eef E8000000 		call	fprintf
 3813      00
 948:main.c        **** 					FAIL(FLP_ARGS, cleanup);
 3814              		.loc 1 948 0
 3815 2ef4 C78578FC 		movl	$12, -904(%rbp)
 3815      FFFF0C00 
 3815      0000
 3816 2efe 90       		nop
 3817 2eff E9E41600 		jmp	.L131
 3817      00
 3818              	.L211:
 3819              	.LBE31:
 949:main.c        **** 				}
 950:main.c        **** 			} else {
 951:main.c        **** 				fprintf(stderr, "Action requested but device at %s does not support CommFPGA\n", vp);
 3820              		.loc 1 951 0
 3821 2f04 488B0500 		movq	stderr(%rip), %rax
 3821      000000
 3822 2f0b 488B95D0 		movq	-560(%rbp), %rdx
 3822      FDFFFF
 3823 2f12 BE000000 		movl	$.LC129, %esi
 3823      00
 3824 2f17 4889C7   		movq	%rax, %rdi
 3825 2f1a B8000000 		movl	$0, %eax
 3825      00
 3826 2f1f E8000000 		call	fprintf
 3826      00
 952:main.c        **** 				FAIL(FLP_ARGS, cleanup);
 3827              		.loc 1 952 0
 3828 2f24 C78578FC 		movl	$12, -904(%rbp)
 3828      FFFF0C00 
 3828      0000
 3829 2f2e E9B51600 		jmp	.L131
 3829      00
 3830              	.L217:
 3831              	.LBB33:
 953:main.c        **** 			}
 954:main.c        **** 			///////////////////////////////////Start sending data
 955:main.c        **** 			int a,b,c,d,e,Track_OK[8],Track_exists[8],Next_Signal[8];
 956:main.c        **** 			for(int i=0;i<8;i++){
 3832              		.loc 1 956 0
 3833 2f33 C785B0FC 		movl	$0, -848(%rbp)
 3833      FFFF0000 
 3833      0000
 3834 2f3d EB40     		jmp	.L218
 3835              	.L219:
 957:main.c        **** 				Track_OK[i]=0;
 3836              		.loc 1 957 0 discriminator 3
 3837 2f3f 8B85B0FC 		movl	-848(%rbp), %eax
 3837      FFFF
 3838 2f45 4898     		cltq
 3839 2f47 C7848550 		movl	$0, -432(%rbp,%rax,4)
 3839      FEFFFF00 
 3839      000000
 958:main.c        **** 				Track_exists[i]=0;
 3840              		.loc 1 958 0 discriminator 3
 3841 2f52 8B85B0FC 		movl	-848(%rbp), %eax
 3841      FFFF
 3842 2f58 4898     		cltq
 3843 2f5a C7848570 		movl	$0, -400(%rbp,%rax,4)
 3843      FEFFFF00 
 3843      000000
 959:main.c        **** 				Next_Signal[i]=0;
 3844              		.loc 1 959 0 discriminator 3
 3845 2f65 8B85B0FC 		movl	-848(%rbp), %eax
 3845      FFFF
 3846 2f6b 4898     		cltq
 3847 2f6d C7848590 		movl	$0, -368(%rbp,%rax,4)
 3847      FEFFFF00 
 3847      000000
 956:main.c        **** 				Track_OK[i]=0;
 3848              		.loc 1 956 0 discriminator 3
 3849 2f78 8385B0FC 		addl	$1, -848(%rbp)
 3849      FFFF01
 3850              	.L218:
 956:main.c        **** 				Track_OK[i]=0;
 3851              		.loc 1 956 0 is_stmt 0 discriminator 1
 3852 2f7f 83BDB0FC 		cmpl	$7, -848(%rbp)
 3852      FFFF07
 3853 2f86 7EB7     		jle	.L219
 3854              	.LBE33:
 960:main.c        **** 			}
 961:main.c        **** 			FILE *fptr;
 962:main.c        **** 			if ((fptr = fopen("track_data.csv","r")) == NULL){
 3855              		.loc 1 962 0 is_stmt 1
 3856 2f88 BE000000 		movl	$.LC81, %esi
 3856      00
 3857 2f8d BF000000 		movl	$.LC138, %edi
 3857      00
 3858 2f92 E8000000 		call	fopen
 3858      00
 3859 2f97 488985E0 		movq	%rax, -544(%rbp)
 3859      FDFFFF
 3860 2f9e 4883BDE0 		cmpq	$0, -544(%rbp)
 3860      FDFFFF00 
 3861 2fa6 7565     		jne	.L221
 963:main.c        **** 				printf("Error! opening file\n");
 3862              		.loc 1 963 0
 3863 2fa8 BF000000 		movl	$.LC139, %edi
 3863      00
 3864 2fad E8000000 		call	puts
 3864      00
 964:main.c        **** 			}
 965:main.c        **** 			while(fscanf(fptr,"%d,%d,%d,%d,%d", &a,&b,&c,&d,&e)!=EOF){
 3865              		.loc 1 965 0
 3866 2fb2 EB59     		jmp	.L221
 3867              	.L222:
 966:main.c        **** 				if(a==X && b==Y){
 3868              		.loc 1 966 0
 3869 2fb4 8B856CFC 		movl	-916(%rbp), %eax
 3869      FFFF
 3870 2fba 3B8594FC 		cmpl	-876(%rbp), %eax
 3870      FFFF
 3871 2fc0 754B     		jne	.L221
 3872              		.loc 1 966 0 is_stmt 0 discriminator 1
 3873 2fc2 8B8570FC 		movl	-912(%rbp), %eax
 3873      FFFF
 3874 2fc8 3B8598FC 		cmpl	-872(%rbp), %eax
 3874      FFFF
 3875 2fce 753D     		jne	.L221
 967:main.c        **** 					Track_exists[c]=1;
 3876              		.loc 1 967 0 is_stmt 1
 3877 2fd0 8B8574FC 		movl	-908(%rbp), %eax
 3877      FFFF
 3878 2fd6 4898     		cltq
 3879 2fd8 C7848570 		movl	$1, -400(%rbp,%rax,4)
 3879      FEFFFF01 
 3879      000000
 968:main.c        **** 					Next_Signal[c]=e;
 3880              		.loc 1 968 0
 3881 2fe3 8B8574FC 		movl	-908(%rbp), %eax
 3881      FFFF
 3882 2fe9 8B95F8FC 		movl	-776(%rbp), %edx
 3882      FFFF
 3883 2fef 4898     		cltq
 3884 2ff1 89948590 		movl	%edx, -368(%rbp,%rax,4)
 3884      FEFFFF
 969:main.c        **** 					Track_OK[c]=d;
 3885              		.loc 1 969 0
 3886 2ff8 8B8574FC 		movl	-908(%rbp), %eax
 3886      FFFF
 3887 2ffe 8B95F0FC 		movl	-784(%rbp), %edx
 3887      FFFF
 3888 3004 4898     		cltq
 3889 3006 89948550 		movl	%edx, -432(%rbp,%rax,4)
 3889      FEFFFF
 3890              	.L221:
 965:main.c        **** 				if(a==X && b==Y){
 3891              		.loc 1 965 0
 3892 300d 4C8D85F0 		leaq	-784(%rbp), %r8
 3892      FCFFFF
 3893 3014 488DBD74 		leaq	-908(%rbp), %rdi
 3893      FCFFFF
 3894 301b 488D8D70 		leaq	-912(%rbp), %rcx
 3894      FCFFFF
 3895 3022 488D956C 		leaq	-916(%rbp), %rdx
 3895      FCFFFF
 3896 3029 488B85E0 		movq	-544(%rbp), %rax
 3896      FDFFFF
 3897 3030 4883EC08 		subq	$8, %rsp
 3898 3034 488DB5F8 		leaq	-776(%rbp), %rsi
 3898      FCFFFF
 3899 303b 56       		pushq	%rsi
 3900 303c 4D89C1   		movq	%r8, %r9
 3901 303f 4989F8   		movq	%rdi, %r8
 3902 3042 BE000000 		movl	$.LC140, %esi
 3902      00
 3903 3047 4889C7   		movq	%rax, %rdi
 3904 304a B8000000 		movl	$0, %eax
 3904      00
 3905 304f E8000000 		call	__isoc99_fscanf
 3905      00
 3906 3054 4883C410 		addq	$16, %rsp
 3907 3058 83F8FF   		cmpl	$-1, %eax
 3908 305b 0F8553FF 		jne	.L222
 3908      FFFF
 970:main.c        **** 				}
 971:main.c        **** 			}
 972:main.c        **** 			fclose(fptr);
 3909              		.loc 1 972 0
 3910 3061 488B85E0 		movq	-544(%rbp), %rax
 3910      FDFFFF
 3911 3068 4889C7   		movq	%rax, %rdi
 3912 306b E8000000 		call	fclose
 3912      00
 3913              	.LBB34:
 973:main.c        **** 			long out[8];
 974:main.c        **** 			for(int i=0;i<8;i++){
 3914              		.loc 1 974 0
 3915 3070 C785B4FC 		movl	$0, -844(%rbp)
 3915      FFFF0000 
 3915      0000
 3916 307a E9860000 		jmp	.L223
 3916      00
 3917              	.L224:
 975:main.c        **** 				out[i]=0;
 3918              		.loc 1 975 0 discriminator 3
 3919 307f 8B85B4FC 		movl	-844(%rbp), %eax
 3919      FFFF
 3920 3085 4898     		cltq
 3921 3087 48C784C5 		movq	$0, -272(%rbp,%rax,8)
 3921      F0FEFFFF 
 3921      00000000 
 976:main.c        **** 				out[i]+=i*32+ Track_exists[i]*16+Track_OK[i]*8+Next_Signal[i];
 3922              		.loc 1 976 0 discriminator 3
 3923 3093 8B85B4FC 		movl	-844(%rbp), %eax
 3923      FFFF
 3924 3099 4898     		cltq
 3925 309b 488B94C5 		movq	-272(%rbp,%rax,8), %rdx
 3925      F0FEFFFF 
 3926 30a3 8B85B4FC 		movl	-844(%rbp), %eax
 3926      FFFF
 3927 30a9 8D0C00   		leal	(%rax,%rax), %ecx
 3928 30ac 8B85B4FC 		movl	-844(%rbp), %eax
 3928      FFFF
 3929 30b2 4898     		cltq
 3930 30b4 8B848570 		movl	-400(%rbp,%rax,4), %eax
 3930      FEFFFF
 3931 30bb 01C8     		addl	%ecx, %eax
 3932 30bd 8D0C00   		leal	(%rax,%rax), %ecx
 3933 30c0 8B85B4FC 		movl	-844(%rbp), %eax
 3933      FFFF
 3934 30c6 4898     		cltq
 3935 30c8 8B848550 		movl	-432(%rbp,%rax,4), %eax
 3935      FEFFFF
 3936 30cf 01C8     		addl	%ecx, %eax
 3937 30d1 8D0CC500 		leal	0(,%rax,8), %ecx
 3937      000000
 3938 30d8 8B85B4FC 		movl	-844(%rbp), %eax
 3938      FFFF
 3939 30de 4898     		cltq
 3940 30e0 8B848590 		movl	-368(%rbp,%rax,4), %eax
 3940      FEFFFF
 3941 30e7 01C8     		addl	%ecx, %eax
 3942 30e9 4898     		cltq
 3943 30eb 4801C2   		addq	%rax, %rdx
 3944 30ee 8B85B4FC 		movl	-844(%rbp), %eax
 3944      FFFF
 3945 30f4 4898     		cltq
 3946 30f6 488994C5 		movq	%rdx, -272(%rbp,%rax,8)
 3946      F0FEFFFF 
 974:main.c        **** 				out[i]=0;
 3947              		.loc 1 974 0 discriminator 3
 3948 30fe 8385B4FC 		addl	$1, -844(%rbp)
 3948      FFFF01
 3949              	.L223:
 974:main.c        **** 				out[i]=0;
 3950              		.loc 1 974 0 is_stmt 0 discriminator 1
 3951 3105 83BDB4FC 		cmpl	$7, -844(%rbp)
 3951      FFFF07
 3952 310c 0F8E6DFF 		jle	.L224
 3952      FFFF
 3953              	.LBE34:
 977:main.c        **** 			}
 978:main.c        **** 			long alpha=0,beta=0;
 3954              		.loc 1 978 0 is_stmt 1
 3955 3112 48C78510 		movq	$0, -752(%rbp)
 3955      FDFFFF00 
 3955      000000
 3956 311d 48C78518 		movq	$0, -744(%rbp)
 3956      FDFFFF00 
 3956      000000
 3957              	.LBB35:
 979:main.c        **** 			for(int i=0;i<4;i++){
 3958              		.loc 1 979 0
 3959 3128 C785B8FC 		movl	$0, -840(%rbp)
 3959      FFFF0000 
 3959      0000
 3960 3132 EB5A     		jmp	.L225
 3961              	.L226:
 980:main.c        **** 				alpha=alpha*256+out[i];
 3962              		.loc 1 980 0 discriminator 3
 3963 3134 488B8510 		movq	-752(%rbp), %rax
 3963      FDFFFF
 3964 313b 48C1E008 		salq	$8, %rax
 3965 313f 4889C2   		movq	%rax, %rdx
 3966 3142 8B85B8FC 		movl	-840(%rbp), %eax
 3966      FFFF
 3967 3148 4898     		cltq
 3968 314a 488B84C5 		movq	-272(%rbp,%rax,8), %rax
 3968      F0FEFFFF 
 3969 3152 4801D0   		addq	%rdx, %rax
 3970 3155 48898510 		movq	%rax, -752(%rbp)
 3970      FDFFFF
 981:main.c        **** 				beta=beta*256+out[4+i];
 3971              		.loc 1 981 0 discriminator 3
 3972 315c 488B8518 		movq	-744(%rbp), %rax
 3972      FDFFFF
 3973 3163 48C1E008 		salq	$8, %rax
 3974 3167 4889C2   		movq	%rax, %rdx
 3975 316a 8B85B8FC 		movl	-840(%rbp), %eax
 3975      FFFF
 3976 3170 83C004   		addl	$4, %eax
 3977 3173 4898     		cltq
 3978 3175 488B84C5 		movq	-272(%rbp,%rax,8), %rax
 3978      F0FEFFFF 
 3979 317d 4801D0   		addq	%rdx, %rax
 3980 3180 48898518 		movq	%rax, -744(%rbp)
 3980      FDFFFF
 979:main.c        **** 			for(int i=0;i<4;i++){
 3981              		.loc 1 979 0 discriminator 3
 3982 3187 8385B8FC 		addl	$1, -840(%rbp)
 3982      FFFF01
 3983              	.L225:
 979:main.c        **** 			for(int i=0;i<4;i++){
 3984              		.loc 1 979 0 is_stmt 0 discriminator 1
 3985 318e 83BDB8FC 		cmpl	$3, -840(%rbp)
 3985      FFFF03
 3986 3195 7E9D     		jle	.L226
 3987              	.LBE35:
 982:main.c        **** 			}
 983:main.c        **** 			///////////////////////////////send first 4 bytes
 984:main.c        **** 			printf("Sending first 4 bytes %s...\n", vp);
 3988              		.loc 1 984 0 is_stmt 1
 3989 3197 488B85D0 		movq	-560(%rbp), %rax
 3989      FDFFFF
 3990 319e 4889C6   		movq	%rax, %rsi
 3991 31a1 BF000000 		movl	$.LC141, %edi
 3991      00
 3992 31a6 B8000000 		movl	$0, %eax
 3992      00
 3993 31ab E8000000 		call	printf
 3993      00
 985:main.c        **** 			if ( isCommCapable ) {
 3994              		.loc 1 985 0
 3995 31b0 80BD63FC 		cmpb	$0, -925(%rbp)
 3995      FFFF00
 3996 31b7 0F844201 		je	.L227
 3996      0000
 3997              	.LBB36:
 986:main.c        **** 				uint8 isRunning;
 987:main.c        **** 				fStatus = flSelectConduit(handle, conduit, &error);
 3998              		.loc 1 987 0
 3999 31bd 0FB68D61 		movzbl	-927(%rbp), %ecx
 3999      FCFFFF
 4000 31c4 488B85E0 		movq	-800(%rbp), %rax
 4000      FCFFFF
 4001 31cb 488D95E8 		leaq	-792(%rbp), %rdx
 4001      FCFFFF
 4002 31d2 89CE     		movl	%ecx, %esi
 4003 31d4 4889C7   		movq	%rax, %rdi
 4004 31d7 E8000000 		call	flSelectConduit
 4004      00
 4005 31dc 89857CFC 		movl	%eax, -900(%rbp)
 4005      FFFF
 988:main.c        **** 				CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 4006              		.loc 1 988 0
 4007 31e2 83BD7CFC 		cmpl	$0, -900(%rbp)
 4007      FFFF00
 4008 31e9 740F     		je	.L228
 4009              		.loc 1 988 0 is_stmt 0 discriminator 1
 4010 31eb C78578FC 		movl	$1, -904(%rbp)
 4010      FFFF0100 
 4010      0000
 4011 31f5 E9EE1300 		jmp	.L131
 4011      00
 4012              	.L228:
 989:main.c        **** 				fStatus = flIsFPGARunning(handle, &isRunning, &error);
 4013              		.loc 1 989 0 is_stmt 1
 4014 31fa 488B85E0 		movq	-800(%rbp), %rax
 4014      FCFFFF
 4015 3201 488D95E8 		leaq	-792(%rbp), %rdx
 4015      FCFFFF
 4016 3208 488D8D60 		leaq	-928(%rbp), %rcx
 4016      FCFFFF
 4017 320f 4889CE   		movq	%rcx, %rsi
 4018 3212 4889C7   		movq	%rax, %rdi
 4019 3215 E8000000 		call	flIsFPGARunning
 4019      00
 4020 321a 89857CFC 		movl	%eax, -900(%rbp)
 4020      FFFF
 990:main.c        **** 				CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 4021              		.loc 1 990 0
 4022 3220 83BD7CFC 		cmpl	$0, -900(%rbp)
 4022      FFFF00
 4023 3227 740F     		je	.L230
 4024              		.loc 1 990 0 is_stmt 0 discriminator 1
 4025 3229 C78578FC 		movl	$1, -904(%rbp)
 4025      FFFF0100 
 4025      0000
 4026 3233 E9B01300 		jmp	.L131
 4026      00
 4027              	.L230:
 991:main.c        **** 				if ( isRunning ) {
 4028              		.loc 1 991 0 is_stmt 1
 4029 3238 0FB68560 		movzbl	-928(%rbp), %eax
 4029      FCFFFF
 4030 323f 84C0     		testb	%al, %al
 4031 3241 0F848800 		je	.L231
 4031      0000
 4032              	.LBB37:
 992:main.c        **** 					char str1[40]=" ";
 4033              		.loc 1 992 0
 4034 3247 48C745C0 		movq	$32, -64(%rbp)
 4034      20000000 
 4035 324f 48C745C8 		movq	$0, -56(%rbp)
 4035      00000000 
 4036 3257 48C745D0 		movq	$0, -48(%rbp)
 4036      00000000 
 4037 325f 48C745D8 		movq	$0, -40(%rbp)
 4037      00000000 
 4038 3267 48C745E0 		movq	$0, -32(%rbp)
 4038      00000000 
 993:main.c        **** 					send_chan(alpha,str1,2*chan+1);
 4039              		.loc 1 993 0
 4040 326f 8B8588FC 		movl	-888(%rbp), %eax
 4040      FFFF
 4041 3275 01C0     		addl	%eax, %eax
 4042 3277 8D5001   		leal	1(%rax), %edx
 4043 327a 488D4DC0 		leaq	-64(%rbp), %rcx
 4044 327e 488B8510 		movq	-752(%rbp), %rax
 4044      FDFFFF
 4045 3285 4889CE   		movq	%rcx, %rsi
 4046 3288 4889C7   		movq	%rax, %rdi
 4047 328b E8000000 		call	send_chan
 4047      00
 994:main.c        **** 					pStatus = parseLine(handle, str1, &error, UINT_MAX);
 4048              		.loc 1 994 0
 4049 3290 488B85E0 		movq	-800(%rbp), %rax
 4049      FCFFFF
 4050 3297 488D95E8 		leaq	-792(%rbp), %rdx
 4050      FCFFFF
 4051 329e 488D75C0 		leaq	-64(%rbp), %rsi
 4052 32a2 B9FFFFFF 		movl	$4294967295, %ecx
 4052      FF
 4053 32a7 4889C7   		movq	%rax, %rdi
 4054 32aa E894D3FF 		call	parseLine
 4054      FF
 4055 32af 8985D4FC 		movl	%eax, -812(%rbp)
 4055      FFFF
 995:main.c        **** 					CHECK_STATUS(pStatus, pStatus, cleanup);
 4056              		.loc 1 995 0
 4057 32b5 83BDD4FC 		cmpl	$0, -812(%rbp)
 4057      FFFF00
 4058 32bc 7470     		je	.L233
 4059              		.loc 1 995 0 is_stmt 0 discriminator 1
 4060 32be 8B85D4FC 		movl	-812(%rbp), %eax
 4060      FFFF
 4061 32c4 898578FC 		movl	%eax, -904(%rbp)
 4061      FFFF
 4062              	.LBE37:
 988:main.c        **** 				fStatus = flIsFPGARunning(handle, &isRunning, &error);
 4063              		.loc 1 988 0 is_stmt 1 discriminator 1
 4064 32ca E9191300 		jmp	.L131
 4064      00
 4065              	.L231:
 996:main.c        **** 				} else {
 997:main.c        **** 					fprintf(stderr, "The FPGALink device at %s is not ready to talk - did you forget --program?\n"
 4066              		.loc 1 997 0
 4067 32cf 488B0500 		movq	stderr(%rip), %rax
 4067      000000
 4068 32d6 488B95D0 		movq	-560(%rbp), %rdx
 4068      FDFFFF
 4069 32dd BE000000 		movl	$.LC128, %esi
 4069      00
 4070 32e2 4889C7   		movq	%rax, %rdi
 4071 32e5 B8000000 		movl	$0, %eax
 4071      00
 4072 32ea E8000000 		call	fprintf
 4072      00
 998:main.c        **** 					FAIL(FLP_ARGS, cleanup);
 4073              		.loc 1 998 0
 4074 32ef C78578FC 		movl	$12, -904(%rbp)
 4074      FFFF0C00 
 4074      0000
 4075 32f9 90       		nop
 4076 32fa E9E91200 		jmp	.L131
 4076      00
 4077              	.L227:
 4078              	.LBE36:
 999:main.c        **** 				}
1000:main.c        **** 			} else {
1001:main.c        **** 				fprintf(stderr, "Action requested but device at %s does not support CommFPGA\n", vp);
 4079              		.loc 1 1001 0
 4080 32ff 488B0500 		movq	stderr(%rip), %rax
 4080      000000
 4081 3306 488B95D0 		movq	-560(%rbp), %rdx
 4081      FDFFFF
 4082 330d BE000000 		movl	$.LC129, %esi
 4082      00
 4083 3312 4889C7   		movq	%rax, %rdi
 4084 3315 B8000000 		movl	$0, %eax
 4084      00
 4085 331a E8000000 		call	fprintf
 4085      00
1002:main.c        **** 				FAIL(FLP_ARGS, cleanup);
 4086              		.loc 1 1002 0
 4087 331f C78578FC 		movl	$12, -904(%rbp)
 4087      FFFF0C00 
 4087      0000
 4088 3329 E9BA1200 		jmp	.L131
 4088      00
 4089              	.L233:
1003:main.c        **** 			}
1004:main.c        **** 			//////////////////////////////////receive ACK
1005:main.c        **** 			int qwerty=0;
 4090              		.loc 1 1005 0
 4091 332e C785BCFC 		movl	$0, -836(%rbp)
 4091      FFFF0000 
 4091      0000
1006:main.c        **** 			for(;qwerty<256;qwerty++){
 4092              		.loc 1 1006 0
 4093 3338 E99F0200 		jmp	.L234
 4093      00
 4094              	.L248:
 4095              	.LBB38:
1007:main.c        **** 				printf("Reading ACK %s...\n", vp);
 4096              		.loc 1 1007 0
 4097 333d 488B85D0 		movq	-560(%rbp), %rax
 4097      FDFFFF
 4098 3344 4889C6   		movq	%rax, %rsi
 4099 3347 BF000000 		movl	$.LC142, %edi
 4099      00
 4100 334c B8000000 		movl	$0, %eax
 4100      00
 4101 3351 E8000000 		call	printf
 4101      00
1008:main.c        **** 				if ( isCommCapable ) {
 4102              		.loc 1 1008 0
 4103 3356 80BD63FC 		cmpb	$0, -925(%rbp)
 4103      FFFF00
 4104 335d 0F843B01 		je	.L235
 4104      0000
 4105              	.LBB39:
1009:main.c        **** 					uint8 isRunning;
1010:main.c        **** 					fStatus = flSelectConduit(handle, conduit, &error);
 4106              		.loc 1 1010 0
 4107 3363 0FB68D61 		movzbl	-927(%rbp), %ecx
 4107      FCFFFF
 4108 336a 488B85E0 		movq	-800(%rbp), %rax
 4108      FCFFFF
 4109 3371 488D95E8 		leaq	-792(%rbp), %rdx
 4109      FCFFFF
 4110 3378 89CE     		movl	%ecx, %esi
 4111 337a 4889C7   		movq	%rax, %rdi
 4112 337d E8000000 		call	flSelectConduit
 4112      00
 4113 3382 89857CFC 		movl	%eax, -900(%rbp)
 4113      FFFF
1011:main.c        **** 					CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 4114              		.loc 1 1011 0
 4115 3388 83BD7CFC 		cmpl	$0, -900(%rbp)
 4115      FFFF00
 4116 338f 740F     		je	.L236
 4117              		.loc 1 1011 0 is_stmt 0 discriminator 1
 4118 3391 C78578FC 		movl	$1, -904(%rbp)
 4118      FFFF0100 
 4118      0000
 4119 339b E9481200 		jmp	.L131
 4119      00
 4120              	.L236:
1012:main.c        **** 					fStatus = flIsFPGARunning(handle, &isRunning, &error);
 4121              		.loc 1 1012 0 is_stmt 1
 4122 33a0 488B85E0 		movq	-800(%rbp), %rax
 4122      FCFFFF
 4123 33a7 488D95E8 		leaq	-792(%rbp), %rdx
 4123      FCFFFF
 4124 33ae 488D8D60 		leaq	-928(%rbp), %rcx
 4124      FCFFFF
 4125 33b5 4889CE   		movq	%rcx, %rsi
 4126 33b8 4889C7   		movq	%rax, %rdi
 4127 33bb E8000000 		call	flIsFPGARunning
 4127      00
 4128 33c0 89857CFC 		movl	%eax, -900(%rbp)
 4128      FFFF
1013:main.c        **** 					CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 4129              		.loc 1 1013 0
 4130 33c6 83BD7CFC 		cmpl	$0, -900(%rbp)
 4130      FFFF00
 4131 33cd 740F     		je	.L238
 4132              		.loc 1 1013 0 is_stmt 0 discriminator 1
 4133 33cf C78578FC 		movl	$1, -904(%rbp)
 4133      FFFF0100 
 4133      0000
 4134 33d9 E90A1200 		jmp	.L131
 4134      00
 4135              	.L238:
1014:main.c        **** 					if ( isRunning ) {
 4136              		.loc 1 1014 0 is_stmt 1
 4137 33de 0FB68560 		movzbl	-928(%rbp), %eax
 4137      FCFFFF
 4138 33e5 84C0     		testb	%al, %al
 4139 33e7 0F848100 		je	.L239
 4139      0000
 4140              	.LBB40:
1015:main.c        **** 						char str1[40]=" ";
 4141              		.loc 1 1015 0
 4142 33ed 48C745C0 		movq	$32, -64(%rbp)
 4142      20000000 
 4143 33f5 48C745C8 		movq	$0, -56(%rbp)
 4143      00000000 
 4144 33fd 48C745D0 		movq	$0, -48(%rbp)
 4144      00000000 
 4145 3405 48C745D8 		movq	$0, -40(%rbp)
 4145      00000000 
 4146 340d 48C745E0 		movq	$0, -32(%rbp)
 4146      00000000 
1016:main.c        **** 						read_chan("ACK.dat",str1,2*chan);
 4147              		.loc 1 1016 0
 4148 3415 8B8588FC 		movl	-888(%rbp), %eax
 4148      FFFF
 4149 341b 8D1400   		leal	(%rax,%rax), %edx
 4150 341e 488D45C0 		leaq	-64(%rbp), %rax
 4151 3422 4889C6   		movq	%rax, %rsi
 4152 3425 BF000000 		movl	$.LC135, %edi
 4152      00
 4153 342a E8000000 		call	read_chan
 4153      00
1017:main.c        **** 						pStatus = parseLine(handle, str1, &error, UINT_MAX);
 4154              		.loc 1 1017 0
 4155 342f 488B85E0 		movq	-800(%rbp), %rax
 4155      FCFFFF
 4156 3436 488D95E8 		leaq	-792(%rbp), %rdx
 4156      FCFFFF
 4157 343d 488D75C0 		leaq	-64(%rbp), %rsi
 4158 3441 B9FFFFFF 		movl	$4294967295, %ecx
 4158      FF
 4159 3446 4889C7   		movq	%rax, %rdi
 4160 3449 E8F5D1FF 		call	parseLine
 4160      FF
 4161 344e 8985D4FC 		movl	%eax, -812(%rbp)
 4161      FFFF
1018:main.c        **** 						CHECK_STATUS(pStatus, pStatus, cleanup);
 4162              		.loc 1 1018 0
 4163 3454 83BDD4FC 		cmpl	$0, -812(%rbp)
 4163      FFFF00
 4164 345b 7470     		je	.L241
 4165              		.loc 1 1018 0 is_stmt 0 discriminator 1
 4166 345d 8B85D4FC 		movl	-812(%rbp), %eax
 4166      FFFF
 4167 3463 898578FC 		movl	%eax, -904(%rbp)
 4167      FFFF
 4168              	.LBE40:
1011:main.c        **** 					fStatus = flIsFPGARunning(handle, &isRunning, &error);
 4169              		.loc 1 1011 0 is_stmt 1 discriminator 1
 4170 3469 E97A1100 		jmp	.L131
 4170      00
 4171              	.L239:
1019:main.c        **** 					} else {
1020:main.c        **** 						fprintf(stderr, "The FPGALink device at %s is not ready to talk - did you forget --program?\n
 4172              		.loc 1 1020 0
 4173 346e 488B0500 		movq	stderr(%rip), %rax
 4173      000000
 4174 3475 488B95D0 		movq	-560(%rbp), %rdx
 4174      FDFFFF
 4175 347c BE000000 		movl	$.LC128, %esi
 4175      00
 4176 3481 4889C7   		movq	%rax, %rdi
 4177 3484 B8000000 		movl	$0, %eax
 4177      00
 4178 3489 E8000000 		call	fprintf
 4178      00
1021:main.c        **** 						FAIL(FLP_ARGS, cleanup);
 4179              		.loc 1 1021 0
 4180 348e C78578FC 		movl	$12, -904(%rbp)
 4180      FFFF0C00 
 4180      0000
 4181 3498 90       		nop
 4182 3499 E94A1100 		jmp	.L131
 4182      00
 4183              	.L235:
 4184              	.LBE39:
1022:main.c        **** 					}
1023:main.c        **** 				} else {
1024:main.c        **** 					fprintf(stderr, "Action requested but device at %s does not support CommFPGA\n", vp);
 4185              		.loc 1 1024 0
 4186 349e 488B0500 		movq	stderr(%rip), %rax
 4186      000000
 4187 34a5 488B95D0 		movq	-560(%rbp), %rdx
 4187      FDFFFF
 4188 34ac BE000000 		movl	$.LC129, %esi
 4188      00
 4189 34b1 4889C7   		movq	%rax, %rdi
 4190 34b4 B8000000 		movl	$0, %eax
 4190      00
 4191 34b9 E8000000 		call	fprintf
 4191      00
1025:main.c        **** 					FAIL(FLP_ARGS, cleanup);
 4192              		.loc 1 1025 0
 4193 34be C78578FC 		movl	$12, -904(%rbp)
 4193      FFFF0C00 
 4193      0000
 4194 34c8 E91B1100 		jmp	.L131
 4194      00
 4195              	.L241:
1026:main.c        **** 				}
1027:main.c        **** 				FILE *fptrAckAgain;
1028:main.c        **** 				fptrAckAgain = fopen("ACK.dat","r");
 4196              		.loc 1 1028 0
 4197 34cd BE000000 		movl	$.LC81, %esi
 4197      00
 4198 34d2 BF000000 		movl	$.LC135, %edi
 4198      00
 4199 34d7 E8000000 		call	fopen
 4199      00
 4200 34dc 488985E8 		movq	%rax, -536(%rbp)
 4200      FDFFFF
1029:main.c        **** 				long inp=0;
 4201              		.loc 1 1029 0
 4202 34e3 48C78520 		movq	$0, -736(%rbp)
 4202      FDFFFF00 
 4202      000000
1030:main.c        **** 				char ch;
1031:main.c        **** 				printf("Encrypted Ack: ");
 4203              		.loc 1 1031 0
 4204 34ee BF000000 		movl	$.LC136, %edi
 4204      00
 4205 34f3 B8000000 		movl	$0, %eax
 4205      00
 4206 34f8 E8000000 		call	printf
 4206      00
1032:main.c        **** 				while((ch=fgetc(fptrAckAgain))!=EOF) {
 4207              		.loc 1 1032 0
 4208 34fd EB61     		jmp	.L242
 4209              	.L245:
 4210              	.LBB41:
1033:main.c        **** 					int x;
1034:main.c        **** 					if ((int)ch < 0){
 4211              		.loc 1 1034 0
 4212 34ff 80BD64FC 		cmpb	$0, -924(%rbp)
 4212      FFFF00
 4213 3506 7914     		jns	.L243
1035:main.c        **** 						x = (int)ch + 256;
 4214              		.loc 1 1035 0
 4215 3508 0FBE8564 		movsbl	-924(%rbp), %eax
 4215      FCFFFF
 4216 350f 05000100 		addl	$256, %eax
 4216      00
 4217 3514 8985C0FC 		movl	%eax, -832(%rbp)
 4217      FFFF
 4218 351a EB0D     		jmp	.L244
 4219              	.L243:
1036:main.c        **** 					}
1037:main.c        **** 					else{
1038:main.c        **** 						x = (int)ch;
 4220              		.loc 1 1038 0
 4221 351c 0FBE8564 		movsbl	-924(%rbp), %eax
 4221      FCFFFF
 4222 3523 8985C0FC 		movl	%eax, -832(%rbp)
 4222      FFFF
 4223              	.L244:
1039:main.c        **** 					}
1040:main.c        **** 					inp = inp * 16 * 16 + x;
 4224              		.loc 1 1040 0
 4225 3529 488B8520 		movq	-736(%rbp), %rax
 4225      FDFFFF
 4226 3530 48C1E008 		salq	$8, %rax
 4227 3534 4889C2   		movq	%rax, %rdx
 4228 3537 8B85C0FC 		movl	-832(%rbp), %eax
 4228      FFFF
 4229 353d 4898     		cltq
 4230 353f 4801D0   		addq	%rdx, %rax
 4231 3542 48898520 		movq	%rax, -736(%rbp)
 4231      FDFFFF
1041:main.c        **** 					printf("%X",x);
 4232              		.loc 1 1041 0
 4233 3549 8B85C0FC 		movl	-832(%rbp), %eax
 4233      FFFF
 4234 354f 89C6     		movl	%eax, %esi
 4235 3551 BF000000 		movl	$.LC131, %edi
 4235      00
 4236 3556 B8000000 		movl	$0, %eax
 4236      00
 4237 355b E8000000 		call	printf
 4237      00
 4238              	.L242:
 4239              	.LBE41:
1032:main.c        **** 					int x;
 4240              		.loc 1 1032 0
 4241 3560 488B85E8 		movq	-536(%rbp), %rax
 4241      FDFFFF
 4242 3567 4889C7   		movq	%rax, %rdi
 4243 356a E8000000 		call	fgetc
 4243      00
 4244 356f 888564FC 		movb	%al, -924(%rbp)
 4244      FFFF
 4245 3575 80BD64FC 		cmpb	$-1, -924(%rbp)
 4245      FFFFFF
 4246 357c 7581     		jne	.L245
1042:main.c        **** 				}
1043:main.c        **** 				printf("\n");
 4247              		.loc 1 1043 0
 4248 357e BF0A0000 		movl	$10, %edi
 4248      00
 4249 3583 E8000000 		call	putchar
 4249      00
1044:main.c        **** 				fclose(fptrAckAgain);
 4250              		.loc 1 1044 0
 4251 3588 488B85E8 		movq	-536(%rbp), %rax
 4251      FDFFFF
 4252 358f 4889C7   		movq	%rax, %rdi
 4253 3592 E8000000 		call	fclose
 4253      00
1045:main.c        **** 				int decrypted_inp=decrypter(inp,Key);
 4254              		.loc 1 1045 0
 4255 3597 488B1500 		movq	Key(%rip), %rdx
 4255      000000
 4256 359e 488B8520 		movq	-736(%rbp), %rax
 4256      FDFFFF
 4257 35a5 4889D6   		movq	%rdx, %rsi
 4258 35a8 4889C7   		movq	%rax, %rdi
 4259 35ab E8000000 		call	decrypter
 4259      00
 4260 35b0 8985D8FC 		movl	%eax, -808(%rbp)
 4260      FFFF
1046:main.c        **** 				if(decrypted_inp == Kack1){
 4261              		.loc 1 1046 0
 4262 35b6 8B85D8FC 		movl	-808(%rbp), %eax
 4262      FFFF
 4263 35bc 4863D0   		movslq	%eax, %rdx
 4264 35bf 488B0500 		movq	Kack1(%rip), %rax
 4264      000000
 4265 35c6 4839C2   		cmpq	%rax, %rdx
 4266 35c9 7423     		je	.L330
1047:main.c        **** 					break;
1048:main.c        **** 				}
1049:main.c        **** 				else{
1050:main.c        **** 					sleep(1);
 4267              		.loc 1 1050 0
 4268 35cb BF010000 		movl	$1, %edi
 4268      00
 4269 35d0 E8000000 		call	sleep
 4269      00
 4270              	.LBE38:
1006:main.c        **** 				printf("Reading ACK %s...\n", vp);
 4271              		.loc 1 1006 0
 4272 35d5 8385BCFC 		addl	$1, -836(%rbp)
 4272      FFFF01
 4273              	.L234:
1006:main.c        **** 				printf("Reading ACK %s...\n", vp);
 4274              		.loc 1 1006 0 is_stmt 0 discriminator 1
 4275 35dc 81BDBCFC 		cmpl	$255, -836(%rbp)
 4275      FFFFFF00 
 4275      0000
 4276 35e6 0F8E51FD 		jle	.L248
 4276      FFFF
 4277 35ec EB01     		jmp	.L247
 4278              	.L330:
 4279              	.LBB42:
1047:main.c        **** 					break;
 4280              		.loc 1 1047 0 is_stmt 1
 4281 35ee 90       		nop
 4282              	.L247:
 4283              	.LBE42:
1051:main.c        **** 				}
1052:main.c        **** 			}
1053:main.c        **** 			if(qwerty==256){
 4284              		.loc 1 1053 0
 4285 35ef 81BDBCFC 		cmpl	$256, -836(%rbp)
 4285      FFFF0001 
 4285      0000
 4286 35f9 0F84A509 		je	.L331
 4286      0000
1054:main.c        **** 				continue;
1055:main.c        **** 			}
1056:main.c        **** 			///////////////////////////////////send next 4 bytes
1057:main.c        **** 			printf("Sending next 4 bytes %s...\n", vp);
 4287              		.loc 1 1057 0
 4288 35ff 488B85D0 		movq	-560(%rbp), %rax
 4288      FDFFFF
 4289 3606 4889C6   		movq	%rax, %rsi
 4290 3609 BF000000 		movl	$.LC143, %edi
 4290      00
 4291 360e B8000000 		movl	$0, %eax
 4291      00
 4292 3613 E8000000 		call	printf
 4292      00
1058:main.c        **** 			if ( isCommCapable ) {
 4293              		.loc 1 1058 0
 4294 3618 80BD63FC 		cmpb	$0, -925(%rbp)
 4294      FFFF00
 4295 361f 0F844201 		je	.L251
 4295      0000
 4296              	.LBB43:
1059:main.c        **** 				uint8 isRunning;
1060:main.c        **** 				fStatus = flSelectConduit(handle, conduit, &error);
 4297              		.loc 1 1060 0
 4298 3625 0FB68D61 		movzbl	-927(%rbp), %ecx
 4298      FCFFFF
 4299 362c 488B85E0 		movq	-800(%rbp), %rax
 4299      FCFFFF
 4300 3633 488D95E8 		leaq	-792(%rbp), %rdx
 4300      FCFFFF
 4301 363a 89CE     		movl	%ecx, %esi
 4302 363c 4889C7   		movq	%rax, %rdi
 4303 363f E8000000 		call	flSelectConduit
 4303      00
 4304 3644 89857CFC 		movl	%eax, -900(%rbp)
 4304      FFFF
1061:main.c        **** 				CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 4305              		.loc 1 1061 0
 4306 364a 83BD7CFC 		cmpl	$0, -900(%rbp)
 4306      FFFF00
 4307 3651 740F     		je	.L252
 4308              		.loc 1 1061 0 is_stmt 0 discriminator 1
 4309 3653 C78578FC 		movl	$1, -904(%rbp)
 4309      FFFF0100 
 4309      0000
 4310 365d E9860F00 		jmp	.L131
 4310      00
 4311              	.L252:
1062:main.c        **** 				fStatus = flIsFPGARunning(handle, &isRunning, &error);
 4312              		.loc 1 1062 0 is_stmt 1
 4313 3662 488B85E0 		movq	-800(%rbp), %rax
 4313      FCFFFF
 4314 3669 488D95E8 		leaq	-792(%rbp), %rdx
 4314      FCFFFF
 4315 3670 488D8D60 		leaq	-928(%rbp), %rcx
 4315      FCFFFF
 4316 3677 4889CE   		movq	%rcx, %rsi
 4317 367a 4889C7   		movq	%rax, %rdi
 4318 367d E8000000 		call	flIsFPGARunning
 4318      00
 4319 3682 89857CFC 		movl	%eax, -900(%rbp)
 4319      FFFF
1063:main.c        **** 				CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 4320              		.loc 1 1063 0
 4321 3688 83BD7CFC 		cmpl	$0, -900(%rbp)
 4321      FFFF00
 4322 368f 740F     		je	.L254
 4323              		.loc 1 1063 0 is_stmt 0 discriminator 1
 4324 3691 C78578FC 		movl	$1, -904(%rbp)
 4324      FFFF0100 
 4324      0000
 4325 369b E9480F00 		jmp	.L131
 4325      00
 4326              	.L254:
1064:main.c        **** 				if ( isRunning ) {
 4327              		.loc 1 1064 0 is_stmt 1
 4328 36a0 0FB68560 		movzbl	-928(%rbp), %eax
 4328      FCFFFF
 4329 36a7 84C0     		testb	%al, %al
 4330 36a9 0F848800 		je	.L255
 4330      0000
 4331              	.LBB44:
1065:main.c        **** 					char str1[40]=" ";
 4332              		.loc 1 1065 0
 4333 36af 48C745C0 		movq	$32, -64(%rbp)
 4333      20000000 
 4334 36b7 48C745C8 		movq	$0, -56(%rbp)
 4334      00000000 
 4335 36bf 48C745D0 		movq	$0, -48(%rbp)
 4335      00000000 
 4336 36c7 48C745D8 		movq	$0, -40(%rbp)
 4336      00000000 
 4337 36cf 48C745E0 		movq	$0, -32(%rbp)
 4337      00000000 
1066:main.c        **** 					send_chan(beta,str1,2*chan+1);
 4338              		.loc 1 1066 0
 4339 36d7 8B8588FC 		movl	-888(%rbp), %eax
 4339      FFFF
 4340 36dd 01C0     		addl	%eax, %eax
 4341 36df 8D5001   		leal	1(%rax), %edx
 4342 36e2 488D4DC0 		leaq	-64(%rbp), %rcx
 4343 36e6 488B8518 		movq	-744(%rbp), %rax
 4343      FDFFFF
 4344 36ed 4889CE   		movq	%rcx, %rsi
 4345 36f0 4889C7   		movq	%rax, %rdi
 4346 36f3 E8000000 		call	send_chan
 4346      00
1067:main.c        **** 					pStatus = parseLine(handle, str1, &error, UINT_MAX);
 4347              		.loc 1 1067 0
 4348 36f8 488B85E0 		movq	-800(%rbp), %rax
 4348      FCFFFF
 4349 36ff 488D95E8 		leaq	-792(%rbp), %rdx
 4349      FCFFFF
 4350 3706 488D75C0 		leaq	-64(%rbp), %rsi
 4351 370a B9FFFFFF 		movl	$4294967295, %ecx
 4351      FF
 4352 370f 4889C7   		movq	%rax, %rdi
 4353 3712 E82CCFFF 		call	parseLine
 4353      FF
 4354 3717 8985D4FC 		movl	%eax, -812(%rbp)
 4354      FFFF
1068:main.c        **** 					CHECK_STATUS(pStatus, pStatus, cleanup);
 4355              		.loc 1 1068 0
 4356 371d 83BDD4FC 		cmpl	$0, -812(%rbp)
 4356      FFFF00
 4357 3724 7470     		je	.L257
 4358              		.loc 1 1068 0 is_stmt 0 discriminator 1
 4359 3726 8B85D4FC 		movl	-812(%rbp), %eax
 4359      FFFF
 4360 372c 898578FC 		movl	%eax, -904(%rbp)
 4360      FFFF
 4361              	.LBE44:
1061:main.c        **** 				fStatus = flIsFPGARunning(handle, &isRunning, &error);
 4362              		.loc 1 1061 0 is_stmt 1 discriminator 1
 4363 3732 E9B10E00 		jmp	.L131
 4363      00
 4364              	.L255:
1069:main.c        **** 				} else {
1070:main.c        **** 					fprintf(stderr, "The FPGALink device at %s is not ready to talk - did you forget --program?\n"
 4365              		.loc 1 1070 0
 4366 3737 488B0500 		movq	stderr(%rip), %rax
 4366      000000
 4367 373e 488B95D0 		movq	-560(%rbp), %rdx
 4367      FDFFFF
 4368 3745 BE000000 		movl	$.LC128, %esi
 4368      00
 4369 374a 4889C7   		movq	%rax, %rdi
 4370 374d B8000000 		movl	$0, %eax
 4370      00
 4371 3752 E8000000 		call	fprintf
 4371      00
1071:main.c        **** 					FAIL(FLP_ARGS, cleanup);
 4372              		.loc 1 1071 0
 4373 3757 C78578FC 		movl	$12, -904(%rbp)
 4373      FFFF0C00 
 4373      0000
 4374 3761 90       		nop
 4375 3762 E9810E00 		jmp	.L131
 4375      00
 4376              	.L251:
 4377              	.LBE43:
1072:main.c        **** 				}
1073:main.c        **** 			} else {
1074:main.c        **** 				fprintf(stderr, "Action requested but device at %s does not support CommFPGA\n", vp);
 4378              		.loc 1 1074 0
 4379 3767 488B0500 		movq	stderr(%rip), %rax
 4379      000000
 4380 376e 488B95D0 		movq	-560(%rbp), %rdx
 4380      FDFFFF
 4381 3775 BE000000 		movl	$.LC129, %esi
 4381      00
 4382 377a 4889C7   		movq	%rax, %rdi
 4383 377d B8000000 		movl	$0, %eax
 4383      00
 4384 3782 E8000000 		call	fprintf
 4384      00
1075:main.c        **** 				FAIL(FLP_ARGS, cleanup);
 4385              		.loc 1 1075 0
 4386 3787 C78578FC 		movl	$12, -904(%rbp)
 4386      FFFF0C00 
 4386      0000
 4387 3791 E9520E00 		jmp	.L131
 4387      00
 4388              	.L257:
1076:main.c        **** 			}
1077:main.c        **** 			////////////////////////////////////receive next ACK
1078:main.c        **** 			qwerty=0;
 4389              		.loc 1 1078 0
 4390 3796 C785BCFC 		movl	$0, -836(%rbp)
 4390      FFFF0000 
 4390      0000
1079:main.c        **** 			for(;qwerty<256;qwerty++){
 4391              		.loc 1 1079 0
 4392 37a0 E99F0200 		jmp	.L258
 4392      00
 4393              	.L272:
 4394              	.LBB45:
1080:main.c        **** 				printf("Reading ACK %s...\n", vp);
 4395              		.loc 1 1080 0
 4396 37a5 488B85D0 		movq	-560(%rbp), %rax
 4396      FDFFFF
 4397 37ac 4889C6   		movq	%rax, %rsi
 4398 37af BF000000 		movl	$.LC142, %edi
 4398      00
 4399 37b4 B8000000 		movl	$0, %eax
 4399      00
 4400 37b9 E8000000 		call	printf
 4400      00
1081:main.c        **** 				if ( isCommCapable ) {
 4401              		.loc 1 1081 0
 4402 37be 80BD63FC 		cmpb	$0, -925(%rbp)
 4402      FFFF00
 4403 37c5 0F843B01 		je	.L259
 4403      0000
 4404              	.LBB46:
1082:main.c        **** 					uint8 isRunning;
1083:main.c        **** 					fStatus = flSelectConduit(handle, conduit, &error);
 4405              		.loc 1 1083 0
 4406 37cb 0FB68D61 		movzbl	-927(%rbp), %ecx
 4406      FCFFFF
 4407 37d2 488B85E0 		movq	-800(%rbp), %rax
 4407      FCFFFF
 4408 37d9 488D95E8 		leaq	-792(%rbp), %rdx
 4408      FCFFFF
 4409 37e0 89CE     		movl	%ecx, %esi
 4410 37e2 4889C7   		movq	%rax, %rdi
 4411 37e5 E8000000 		call	flSelectConduit
 4411      00
 4412 37ea 89857CFC 		movl	%eax, -900(%rbp)
 4412      FFFF
1084:main.c        **** 					CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 4413              		.loc 1 1084 0
 4414 37f0 83BD7CFC 		cmpl	$0, -900(%rbp)
 4414      FFFF00
 4415 37f7 740F     		je	.L260
 4416              		.loc 1 1084 0 is_stmt 0 discriminator 1
 4417 37f9 C78578FC 		movl	$1, -904(%rbp)
 4417      FFFF0100 
 4417      0000
 4418 3803 E9E00D00 		jmp	.L131
 4418      00
 4419              	.L260:
1085:main.c        **** 					fStatus = flIsFPGARunning(handle, &isRunning, &error);
 4420              		.loc 1 1085 0 is_stmt 1
 4421 3808 488B85E0 		movq	-800(%rbp), %rax
 4421      FCFFFF
 4422 380f 488D95E8 		leaq	-792(%rbp), %rdx
 4422      FCFFFF
 4423 3816 488D8D60 		leaq	-928(%rbp), %rcx
 4423      FCFFFF
 4424 381d 4889CE   		movq	%rcx, %rsi
 4425 3820 4889C7   		movq	%rax, %rdi
 4426 3823 E8000000 		call	flIsFPGARunning
 4426      00
 4427 3828 89857CFC 		movl	%eax, -900(%rbp)
 4427      FFFF
1086:main.c        **** 					CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 4428              		.loc 1 1086 0
 4429 382e 83BD7CFC 		cmpl	$0, -900(%rbp)
 4429      FFFF00
 4430 3835 740F     		je	.L262
 4431              		.loc 1 1086 0 is_stmt 0 discriminator 1
 4432 3837 C78578FC 		movl	$1, -904(%rbp)
 4432      FFFF0100 
 4432      0000
 4433 3841 E9A20D00 		jmp	.L131
 4433      00
 4434              	.L262:
1087:main.c        **** 					if ( isRunning ) {
 4435              		.loc 1 1087 0 is_stmt 1
 4436 3846 0FB68560 		movzbl	-928(%rbp), %eax
 4436      FCFFFF
 4437 384d 84C0     		testb	%al, %al
 4438 384f 0F848100 		je	.L263
 4438      0000
 4439              	.LBB47:
1088:main.c        **** 						char str1[40]=" ";
 4440              		.loc 1 1088 0
 4441 3855 48C745C0 		movq	$32, -64(%rbp)
 4441      20000000 
 4442 385d 48C745C8 		movq	$0, -56(%rbp)
 4442      00000000 
 4443 3865 48C745D0 		movq	$0, -48(%rbp)
 4443      00000000 
 4444 386d 48C745D8 		movq	$0, -40(%rbp)
 4444      00000000 
 4445 3875 48C745E0 		movq	$0, -32(%rbp)
 4445      00000000 
1089:main.c        **** 						read_chan("ACK.dat",str1,2*chan);
 4446              		.loc 1 1089 0
 4447 387d 8B8588FC 		movl	-888(%rbp), %eax
 4447      FFFF
 4448 3883 8D1400   		leal	(%rax,%rax), %edx
 4449 3886 488D45C0 		leaq	-64(%rbp), %rax
 4450 388a 4889C6   		movq	%rax, %rsi
 4451 388d BF000000 		movl	$.LC135, %edi
 4451      00
 4452 3892 E8000000 		call	read_chan
 4452      00
1090:main.c        **** 						pStatus = parseLine(handle, str1, &error, UINT_MAX);
 4453              		.loc 1 1090 0
 4454 3897 488B85E0 		movq	-800(%rbp), %rax
 4454      FCFFFF
 4455 389e 488D95E8 		leaq	-792(%rbp), %rdx
 4455      FCFFFF
 4456 38a5 488D75C0 		leaq	-64(%rbp), %rsi
 4457 38a9 B9FFFFFF 		movl	$4294967295, %ecx
 4457      FF
 4458 38ae 4889C7   		movq	%rax, %rdi
 4459 38b1 E88DCDFF 		call	parseLine
 4459      FF
 4460 38b6 8985D4FC 		movl	%eax, -812(%rbp)
 4460      FFFF
1091:main.c        **** 						CHECK_STATUS(pStatus, pStatus, cleanup);
 4461              		.loc 1 1091 0
 4462 38bc 83BDD4FC 		cmpl	$0, -812(%rbp)
 4462      FFFF00
 4463 38c3 7470     		je	.L265
 4464              		.loc 1 1091 0 is_stmt 0 discriminator 1
 4465 38c5 8B85D4FC 		movl	-812(%rbp), %eax
 4465      FFFF
 4466 38cb 898578FC 		movl	%eax, -904(%rbp)
 4466      FFFF
 4467              	.LBE47:
1084:main.c        **** 					fStatus = flIsFPGARunning(handle, &isRunning, &error);
 4468              		.loc 1 1084 0 is_stmt 1 discriminator 1
 4469 38d1 E9120D00 		jmp	.L131
 4469      00
 4470              	.L263:
1092:main.c        **** 					} else {
1093:main.c        **** 						fprintf(stderr, "The FPGALink device at %s is not ready to talk - did you forget --program?\n
 4471              		.loc 1 1093 0
 4472 38d6 488B0500 		movq	stderr(%rip), %rax
 4472      000000
 4473 38dd 488B95D0 		movq	-560(%rbp), %rdx
 4473      FDFFFF
 4474 38e4 BE000000 		movl	$.LC128, %esi
 4474      00
 4475 38e9 4889C7   		movq	%rax, %rdi
 4476 38ec B8000000 		movl	$0, %eax
 4476      00
 4477 38f1 E8000000 		call	fprintf
 4477      00
1094:main.c        **** 						FAIL(FLP_ARGS, cleanup);
 4478              		.loc 1 1094 0
 4479 38f6 C78578FC 		movl	$12, -904(%rbp)
 4479      FFFF0C00 
 4479      0000
 4480 3900 90       		nop
 4481 3901 E9E20C00 		jmp	.L131
 4481      00
 4482              	.L259:
 4483              	.LBE46:
1095:main.c        **** 					}
1096:main.c        **** 				} else {
1097:main.c        **** 					fprintf(stderr, "Action requested but device at %s does not support CommFPGA\n", vp);
 4484              		.loc 1 1097 0
 4485 3906 488B0500 		movq	stderr(%rip), %rax
 4485      000000
 4486 390d 488B95D0 		movq	-560(%rbp), %rdx
 4486      FDFFFF
 4487 3914 BE000000 		movl	$.LC129, %esi
 4487      00
 4488 3919 4889C7   		movq	%rax, %rdi
 4489 391c B8000000 		movl	$0, %eax
 4489      00
 4490 3921 E8000000 		call	fprintf
 4490      00
1098:main.c        **** 					FAIL(FLP_ARGS, cleanup);
 4491              		.loc 1 1098 0
 4492 3926 C78578FC 		movl	$12, -904(%rbp)
 4492      FFFF0C00 
 4492      0000
 4493 3930 E9B30C00 		jmp	.L131
 4493      00
 4494              	.L265:
1099:main.c        **** 				}
1100:main.c        **** 				FILE *fptrAckAgain2;
1101:main.c        **** 				fptrAckAgain2 = fopen("ACK.dat","r");
 4495              		.loc 1 1101 0
 4496 3935 BE000000 		movl	$.LC81, %esi
 4496      00
 4497 393a BF000000 		movl	$.LC135, %edi
 4497      00
 4498 393f E8000000 		call	fopen
 4498      00
 4499 3944 488985F0 		movq	%rax, -528(%rbp)
 4499      FDFFFF
1102:main.c        **** 				long inp=0;
 4500              		.loc 1 1102 0
 4501 394b 48C78528 		movq	$0, -728(%rbp)
 4501      FDFFFF00 
 4501      000000
1103:main.c        **** 				char ch;
1104:main.c        **** 				printf("Encrypted Ack: ");
 4502              		.loc 1 1104 0
 4503 3956 BF000000 		movl	$.LC136, %edi
 4503      00
 4504 395b B8000000 		movl	$0, %eax
 4504      00
 4505 3960 E8000000 		call	printf
 4505      00
1105:main.c        **** 				while((ch=fgetc(fptrAckAgain2))!=EOF) {
 4506              		.loc 1 1105 0
 4507 3965 EB61     		jmp	.L266
 4508              	.L269:
 4509              	.LBB48:
1106:main.c        **** 					int x;
1107:main.c        **** 					if ((int)ch < 0){
 4510              		.loc 1 1107 0
 4511 3967 80BD65FC 		cmpb	$0, -923(%rbp)
 4511      FFFF00
 4512 396e 7914     		jns	.L267
1108:main.c        **** 						x = (int)ch + 256;
 4513              		.loc 1 1108 0
 4514 3970 0FBE8565 		movsbl	-923(%rbp), %eax
 4514      FCFFFF
 4515 3977 05000100 		addl	$256, %eax
 4515      00
 4516 397c 8985C4FC 		movl	%eax, -828(%rbp)
 4516      FFFF
 4517 3982 EB0D     		jmp	.L268
 4518              	.L267:
1109:main.c        **** 					}
1110:main.c        **** 					else{
1111:main.c        **** 						x = (int)ch;
 4519              		.loc 1 1111 0
 4520 3984 0FBE8565 		movsbl	-923(%rbp), %eax
 4520      FCFFFF
 4521 398b 8985C4FC 		movl	%eax, -828(%rbp)
 4521      FFFF
 4522              	.L268:
1112:main.c        **** 					}
1113:main.c        **** 					inp = inp * 16 * 16 + x;
 4523              		.loc 1 1113 0
 4524 3991 488B8528 		movq	-728(%rbp), %rax
 4524      FDFFFF
 4525 3998 48C1E008 		salq	$8, %rax
 4526 399c 4889C2   		movq	%rax, %rdx
 4527 399f 8B85C4FC 		movl	-828(%rbp), %eax
 4527      FFFF
 4528 39a5 4898     		cltq
 4529 39a7 4801D0   		addq	%rdx, %rax
 4530 39aa 48898528 		movq	%rax, -728(%rbp)
 4530      FDFFFF
1114:main.c        **** 					printf("%X",x);
 4531              		.loc 1 1114 0
 4532 39b1 8B85C4FC 		movl	-828(%rbp), %eax
 4532      FFFF
 4533 39b7 89C6     		movl	%eax, %esi
 4534 39b9 BF000000 		movl	$.LC131, %edi
 4534      00
 4535 39be B8000000 		movl	$0, %eax
 4535      00
 4536 39c3 E8000000 		call	printf
 4536      00
 4537              	.L266:
 4538              	.LBE48:
1105:main.c        **** 					int x;
 4539              		.loc 1 1105 0
 4540 39c8 488B85F0 		movq	-528(%rbp), %rax
 4540      FDFFFF
 4541 39cf 4889C7   		movq	%rax, %rdi
 4542 39d2 E8000000 		call	fgetc
 4542      00
 4543 39d7 888565FC 		movb	%al, -923(%rbp)
 4543      FFFF
 4544 39dd 80BD65FC 		cmpb	$-1, -923(%rbp)
 4544      FFFFFF
 4545 39e4 7581     		jne	.L269
1115:main.c        **** 				}
1116:main.c        **** 				printf("\n");
 4546              		.loc 1 1116 0
 4547 39e6 BF0A0000 		movl	$10, %edi
 4547      00
 4548 39eb E8000000 		call	putchar
 4548      00
1117:main.c        **** 				fclose(fptrAckAgain2);
 4549              		.loc 1 1117 0
 4550 39f0 488B85F0 		movq	-528(%rbp), %rax
 4550      FDFFFF
 4551 39f7 4889C7   		movq	%rax, %rdi
 4552 39fa E8000000 		call	fclose
 4552      00
1118:main.c        **** 				int decrypted_inp=decrypter(inp,Key);
 4553              		.loc 1 1118 0
 4554 39ff 488B1500 		movq	Key(%rip), %rdx
 4554      000000
 4555 3a06 488B8528 		movq	-728(%rbp), %rax
 4555      FDFFFF
 4556 3a0d 4889D6   		movq	%rdx, %rsi
 4557 3a10 4889C7   		movq	%rax, %rdi
 4558 3a13 E8000000 		call	decrypter
 4558      00
 4559 3a18 8985DCFC 		movl	%eax, -804(%rbp)
 4559      FFFF
1119:main.c        **** 				// printf("%d\n", decrypted_inp);
1120:main.c        **** 				if(decrypted_inp == Kack1){
 4560              		.loc 1 1120 0
 4561 3a1e 8B85DCFC 		movl	-804(%rbp), %eax
 4561      FFFF
 4562 3a24 4863D0   		movslq	%eax, %rdx
 4563 3a27 488B0500 		movq	Kack1(%rip), %rax
 4563      000000
 4564 3a2e 4839C2   		cmpq	%rax, %rdx
 4565 3a31 7423     		je	.L332
1121:main.c        **** 					break;
1122:main.c        **** 				}
1123:main.c        **** 				else{
1124:main.c        **** 					sleep(1);
 4566              		.loc 1 1124 0
 4567 3a33 BF010000 		movl	$1, %edi
 4567      00
 4568 3a38 E8000000 		call	sleep
 4568      00
 4569              	.LBE45:
1079:main.c        **** 				printf("Reading ACK %s...\n", vp);
 4570              		.loc 1 1079 0
 4571 3a3d 8385BCFC 		addl	$1, -836(%rbp)
 4571      FFFF01
 4572              	.L258:
1079:main.c        **** 				printf("Reading ACK %s...\n", vp);
 4573              		.loc 1 1079 0 is_stmt 0 discriminator 1
 4574 3a44 81BDBCFC 		cmpl	$255, -836(%rbp)
 4574      FFFFFF00 
 4574      0000
 4575 3a4e 0F8E51FD 		jle	.L272
 4575      FFFF
 4576 3a54 EB01     		jmp	.L271
 4577              	.L332:
 4578              	.LBB49:
1121:main.c        **** 					break;
 4579              		.loc 1 1121 0 is_stmt 1
 4580 3a56 90       		nop
 4581              	.L271:
 4582              	.LBE49:
1125:main.c        **** 				}
1126:main.c        **** 			}
1127:main.c        **** 			if(qwerty==256)
 4583              		.loc 1 1127 0
 4584 3a57 81BDBCFC 		cmpl	$256, -836(%rbp)
 4584      FFFF0001 
 4584      0000
 4585 3a61 0F844305 		je	.L333
 4585      0000
1128:main.c        **** 				continue;
1129:main.c        **** 			////////////////////////////////////send final ACK
1130:main.c        **** 			printf("Sending ACK %s...\n", vp);
 4586              		.loc 1 1130 0
 4587 3a67 488B85D0 		movq	-560(%rbp), %rax
 4587      FDFFFF
 4588 3a6e 4889C6   		movq	%rax, %rsi
 4589 3a71 BF000000 		movl	$.LC144, %edi
 4589      00
 4590 3a76 B8000000 		movl	$0, %eax
 4590      00
 4591 3a7b E8000000 		call	printf
 4591      00
1131:main.c        **** 			if ( isCommCapable ) {
 4592              		.loc 1 1131 0
 4593 3a80 80BD63FC 		cmpb	$0, -925(%rbp)
 4593      FFFF00
 4594 3a87 0F844201 		je	.L274
 4594      0000
 4595              	.LBB50:
1132:main.c        **** 				uint8 isRunning;
1133:main.c        **** 				fStatus = flSelectConduit(handle, conduit, &error);
 4596              		.loc 1 1133 0
 4597 3a8d 0FB68D61 		movzbl	-927(%rbp), %ecx
 4597      FCFFFF
 4598 3a94 488B85E0 		movq	-800(%rbp), %rax
 4598      FCFFFF
 4599 3a9b 488D95E8 		leaq	-792(%rbp), %rdx
 4599      FCFFFF
 4600 3aa2 89CE     		movl	%ecx, %esi
 4601 3aa4 4889C7   		movq	%rax, %rdi
 4602 3aa7 E8000000 		call	flSelectConduit
 4602      00
 4603 3aac 89857CFC 		movl	%eax, -900(%rbp)
 4603      FFFF
1134:main.c        **** 				CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 4604              		.loc 1 1134 0
 4605 3ab2 83BD7CFC 		cmpl	$0, -900(%rbp)
 4605      FFFF00
 4606 3ab9 740F     		je	.L275
 4607              		.loc 1 1134 0 is_stmt 0 discriminator 1
 4608 3abb C78578FC 		movl	$1, -904(%rbp)
 4608      FFFF0100 
 4608      0000
 4609 3ac5 E91E0B00 		jmp	.L131
 4609      00
 4610              	.L275:
1135:main.c        **** 				fStatus = flIsFPGARunning(handle, &isRunning, &error);
 4611              		.loc 1 1135 0 is_stmt 1
 4612 3aca 488B85E0 		movq	-800(%rbp), %rax
 4612      FCFFFF
 4613 3ad1 488D95E8 		leaq	-792(%rbp), %rdx
 4613      FCFFFF
 4614 3ad8 488D8D60 		leaq	-928(%rbp), %rcx
 4614      FCFFFF
 4615 3adf 4889CE   		movq	%rcx, %rsi
 4616 3ae2 4889C7   		movq	%rax, %rdi
 4617 3ae5 E8000000 		call	flIsFPGARunning
 4617      00
 4618 3aea 89857CFC 		movl	%eax, -900(%rbp)
 4618      FFFF
1136:main.c        **** 				CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 4619              		.loc 1 1136 0
 4620 3af0 83BD7CFC 		cmpl	$0, -900(%rbp)
 4620      FFFF00
 4621 3af7 740F     		je	.L277
 4622              		.loc 1 1136 0 is_stmt 0 discriminator 1
 4623 3af9 C78578FC 		movl	$1, -904(%rbp)
 4623      FFFF0100 
 4623      0000
 4624 3b03 E9E00A00 		jmp	.L131
 4624      00
 4625              	.L277:
1137:main.c        **** 				if ( isRunning ) {
 4626              		.loc 1 1137 0 is_stmt 1
 4627 3b08 0FB68560 		movzbl	-928(%rbp), %eax
 4627      FCFFFF
 4628 3b0f 84C0     		testb	%al, %al
 4629 3b11 0F848800 		je	.L278
 4629      0000
 4630              	.LBB51:
1138:main.c        **** 					char str1[40] = " ";
 4631              		.loc 1 1138 0
 4632 3b17 48C745C0 		movq	$32, -64(%rbp)
 4632      20000000 
 4633 3b1f 48C745C8 		movq	$0, -56(%rbp)
 4633      00000000 
 4634 3b27 48C745D0 		movq	$0, -48(%rbp)
 4634      00000000 
 4635 3b2f 48C745D8 		movq	$0, -40(%rbp)
 4635      00000000 
 4636 3b37 48C745E0 		movq	$0, -32(%rbp)
 4636      00000000 
1139:main.c        **** 					send_chan(Kack2,str1,2*chan+1);
 4637              		.loc 1 1139 0
 4638 3b3f 8B8588FC 		movl	-888(%rbp), %eax
 4638      FFFF
 4639 3b45 01C0     		addl	%eax, %eax
 4640 3b47 8D5001   		leal	1(%rax), %edx
 4641 3b4a 488B0500 		movq	Kack2(%rip), %rax
 4641      000000
 4642 3b51 488D4DC0 		leaq	-64(%rbp), %rcx
 4643 3b55 4889CE   		movq	%rcx, %rsi
 4644 3b58 4889C7   		movq	%rax, %rdi
 4645 3b5b E8000000 		call	send_chan
 4645      00
1140:main.c        **** 					pStatus = parseLine(handle, str1, &error, UINT_MAX);
 4646              		.loc 1 1140 0
 4647 3b60 488B85E0 		movq	-800(%rbp), %rax
 4647      FCFFFF
 4648 3b67 488D95E8 		leaq	-792(%rbp), %rdx
 4648      FCFFFF
 4649 3b6e 488D75C0 		leaq	-64(%rbp), %rsi
 4650 3b72 B9FFFFFF 		movl	$4294967295, %ecx
 4650      FF
 4651 3b77 4889C7   		movq	%rax, %rdi
 4652 3b7a E8C4CAFF 		call	parseLine
 4652      FF
 4653 3b7f 8985D4FC 		movl	%eax, -812(%rbp)
 4653      FFFF
1141:main.c        **** 					CHECK_STATUS(pStatus, pStatus, cleanup);
 4654              		.loc 1 1141 0
 4655 3b85 83BDD4FC 		cmpl	$0, -812(%rbp)
 4655      FFFF00
 4656 3b8c 7470     		je	.L280
 4657              		.loc 1 1141 0 is_stmt 0 discriminator 1
 4658 3b8e 8B85D4FC 		movl	-812(%rbp), %eax
 4658      FFFF
 4659 3b94 898578FC 		movl	%eax, -904(%rbp)
 4659      FFFF
 4660              	.LBE51:
1134:main.c        **** 				fStatus = flIsFPGARunning(handle, &isRunning, &error);
 4661              		.loc 1 1134 0 is_stmt 1 discriminator 1
 4662 3b9a E9490A00 		jmp	.L131
 4662      00
 4663              	.L278:
1142:main.c        **** 				} else {
1143:main.c        **** 					fprintf(stderr, "The FPGALink device at %s is not ready to talk - did you forget --program?\n"
 4664              		.loc 1 1143 0
 4665 3b9f 488B0500 		movq	stderr(%rip), %rax
 4665      000000
 4666 3ba6 488B95D0 		movq	-560(%rbp), %rdx
 4666      FDFFFF
 4667 3bad BE000000 		movl	$.LC128, %esi
 4667      00
 4668 3bb2 4889C7   		movq	%rax, %rdi
 4669 3bb5 B8000000 		movl	$0, %eax
 4669      00
 4670 3bba E8000000 		call	fprintf
 4670      00
1144:main.c        **** 					FAIL(FLP_ARGS, cleanup);
 4671              		.loc 1 1144 0
 4672 3bbf C78578FC 		movl	$12, -904(%rbp)
 4672      FFFF0C00 
 4672      0000
 4673 3bc9 90       		nop
 4674 3bca E9190A00 		jmp	.L131
 4674      00
 4675              	.L274:
 4676              	.LBE50:
1145:main.c        **** 				}
1146:main.c        **** 			} else {
1147:main.c        **** 				fprintf(stderr, "Action requested but device at %s does not support CommFPGA\n", vp);
 4677              		.loc 1 1147 0
 4678 3bcf 488B0500 		movq	stderr(%rip), %rax
 4678      000000
 4679 3bd6 488B95D0 		movq	-560(%rbp), %rdx
 4679      FDFFFF
 4680 3bdd BE000000 		movl	$.LC129, %esi
 4680      00
 4681 3be2 4889C7   		movq	%rax, %rdi
 4682 3be5 B8000000 		movl	$0, %eax
 4682      00
 4683 3bea E8000000 		call	fprintf
 4683      00
1148:main.c        **** 				FAIL(FLP_ARGS, cleanup);
 4684              		.loc 1 1148 0
 4685 3bef C78578FC 		movl	$12, -904(%rbp)
 4685      FFFF0C00 
 4685      0000
 4686 3bf9 E9EA0900 		jmp	.L131
 4686      00
 4687              	.L280:
1149:main.c        **** 			}
1150:main.c        **** 			///////////////////////////////////Try getting new data
1151:main.c        **** 			// sleep(24);
1152:main.c        **** 			printf("Trying to get data %s...\n", vp);
 4688              		.loc 1 1152 0
 4689 3bfe 488B85D0 		movq	-560(%rbp), %rax
 4689      FDFFFF
 4690 3c05 4889C6   		movq	%rax, %rsi
 4691 3c08 BF000000 		movl	$.LC145, %edi
 4691      00
 4692 3c0d B8000000 		movl	$0, %eax
 4692      00
 4693 3c12 E8000000 		call	printf
 4693      00
1153:main.c        **** 			if ( isCommCapable ) {
 4694              		.loc 1 1153 0
 4695 3c17 80BD63FC 		cmpb	$0, -925(%rbp)
 4695      FFFF00
 4696 3c1e 0F843B01 		je	.L281
 4696      0000
 4697              	.LBB52:
1154:main.c        **** 				uint8 isRunning;
1155:main.c        **** 				fStatus = flSelectConduit(handle, conduit, &error);
 4698              		.loc 1 1155 0
 4699 3c24 0FB68D61 		movzbl	-927(%rbp), %ecx
 4699      FCFFFF
 4700 3c2b 488B85E0 		movq	-800(%rbp), %rax
 4700      FCFFFF
 4701 3c32 488D95E8 		leaq	-792(%rbp), %rdx
 4701      FCFFFF
 4702 3c39 89CE     		movl	%ecx, %esi
 4703 3c3b 4889C7   		movq	%rax, %rdi
 4704 3c3e E8000000 		call	flSelectConduit
 4704      00
 4705 3c43 89857CFC 		movl	%eax, -900(%rbp)
 4705      FFFF
1156:main.c        **** 					CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 4706              		.loc 1 1156 0
 4707 3c49 83BD7CFC 		cmpl	$0, -900(%rbp)
 4707      FFFF00
 4708 3c50 740F     		je	.L282
 4709              		.loc 1 1156 0 is_stmt 0 discriminator 1
 4710 3c52 C78578FC 		movl	$1, -904(%rbp)
 4710      FFFF0100 
 4710      0000
 4711 3c5c E9870900 		jmp	.L131
 4711      00
 4712              	.L282:
1157:main.c        **** 				fStatus = flIsFPGARunning(handle, &isRunning, &error);
 4713              		.loc 1 1157 0 is_stmt 1
 4714 3c61 488B85E0 		movq	-800(%rbp), %rax
 4714      FCFFFF
 4715 3c68 488D95E8 		leaq	-792(%rbp), %rdx
 4715      FCFFFF
 4716 3c6f 488D8D60 		leaq	-928(%rbp), %rcx
 4716      FCFFFF
 4717 3c76 4889CE   		movq	%rcx, %rsi
 4718 3c79 4889C7   		movq	%rax, %rdi
 4719 3c7c E8000000 		call	flIsFPGARunning
 4719      00
 4720 3c81 89857CFC 		movl	%eax, -900(%rbp)
 4720      FFFF
1158:main.c        **** 				CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 4721              		.loc 1 1158 0
 4722 3c87 83BD7CFC 		cmpl	$0, -900(%rbp)
 4722      FFFF00
 4723 3c8e 740F     		je	.L284
 4724              		.loc 1 1158 0 is_stmt 0 discriminator 1
 4725 3c90 C78578FC 		movl	$1, -904(%rbp)
 4725      FFFF0100 
 4725      0000
 4726 3c9a E9490900 		jmp	.L131
 4726      00
 4727              	.L284:
1159:main.c        **** 				if ( isRunning ) {
 4728              		.loc 1 1159 0 is_stmt 1
 4729 3c9f 0FB68560 		movzbl	-928(%rbp), %eax
 4729      FCFFFF
 4730 3ca6 84C0     		testb	%al, %al
 4731 3ca8 0F848100 		je	.L285
 4731      0000
 4732              	.LBB53:
1160:main.c        **** 					char str1[40]=" ";
 4733              		.loc 1 1160 0
 4734 3cae 48C745C0 		movq	$32, -64(%rbp)
 4734      20000000 
 4735 3cb6 48C745C8 		movq	$0, -56(%rbp)
 4735      00000000 
 4736 3cbe 48C745D0 		movq	$0, -48(%rbp)
 4736      00000000 
 4737 3cc6 48C745D8 		movq	$0, -40(%rbp)
 4737      00000000 
 4738 3cce 48C745E0 		movq	$0, -32(%rbp)
 4738      00000000 
1161:main.c        **** 					read_chan("Update.dat",str1,2*chan);
 4739              		.loc 1 1161 0
 4740 3cd6 8B8588FC 		movl	-888(%rbp), %eax
 4740      FFFF
 4741 3cdc 8D1400   		leal	(%rax,%rax), %edx
 4742 3cdf 488D45C0 		leaq	-64(%rbp), %rax
 4743 3ce3 4889C6   		movq	%rax, %rsi
 4744 3ce6 BF000000 		movl	$.LC146, %edi
 4744      00
 4745 3ceb E8000000 		call	read_chan
 4745      00
1162:main.c        **** 					// printf("%s\n",str1 );
1163:main.c        **** 					pStatus = parseLine(handle, str1, &error, UINT_MAX);
 4746              		.loc 1 1163 0
 4747 3cf0 488B85E0 		movq	-800(%rbp), %rax
 4747      FCFFFF
 4748 3cf7 488D95E8 		leaq	-792(%rbp), %rdx
 4748      FCFFFF
 4749 3cfe 488D75C0 		leaq	-64(%rbp), %rsi
 4750 3d02 B9FFFFFF 		movl	$4294967295, %ecx
 4750      FF
 4751 3d07 4889C7   		movq	%rax, %rdi
 4752 3d0a E834C9FF 		call	parseLine
 4752      FF
 4753 3d0f 8985D4FC 		movl	%eax, -812(%rbp)
 4753      FFFF
1164:main.c        **** 					CHECK_STATUS(pStatus, pStatus, cleanup);
 4754              		.loc 1 1164 0
 4755 3d15 83BDD4FC 		cmpl	$0, -812(%rbp)
 4755      FFFF00
 4756 3d1c 7470     		je	.L287
 4757              		.loc 1 1164 0 is_stmt 0 discriminator 1
 4758 3d1e 8B85D4FC 		movl	-812(%rbp), %eax
 4758      FFFF
 4759 3d24 898578FC 		movl	%eax, -904(%rbp)
 4759      FFFF
 4760              	.LBE53:
1156:main.c        **** 				fStatus = flIsFPGARunning(handle, &isRunning, &error);
 4761              		.loc 1 1156 0 is_stmt 1 discriminator 1
 4762 3d2a E9B90800 		jmp	.L131
 4762      00
 4763              	.L285:
1165:main.c        **** 				} else {
1166:main.c        **** 					fprintf(stderr, "The FPGALink device at %s is not ready to talk - did you forget --program?\n"
 4764              		.loc 1 1166 0
 4765 3d2f 488B0500 		movq	stderr(%rip), %rax
 4765      000000
 4766 3d36 488B95D0 		movq	-560(%rbp), %rdx
 4766      FDFFFF
 4767 3d3d BE000000 		movl	$.LC128, %esi
 4767      00
 4768 3d42 4889C7   		movq	%rax, %rdi
 4769 3d45 B8000000 		movl	$0, %eax
 4769      00
 4770 3d4a E8000000 		call	fprintf
 4770      00
1167:main.c        **** 					FAIL(FLP_ARGS, cleanup);
 4771              		.loc 1 1167 0
 4772 3d4f C78578FC 		movl	$12, -904(%rbp)
 4772      FFFF0C00 
 4772      0000
 4773 3d59 90       		nop
 4774 3d5a E9890800 		jmp	.L131
 4774      00
 4775              	.L281:
 4776              	.LBE52:
1168:main.c        **** 				}
1169:main.c        **** 			} else {
1170:main.c        **** 				fprintf(stderr, "Action requested but device at %s does not support CommFPGA\n", vp);
 4777              		.loc 1 1170 0
 4778 3d5f 488B0500 		movq	stderr(%rip), %rax
 4778      000000
 4779 3d66 488B95D0 		movq	-560(%rbp), %rdx
 4779      FDFFFF
 4780 3d6d BE000000 		movl	$.LC129, %esi
 4780      00
 4781 3d72 4889C7   		movq	%rax, %rdi
 4782 3d75 B8000000 		movl	$0, %eax
 4782      00
 4783 3d7a E8000000 		call	fprintf
 4783      00
1171:main.c        **** 				FAIL(FLP_ARGS, cleanup);
 4784              		.loc 1 1171 0
 4785 3d7f C78578FC 		movl	$12, -904(%rbp)
 4785      FFFF0C00 
 4785      0000
 4786 3d89 E95A0800 		jmp	.L131
 4786      00
 4787              	.L287:
1172:main.c        **** 			}
1173:main.c        **** 			FILE *fptrUp;
1174:main.c        **** 			fptrUp = fopen("Update.dat", "r");
 4788              		.loc 1 1174 0
 4789 3d8e BE000000 		movl	$.LC81, %esi
 4789      00
 4790 3d93 BF000000 		movl	$.LC146, %edi
 4790      00
 4791 3d98 E8000000 		call	fopen
 4791      00
 4792 3d9d 488985F8 		movq	%rax, -520(%rbp)
 4792      FDFFFF
1175:main.c        **** 			long inp = 0;
 4793              		.loc 1 1175 0
 4794 3da4 48C78530 		movq	$0, -720(%rbp)
 4794      FDFFFF00 
 4794      000000
1176:main.c        **** 			char ch;
1177:main.c        **** 			while ((ch = fgetc(fptrUp)) != EOF) {
 4795              		.loc 1 1177 0
 4796 3daf EB4A     		jmp	.L288
 4797              	.L291:
 4798              	.LBB54:
1178:main.c        **** 				// printf("%d\n",(int)ch );
1179:main.c        **** 				int x;
1180:main.c        **** 				if ((int)ch < 0){
 4799              		.loc 1 1180 0
 4800 3db1 80BD66FC 		cmpb	$0, -922(%rbp)
 4800      FFFF00
 4801 3db8 7914     		jns	.L289
1181:main.c        **** 					x = (int)ch + 256;
 4802              		.loc 1 1181 0
 4803 3dba 0FBE8566 		movsbl	-922(%rbp), %eax
 4803      FCFFFF
 4804 3dc1 05000100 		addl	$256, %eax
 4804      00
 4805 3dc6 8985C8FC 		movl	%eax, -824(%rbp)
 4805      FFFF
 4806 3dcc EB0D     		jmp	.L290
 4807              	.L289:
1182:main.c        **** 				}
1183:main.c        **** 				else{
1184:main.c        **** 					x = (int)ch;
 4808              		.loc 1 1184 0
 4809 3dce 0FBE8566 		movsbl	-922(%rbp), %eax
 4809      FCFFFF
 4810 3dd5 8985C8FC 		movl	%eax, -824(%rbp)
 4810      FFFF
 4811              	.L290:
1185:main.c        **** 				}
1186:main.c        **** 				inp = inp * 16 * 16 + x;
 4812              		.loc 1 1186 0
 4813 3ddb 488B8530 		movq	-720(%rbp), %rax
 4813      FDFFFF
 4814 3de2 48C1E008 		salq	$8, %rax
 4815 3de6 4889C2   		movq	%rax, %rdx
 4816 3de9 8B85C8FC 		movl	-824(%rbp), %eax
 4816      FFFF
 4817 3def 4898     		cltq
 4818 3df1 4801D0   		addq	%rdx, %rax
 4819 3df4 48898530 		movq	%rax, -720(%rbp)
 4819      FDFFFF
 4820              	.L288:
 4821              	.LBE54:
1177:main.c        **** 				// printf("%d\n",(int)ch );
 4822              		.loc 1 1177 0
 4823 3dfb 488B85F8 		movq	-520(%rbp), %rax
 4823      FDFFFF
 4824 3e02 4889C7   		movq	%rax, %rdi
 4825 3e05 E8000000 		call	fgetc
 4825      00
 4826 3e0a 888566FC 		movb	%al, -922(%rbp)
 4826      FFFF
 4827 3e10 80BD66FC 		cmpb	$-1, -922(%rbp)
 4827      FFFFFF
 4828 3e17 7598     		jne	.L291
1187:main.c        **** 			}
1188:main.c        **** 			fclose(fptrUp);
 4829              		.loc 1 1188 0
 4830 3e19 488B85F8 		movq	-520(%rbp), %rax
 4830      FDFFFF
 4831 3e20 4889C7   		movq	%rax, %rdi
 4832 3e23 E8000000 		call	fclose
 4832      00
1189:main.c        **** 			// printf("%ld\n", inp);
1190:main.c        **** 			long decrypted_inp = decrypter(inp, Key), special1=1, special2=0;
 4833              		.loc 1 1190 0
 4834 3e28 488B1500 		movq	Key(%rip), %rdx
 4834      000000
 4835 3e2f 488B8530 		movq	-720(%rbp), %rax
 4835      FDFFFF
 4836 3e36 4889D6   		movq	%rdx, %rsi
 4837 3e39 4889C7   		movq	%rax, %rdi
 4838 3e3c E8000000 		call	decrypter
 4838      00
 4839 3e41 48898500 		movq	%rax, -512(%rbp)
 4839      FEFFFF
 4840 3e48 48C78508 		movq	$1, -504(%rbp)
 4840      FEFFFF01 
 4840      000000
 4841 3e53 48C78510 		movq	$0, -496(%rbp)
 4841      FEFFFF00 
 4841      000000
1191:main.c        **** 			// printf("%ldnew data\n",decrypted_inp);
1192:main.c        **** 			if (decrypted_inp/256 == special1) {
 4842              		.loc 1 1192 0
 4843 3e5e 488B8500 		movq	-512(%rbp), %rax
 4843      FEFFFF
 4844 3e65 488D90FF 		leaq	255(%rax), %rdx
 4844      000000
 4845 3e6c 4885C0   		testq	%rax, %rax
 4846 3e6f 480F48C2 		cmovs	%rdx, %rax
 4847 3e73 48C1F808 		sarq	$8, %rax
 4848 3e77 483B8508 		cmpq	-504(%rbp), %rax
 4848      FEFFFF
 4849 3e7e 755E     		jne	.L292
1193:main.c        **** 				/////////////////////// if got new data
1194:main.c        **** 				printf("Data received : %X\n", (unsigned int)decrypted_inp%256);
 4850              		.loc 1 1194 0
 4851 3e80 488B8500 		movq	-512(%rbp), %rax
 4851      FEFFFF
 4852 3e87 0FB6C0   		movzbl	%al, %eax
 4853 3e8a 89C6     		movl	%eax, %esi
 4854 3e8c BF000000 		movl	$.LC147, %edi
 4854      00
 4855 3e91 B8000000 		movl	$0, %eax
 4855      00
 4856 3e96 E8000000 		call	printf
 4856      00
1195:main.c        **** 				editfile(X,Y,"track_data.csv", decrypted_inp%256);
 4857              		.loc 1 1195 0
 4858 3e9b 488B8500 		movq	-512(%rbp), %rax
 4858      FEFFFF
 4859 3ea2 4899     		cqto
 4860 3ea4 48C1EA38 		shrq	$56, %rdx
 4861 3ea8 4801D0   		addq	%rdx, %rax
 4862 3eab 0FB6C0   		movzbl	%al, %eax
 4863 3eae 4829D0   		subq	%rdx, %rax
 4864 3eb1 4889C2   		movq	%rax, %rdx
 4865 3eb4 8BB598FC 		movl	-872(%rbp), %esi
 4865      FFFF
 4866 3eba 8B8594FC 		movl	-876(%rbp), %eax
 4866      FFFF
 4867 3ec0 4889D1   		movq	%rdx, %rcx
 4868 3ec3 BA000000 		movl	$.LC138, %edx
 4868      00
 4869 3ec8 89C7     		movl	%eax, %edi
 4870 3eca E8000000 		call	editfile
 4870      00
1196:main.c        **** 				checkstart = 0;
 4871              		.loc 1 1196 0
 4872 3ecf C7859CFC 		movl	$0, -868(%rbp)
 4872      FFFF0000 
 4872      0000
 4873 3ed9 E9F4E6FF 		jmp	.L298
 4873      FF
 4874              	.L292:
1197:main.c        **** 				/////////////////done
1198:main.c        **** 			}
1199:main.c        **** 			else if (decrypted_inp/256 == special2) {
 4875              		.loc 1 1199 0
 4876 3ede 488B8500 		movq	-512(%rbp), %rax
 4876      FEFFFF
 4877 3ee5 488D90FF 		leaq	255(%rax), %rdx
 4877      000000
 4878 3eec 4885C0   		testq	%rax, %rax
 4879 3eef 480F48C2 		cmovs	%rdx, %rax
 4880 3ef3 48C1F808 		sarq	$8, %rax
 4881 3ef7 483B8510 		cmpq	-496(%rbp), %rax
 4881      FEFFFF
 4882 3efe 0F859100 		jne	.L294
 4882      0000
 4883              	.LBB55:
1200:main.c        **** 				///////////////////////////if got coordinates again, go back.......
1201:main.c        **** 				FILE *fptrAckAgain2;
1202:main.c        **** 				FILE *fptrUp;
1203:main.c        **** 				fptrUp=fopen("Update.dat","r");
 4884              		.loc 1 1203 0
 4885 3f04 BE000000 		movl	$.LC81, %esi
 4885      00
 4886 3f09 BF000000 		movl	$.LC146, %edi
 4886      00
 4887 3f0e E8000000 		call	fopen
 4887      00
 4888 3f13 48898518 		movq	%rax, -488(%rbp)
 4888      FEFFFF
1204:main.c        **** 				fptrAckAgain2 = fopen("coordinate_enc.dat", "w");
 4889              		.loc 1 1204 0
 4890 3f1a BE000000 		movl	$.LC148, %esi
 4890      00
 4891 3f1f BF000000 		movl	$.LC127, %edi
 4891      00
 4892 3f24 E8000000 		call	fopen
 4892      00
 4893 3f29 48898520 		movq	%rax, -480(%rbp)
 4893      FEFFFF
1205:main.c        **** 				while ((ch = fgetc(fptrUp)) != EOF) {
 4894              		.loc 1 1205 0
 4895 3f30 EB18     		jmp	.L295
 4896              	.L296:
1206:main.c        **** 					fputc(ch,fptrAckAgain2);
 4897              		.loc 1 1206 0
 4898 3f32 0FBE8566 		movsbl	-922(%rbp), %eax
 4898      FCFFFF
 4899 3f39 488B9520 		movq	-480(%rbp), %rdx
 4899      FEFFFF
 4900 3f40 4889D6   		movq	%rdx, %rsi
 4901 3f43 89C7     		movl	%eax, %edi
 4902 3f45 E8000000 		call	fputc
 4902      00
 4903              	.L295:
1205:main.c        **** 				while ((ch = fgetc(fptrUp)) != EOF) {
 4904              		.loc 1 1205 0
 4905 3f4a 488B8518 		movq	-488(%rbp), %rax
 4905      FEFFFF
 4906 3f51 4889C7   		movq	%rax, %rdi
 4907 3f54 E8000000 		call	fgetc
 4907      00
 4908 3f59 888566FC 		movb	%al, -922(%rbp)
 4908      FFFF
 4909 3f5f 80BD66FC 		cmpb	$-1, -922(%rbp)
 4909      FFFFFF
 4910 3f66 75CA     		jne	.L296
1207:main.c        **** 				}
1208:main.c        **** 				checkstart = 1;
 4911              		.loc 1 1208 0
 4912 3f68 C7859CFC 		movl	$1, -868(%rbp)
 4912      FFFF0100 
 4912      0000
1209:main.c        **** 				fclose(fptrAckAgain2);
 4913              		.loc 1 1209 0
 4914 3f72 488B8520 		movq	-480(%rbp), %rax
 4914      FEFFFF
 4915 3f79 4889C7   		movq	%rax, %rdi
 4916 3f7c E8000000 		call	fclose
 4916      00
1210:main.c        **** 				fclose(fptrUp);
 4917              		.loc 1 1210 0
 4918 3f81 488B8518 		movq	-488(%rbp), %rax
 4918      FEFFFF
 4919 3f88 4889C7   		movq	%rax, %rdi
 4920 3f8b E8000000 		call	fclose
 4920      00
 4921              	.LBE55:
 4922 3f90 E93DE6FF 		jmp	.L298
 4922      FF
 4923              	.L294:
1211:main.c        **** 				/////////////////////////go back to top...........
1212:main.c        **** 			}
1213:main.c        **** 			else{
1214:main.c        **** 				checkstart=0;
 4924              		.loc 1 1214 0
 4925 3f95 C7859CFC 		movl	$0, -868(%rbp)
 4925      FFFF0000 
 4925      0000
 4926 3f9f E92EE6FF 		jmp	.L298
 4926      FF
 4927              	.L331:
1054:main.c        **** 			}
 4928              		.loc 1 1054 0
 4929 3fa4 90       		nop
 4930 3fa5 E928E6FF 		jmp	.L298
 4930      FF
 4931              	.L333:
1128:main.c        **** 			////////////////////////////////////send final ACK
 4932              		.loc 1 1128 0
 4933 3faa 90       		nop
 4934              	.LBE18:
1215:main.c        **** 			}
1216:main.c        **** 		}
 4935              		.loc 1 1216 0
 4936 3fab E922E6FF 		jmp	.L298
 4936      FF
 4937              	.L169:
 4938              	.LBE17:
1217:main.c        **** 	}
1218:main.c        **** 	
1219:main.c        **** 	if ( actOpt->count ) {	
 4939              		.loc 1 1219 0
 4940 3fb0 488B8578 		movq	-648(%rbp), %rax
 4940      FDFFFF
 4941 3fb7 8B4060   		movl	96(%rax), %eax
 4942 3fba 85C0     		testl	%eax, %eax
 4943 3fbc 0F845401 		je	.L299
 4943      0000
1220:main.c        **** 		printf("Executing CommFPGA actions on FPGALink device %s...\n", vp);
 4944              		.loc 1 1220 0
 4945 3fc2 488B85D0 		movq	-560(%rbp), %rax
 4945      FDFFFF
 4946 3fc9 4889C6   		movq	%rax, %rsi
 4947 3fcc BF000000 		movl	$.LC149, %edi
 4947      00
 4948 3fd1 B8000000 		movl	$0, %eax
 4948      00
 4949 3fd6 E8000000 		call	printf
 4949      00
1221:main.c        **** 		if ( isCommCapable ) {
 4950              		.loc 1 1221 0
 4951 3fdb 80BD63FC 		cmpb	$0, -925(%rbp)
 4951      FFFF00
 4952 3fe2 0F84FF00 		je	.L300
 4952      0000
 4953              	.LBB56:
1222:main.c        **** 			uint8 isRunning;
1223:main.c        **** 			fStatus = flSelectConduit(handle, conduit, &error);
 4954              		.loc 1 1223 0
 4955 3fe8 0FB68D61 		movzbl	-927(%rbp), %ecx
 4955      FCFFFF
 4956 3fef 488B85E0 		movq	-800(%rbp), %rax
 4956      FCFFFF
 4957 3ff6 488D95E8 		leaq	-792(%rbp), %rdx
 4957      FCFFFF
 4958 3ffd 89CE     		movl	%ecx, %esi
 4959 3fff 4889C7   		movq	%rax, %rdi
 4960 4002 E8000000 		call	flSelectConduit
 4960      00
 4961 4007 89857CFC 		movl	%eax, -900(%rbp)
 4961      FFFF
1224:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 4962              		.loc 1 1224 0
 4963 400d 83BD7CFC 		cmpl	$0, -900(%rbp)
 4963      FFFF00
 4964 4014 740F     		je	.L301
 4965              		.loc 1 1224 0 is_stmt 0 discriminator 1
 4966 4016 C78578FC 		movl	$1, -904(%rbp)
 4966      FFFF0100 
 4966      0000
 4967 4020 E9C30500 		jmp	.L131
 4967      00
 4968              	.L301:
1225:main.c        **** 			fStatus = flIsFPGARunning(handle, &isRunning, &error);
 4969              		.loc 1 1225 0 is_stmt 1
 4970 4025 488B85E0 		movq	-800(%rbp), %rax
 4970      FCFFFF
 4971 402c 488D95E8 		leaq	-792(%rbp), %rdx
 4971      FCFFFF
 4972 4033 488D8DF8 		leaq	-776(%rbp), %rcx
 4972      FCFFFF
 4973 403a 4889CE   		movq	%rcx, %rsi
 4974 403d 4889C7   		movq	%rax, %rdi
 4975 4040 E8000000 		call	flIsFPGARunning
 4975      00
 4976 4045 89857CFC 		movl	%eax, -900(%rbp)
 4976      FFFF
1226:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 4977              		.loc 1 1226 0
 4978 404b 83BD7CFC 		cmpl	$0, -900(%rbp)
 4978      FFFF00
 4979 4052 740F     		je	.L303
 4980              		.loc 1 1226 0 is_stmt 0 discriminator 1
 4981 4054 C78578FC 		movl	$1, -904(%rbp)
 4981      FFFF0100 
 4981      0000
 4982 405e E9850500 		jmp	.L131
 4982      00
 4983              	.L303:
1227:main.c        **** 			if ( isRunning ) {
 4984              		.loc 1 1227 0 is_stmt 1
 4985 4063 0FB685F8 		movzbl	-776(%rbp), %eax
 4985      FCFFFF
 4986 406a 84C0     		testb	%al, %al
 4987 406c 7449     		je	.L304
1228:main.c        **** 				pStatus = parseLine(handle, actOpt->sval[0], &error, UINT_MAX);
 4988              		.loc 1 1228 0
 4989 406e 488B8578 		movq	-648(%rbp), %rax
 4989      FDFFFF
 4990 4075 488B4068 		movq	104(%rax), %rax
 4991 4079 488B30   		movq	(%rax), %rsi
 4992 407c 488B85E0 		movq	-800(%rbp), %rax
 4992      FCFFFF
 4993 4083 488D95E8 		leaq	-792(%rbp), %rdx
 4993      FCFFFF
 4994 408a B9FFFFFF 		movl	$4294967295, %ecx
 4994      FF
 4995 408f 4889C7   		movq	%rax, %rdi
 4996 4092 E8ACC5FF 		call	parseLine
 4996      FF
 4997 4097 8985D4FC 		movl	%eax, -812(%rbp)
 4997      FFFF
1229:main.c        **** 				CHECK_STATUS(pStatus, pStatus, cleanup);
 4998              		.loc 1 1229 0
 4999 409d 83BDD4FC 		cmpl	$0, -812(%rbp)
 4999      FFFF00
 5000 40a4 7470     		je	.L299
 5001              		.loc 1 1229 0 is_stmt 0 discriminator 1
 5002 40a6 8B85D4FC 		movl	-812(%rbp), %eax
 5002      FFFF
 5003 40ac 898578FC 		movl	%eax, -904(%rbp)
 5003      FFFF
 5004 40b2 E9310500 		jmp	.L131
 5004      00
 5005              	.L304:
1230:main.c        **** 			} else {
1231:main.c        **** 				fprintf(stderr, "The FPGALink device at %s is not ready to talk - did you forget --program?\n",
 5006              		.loc 1 1231 0 is_stmt 1
 5007 40b7 488B0500 		movq	stderr(%rip), %rax
 5007      000000
 5008 40be 488B95D0 		movq	-560(%rbp), %rdx
 5008      FDFFFF
 5009 40c5 BE000000 		movl	$.LC128, %esi
 5009      00
 5010 40ca 4889C7   		movq	%rax, %rdi
 5011 40cd B8000000 		movl	$0, %eax
 5011      00
 5012 40d2 E8000000 		call	fprintf
 5012      00
1232:main.c        **** 				FAIL(FLP_ARGS, cleanup);
 5013              		.loc 1 1232 0
 5014 40d7 C78578FC 		movl	$12, -904(%rbp)
 5014      FFFF0C00 
 5014      0000
 5015 40e1 90       		nop
 5016 40e2 E9010500 		jmp	.L131
 5016      00
 5017              	.L300:
 5018              	.LBE56:
1233:main.c        **** 			}
1234:main.c        **** 		} else {
1235:main.c        **** 			fprintf(stderr, "Action requested but device at %s does not support CommFPGA\n", vp);
 5019              		.loc 1 1235 0
 5020 40e7 488B0500 		movq	stderr(%rip), %rax
 5020      000000
 5021 40ee 488B95D0 		movq	-560(%rbp), %rdx
 5021      FDFFFF
 5022 40f5 BE000000 		movl	$.LC129, %esi
 5022      00
 5023 40fa 4889C7   		movq	%rax, %rdi
 5024 40fd B8000000 		movl	$0, %eax
 5024      00
 5025 4102 E8000000 		call	fprintf
 5025      00
1236:main.c        **** 			FAIL(FLP_ARGS, cleanup);
 5026              		.loc 1 1236 0
 5027 4107 C78578FC 		movl	$12, -904(%rbp)
 5027      FFFF0C00 
 5027      0000
 5028 4111 E9D20400 		jmp	.L131
 5028      00
 5029              	.L299:
1237:main.c        **** 		}
1238:main.c        **** 	}
1239:main.c        **** 
1240:main.c        **** 	if ( dumpOpt->count ) {
 5030              		.loc 1 1240 0
 5031 4116 488B8598 		movq	-616(%rbp), %rax
 5031      FDFFFF
 5032 411d 8B4060   		movl	96(%rax), %eax
 5033 4120 85C0     		testl	%eax, %eax
 5034 4122 0F84E802 		je	.L306
 5034      0000
 5035              	.LBB57:
1241:main.c        **** 		const char *fileName;
1242:main.c        **** 		unsigned long chan = strtoul(dumpOpt->sval[0], (char**)&fileName, 10);
 5036              		.loc 1 1242 0
 5037 4128 488B8598 		movq	-616(%rbp), %rax
 5037      FDFFFF
 5038 412f 488B4068 		movq	104(%rax), %rax
 5039 4133 488B00   		movq	(%rax), %rax
 5040 4136 488D8DF0 		leaq	-784(%rbp), %rcx
 5040      FCFFFF
 5041 413d BA0A0000 		movl	$10, %edx
 5041      00
 5042 4142 4889CE   		movq	%rcx, %rsi
 5043 4145 4889C7   		movq	%rax, %rdi
 5044 4148 E8000000 		call	strtoul
 5044      00
 5045 414d 48898540 		movq	%rax, -448(%rbp)
 5045      FEFFFF
1243:main.c        **** 		FILE *file = NULL;
 5046              		.loc 1 1243 0
 5047 4154 48C78548 		movq	$0, -440(%rbp)
 5047      FEFFFF00 
 5047      000000
1244:main.c        **** 		const uint8 *recvData;
1245:main.c        **** 		uint32 actualLength;
1246:main.c        **** 		if ( *fileName != ':' ) {
 5048              		.loc 1 1246 0
 5049 415f 488B85F0 		movq	-784(%rbp), %rax
 5049      FCFFFF
 5050 4166 0FB600   		movzbl	(%rax), %eax
 5051 4169 3C3A     		cmpb	$58, %al
 5052 416b 742F     		je	.L307
1247:main.c        **** 			fprintf(stderr, "%s: invalid argument to option -l|--dumploop=<ch:file.bin>\n", progName);
 5053              		.loc 1 1247 0
 5054 416d 488B0500 		movq	stderr(%rip), %rax
 5054      000000
 5055 4174 488B95C0 		movq	-576(%rbp), %rdx
 5055      FDFFFF
 5056 417b BE000000 		movl	$.LC150, %esi
 5056      00
 5057 4180 4889C7   		movq	%rax, %rdi
 5058 4183 B8000000 		movl	$0, %eax
 5058      00
 5059 4188 E8000000 		call	fprintf
 5059      00
1248:main.c        **** 			FAIL(FLP_ARGS, cleanup);
 5060              		.loc 1 1248 0
 5061 418d C78578FC 		movl	$12, -904(%rbp)
 5061      FFFF0C00 
 5061      0000
 5062 4197 E94C0400 		jmp	.L131
 5062      00
 5063              	.L307:
1249:main.c        **** 		}
1250:main.c        **** 		fileName++;
 5064              		.loc 1 1250 0
 5065 419c 488B85F0 		movq	-784(%rbp), %rax
 5065      FCFFFF
 5066 41a3 4883C001 		addq	$1, %rax
 5067 41a7 488985F0 		movq	%rax, -784(%rbp)
 5067      FCFFFF
1251:main.c        **** 		printf("Copying from channel %lu to %s", chan, fileName);
 5068              		.loc 1 1251 0
 5069 41ae 488B95F0 		movq	-784(%rbp), %rdx
 5069      FCFFFF
 5070 41b5 488B8540 		movq	-448(%rbp), %rax
 5070      FEFFFF
 5071 41bc 4889C6   		movq	%rax, %rsi
 5072 41bf BF000000 		movl	$.LC151, %edi
 5072      00
 5073 41c4 B8000000 		movl	$0, %eax
 5073      00
 5074 41c9 E8000000 		call	printf
 5074      00
1252:main.c        **** 		file = fopen(fileName, "wb");
 5075              		.loc 1 1252 0
 5076 41ce 488B85F0 		movq	-784(%rbp), %rax
 5076      FCFFFF
 5077 41d5 BE000000 		movl	$.LC13, %esi
 5077      00
 5078 41da 4889C7   		movq	%rax, %rdi
 5079 41dd E8000000 		call	fopen
 5079      00
 5080 41e2 48898548 		movq	%rax, -440(%rbp)
 5080      FEFFFF
1253:main.c        **** 		CHECK_STATUS(!file, FLP_CANNOT_SAVE, cleanup);
 5081              		.loc 1 1253 0
 5082 41e9 4883BD48 		cmpq	$0, -440(%rbp)
 5082      FEFFFF00 
 5083 41f1 750F     		jne	.L309
 5084              		.loc 1 1253 0 is_stmt 0 discriminator 1
 5085 41f3 C78578FC 		movl	$11, -904(%rbp)
 5085      FFFF0B00 
 5085      0000
 5086 41fd E9E60300 		jmp	.L131
 5086      00
 5087              	.L309:
1254:main.c        **** 		sigRegisterHandler();
 5088              		.loc 1 1254 0 is_stmt 1
 5089 4202 E8000000 		call	sigRegisterHandler
 5089      00
1255:main.c        **** 		fStatus = flSelectConduit(handle, conduit, &error);
 5090              		.loc 1 1255 0
 5091 4207 0FB68D61 		movzbl	-927(%rbp), %ecx
 5091      FCFFFF
 5092 420e 488B85E0 		movq	-800(%rbp), %rax
 5092      FCFFFF
 5093 4215 488D95E8 		leaq	-792(%rbp), %rdx
 5093      FCFFFF
 5094 421c 89CE     		movl	%ecx, %esi
 5095 421e 4889C7   		movq	%rax, %rdi
 5096 4221 E8000000 		call	flSelectConduit
 5096      00
 5097 4226 89857CFC 		movl	%eax, -900(%rbp)
 5097      FFFF
1256:main.c        **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 5098              		.loc 1 1256 0
 5099 422c 83BD7CFC 		cmpl	$0, -900(%rbp)
 5099      FFFF00
 5100 4233 740F     		je	.L310
 5101              		.loc 1 1256 0 is_stmt 0 discriminator 1
 5102 4235 C78578FC 		movl	$1, -904(%rbp)
 5102      FFFF0100 
 5102      0000
 5103 423f E9A40300 		jmp	.L131
 5103      00
 5104              	.L310:
1257:main.c        **** 		fStatus = flReadChannelAsyncSubmit(handle, (uint8)chan, 22528, NULL, &error, UINT_MAX);
 5105              		.loc 1 1257 0 is_stmt 1
 5106 4244 488B8540 		movq	-448(%rbp), %rax
 5106      FEFFFF
 5107 424b 0FB6F0   		movzbl	%al, %esi
 5108 424e 488B85E0 		movq	-800(%rbp), %rax
 5108      FCFFFF
 5109 4255 488D95E8 		leaq	-792(%rbp), %rdx
 5109      FCFFFF
 5110 425c 41B9FFFF 		movl	$4294967295, %r9d
 5110      FFFF
 5111 4262 4989D0   		movq	%rdx, %r8
 5112 4265 B9000000 		movl	$0, %ecx
 5112      00
 5113 426a BA005800 		movl	$22528, %edx
 5113      00
 5114 426f 4889C7   		movq	%rax, %rdi
 5115 4272 E8000000 		call	flReadChannelAsyncSubmit
 5115      00
 5116 4277 89857CFC 		movl	%eax, -900(%rbp)
 5116      FFFF
1258:main.c        **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 5117              		.loc 1 1258 0
 5118 427d 83BD7CFC 		cmpl	$0, -900(%rbp)
 5118      FFFF00
 5119 4284 740F     		je	.L311
 5120              		.loc 1 1258 0 is_stmt 0 discriminator 1
 5121 4286 C78578FC 		movl	$1, -904(%rbp)
 5121      FFFF0100 
 5121      0000
 5122 4290 E9530300 		jmp	.L131
 5122      00
 5123              	.L311:
1259:main.c        **** 		do {
1260:main.c        **** 			fStatus = flReadChannelAsyncSubmit(handle, (uint8)chan, 22528, NULL, &error, UINT_MAX);
 5124              		.loc 1 1260 0 is_stmt 1
 5125 4295 488B8540 		movq	-448(%rbp), %rax
 5125      FEFFFF
 5126 429c 0FB6F0   		movzbl	%al, %esi
 5127 429f 488B85E0 		movq	-800(%rbp), %rax
 5127      FCFFFF
 5128 42a6 488D95E8 		leaq	-792(%rbp), %rdx
 5128      FCFFFF
 5129 42ad 41B9FFFF 		movl	$4294967295, %r9d
 5129      FFFF
 5130 42b3 4989D0   		movq	%rdx, %r8
 5131 42b6 B9000000 		movl	$0, %ecx
 5131      00
 5132 42bb BA005800 		movl	$22528, %edx
 5132      00
 5133 42c0 4889C7   		movq	%rax, %rdi
 5134 42c3 E8000000 		call	flReadChannelAsyncSubmit
 5134      00
 5135 42c8 89857CFC 		movl	%eax, -900(%rbp)
 5135      FFFF
1261:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 5136              		.loc 1 1261 0
 5137 42ce 83BD7CFC 		cmpl	$0, -900(%rbp)
 5137      FFFF00
 5138 42d5 740F     		je	.L312
 5139              		.loc 1 1261 0 is_stmt 0 discriminator 1
 5140 42d7 C78578FC 		movl	$1, -904(%rbp)
 5140      FFFF0100 
 5140      0000
 5141 42e1 E9020300 		jmp	.L131
 5141      00
 5142              	.L312:
1262:main.c        **** 			fStatus = flReadChannelAsyncAwait(handle, &recvData, &actualLength, &actualLength, &error, UINT_
 5143              		.loc 1 1262 0 is_stmt 1
 5144 42e6 488B85E0 		movq	-800(%rbp), %rax
 5144      FCFFFF
 5145 42ed 488DBDE8 		leaq	-792(%rbp), %rdi
 5145      FCFFFF
 5146 42f4 488D8D74 		leaq	-908(%rbp), %rcx
 5146      FCFFFF
 5147 42fb 488D9574 		leaq	-908(%rbp), %rdx
 5147      FCFFFF
 5148 4302 488DB5F8 		leaq	-776(%rbp), %rsi
 5148      FCFFFF
 5149 4309 41B9FFFF 		movl	$4294967295, %r9d
 5149      FFFF
 5150 430f 4989F8   		movq	%rdi, %r8
 5151 4312 4889C7   		movq	%rax, %rdi
 5152 4315 E8000000 		call	flReadChannelAsyncAwait
 5152      00
 5153 431a 89857CFC 		movl	%eax, -900(%rbp)
 5153      FFFF
1263:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 5154              		.loc 1 1263 0
 5155 4320 83BD7CFC 		cmpl	$0, -900(%rbp)
 5155      FFFF00
 5156 4327 740F     		je	.L313
 5157              		.loc 1 1263 0 is_stmt 0 discriminator 1
 5158 4329 C78578FC 		movl	$1, -904(%rbp)
 5158      FFFF0100 
 5158      0000
 5159 4333 E9B00200 		jmp	.L131
 5159      00
 5160              	.L313:
1264:main.c        **** 			fwrite(recvData, 1, actualLength, file);
 5161              		.loc 1 1264 0 is_stmt 1
 5162 4338 8B8574FC 		movl	-908(%rbp), %eax
 5162      FFFF
 5163 433e 89C6     		movl	%eax, %esi
 5164 4340 488B85F8 		movq	-776(%rbp), %rax
 5164      FCFFFF
 5165 4347 488B9548 		movq	-440(%rbp), %rdx
 5165      FEFFFF
 5166 434e 4889D1   		movq	%rdx, %rcx
 5167 4351 4889F2   		movq	%rsi, %rdx
 5168 4354 BE010000 		movl	$1, %esi
 5168      00
 5169 4359 4889C7   		movq	%rax, %rdi
 5170 435c E8000000 		call	fwrite
 5170      00
1265:main.c        **** 			printf(".");
 5171              		.loc 1 1265 0
 5172 4361 BF2E0000 		movl	$46, %edi
 5172      00
 5173 4366 E8000000 		call	putchar
 5173      00
1266:main.c        **** 		} while ( !sigIsRaised() );
 5174              		.loc 1 1266 0
 5175 436b E8000000 		call	sigIsRaised
 5175      00
 5176 4370 83F001   		xorl	$1, %eax
 5177 4373 84C0     		testb	%al, %al
 5178 4375 0F851AFF 		jne	.L311
 5178      FFFF
1267:main.c        **** 		printf("\nCaught SIGINT, quitting...\n");
 5179              		.loc 1 1267 0
 5180 437b BF000000 		movl	$.LC152, %edi
 5180      00
 5181 4380 E8000000 		call	puts
 5181      00
1268:main.c        **** 		fStatus = flReadChannelAsyncAwait(handle, &recvData, &actualLength, &actualLength, &error, UINT_M
 5182              		.loc 1 1268 0
 5183 4385 488B85E0 		movq	-800(%rbp), %rax
 5183      FCFFFF
 5184 438c 488DBDE8 		leaq	-792(%rbp), %rdi
 5184      FCFFFF
 5185 4393 488D8D74 		leaq	-908(%rbp), %rcx
 5185      FCFFFF
 5186 439a 488D9574 		leaq	-908(%rbp), %rdx
 5186      FCFFFF
 5187 43a1 488DB5F8 		leaq	-776(%rbp), %rsi
 5187      FCFFFF
 5188 43a8 41B9FFFF 		movl	$4294967295, %r9d
 5188      FFFF
 5189 43ae 4989F8   		movq	%rdi, %r8
 5190 43b1 4889C7   		movq	%rax, %rdi
 5191 43b4 E8000000 		call	flReadChannelAsyncAwait
 5191      00
 5192 43b9 89857CFC 		movl	%eax, -900(%rbp)
 5192      FFFF
1269:main.c        **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 5193              		.loc 1 1269 0
 5194 43bf 83BD7CFC 		cmpl	$0, -900(%rbp)
 5194      FFFF00
 5195 43c6 7410     		je	.L314
 5196              		.loc 1 1269 0 is_stmt 0 discriminator 1
 5197 43c8 C78578FC 		movl	$1, -904(%rbp)
 5197      FFFF0100 
 5197      0000
 5198 43d2 90       		nop
 5199 43d3 E9100200 		jmp	.L131
 5199      00
 5200              	.L314:
1270:main.c        **** 		fwrite(recvData, 1, actualLength, file);
 5201              		.loc 1 1270 0 is_stmt 1
 5202 43d8 8B8574FC 		movl	-908(%rbp), %eax
 5202      FFFF
 5203 43de 89C6     		movl	%eax, %esi
 5204 43e0 488B85F8 		movq	-776(%rbp), %rax
 5204      FCFFFF
 5205 43e7 488B9548 		movq	-440(%rbp), %rdx
 5205      FEFFFF
 5206 43ee 4889D1   		movq	%rdx, %rcx
 5207 43f1 4889F2   		movq	%rsi, %rdx
 5208 43f4 BE010000 		movl	$1, %esi
 5208      00
 5209 43f9 4889C7   		movq	%rax, %rdi
 5210 43fc E8000000 		call	fwrite
 5210      00
1271:main.c        **** 		fclose(file);
 5211              		.loc 1 1271 0
 5212 4401 488B8548 		movq	-440(%rbp), %rax
 5212      FEFFFF
 5213 4408 4889C7   		movq	%rax, %rdi
 5214 440b E8000000 		call	fclose
 5214      00
 5215              	.L306:
 5216              	.LBE57:
1272:main.c        **** 	}
1273:main.c        **** 
1274:main.c        **** 	if ( shellOpt->count ) {
 5217              		.loc 1 1274 0
 5218 4410 488B8580 		movq	-640(%rbp), %rax
 5218      FDFFFF
 5219 4417 8B4060   		movl	96(%rax), %eax
 5220 441a 85C0     		testl	%eax, %eax
 5221 441c 0F84C601 		je	.L131
 5221      0000
1275:main.c        **** 		printf("\nEntering CommFPGA command-line mode:\n");
 5222              		.loc 1 1275 0
 5223 4422 BF000000 		movl	$.LC153, %edi
 5223      00
 5224 4427 E8000000 		call	puts
 5224      00
1276:main.c        **** 		if ( isCommCapable ) {
 5225              		.loc 1 1276 0
 5226 442c 80BD63FC 		cmpb	$0, -925(%rbp)
 5226      FFFF00
 5227 4433 0F848401 		je	.L315
 5227      0000
 5228              	.LBB58:
1277:main.c        **** 		   uint8 isRunning;
1278:main.c        **** 			fStatus = flSelectConduit(handle, conduit, &error);
 5229              		.loc 1 1278 0
 5230 4439 0FB68D61 		movzbl	-927(%rbp), %ecx
 5230      FCFFFF
 5231 4440 488B85E0 		movq	-800(%rbp), %rax
 5231      FCFFFF
 5232 4447 488D95E8 		leaq	-792(%rbp), %rdx
 5232      FCFFFF
 5233 444e 89CE     		movl	%ecx, %esi
 5234 4450 4889C7   		movq	%rax, %rdi
 5235 4453 E8000000 		call	flSelectConduit
 5235      00
 5236 4458 89857CFC 		movl	%eax, -900(%rbp)
 5236      FFFF
1279:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 5237              		.loc 1 1279 0
 5238 445e 83BD7CFC 		cmpl	$0, -900(%rbp)
 5238      FFFF00
 5239 4465 740F     		je	.L316
 5240              		.loc 1 1279 0 is_stmt 0 discriminator 1
 5241 4467 C78578FC 		movl	$1, -904(%rbp)
 5241      FFFF0100 
 5241      0000
 5242 4471 E9720100 		jmp	.L131
 5242      00
 5243              	.L316:
1280:main.c        **** 			fStatus = flIsFPGARunning(handle, &isRunning, &error);
 5244              		.loc 1 1280 0 is_stmt 1
 5245 4476 488B85E0 		movq	-800(%rbp), %rax
 5245      FCFFFF
 5246 447d 488D95E8 		leaq	-792(%rbp), %rdx
 5246      FCFFFF
 5247 4484 488D8DF8 		leaq	-776(%rbp), %rcx
 5247      FCFFFF
 5248 448b 4889CE   		movq	%rcx, %rsi
 5249 448e 4889C7   		movq	%rax, %rdi
 5250 4491 E8000000 		call	flIsFPGARunning
 5250      00
 5251 4496 89857CFC 		movl	%eax, -900(%rbp)
 5251      FFFF
1281:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 5252              		.loc 1 1281 0
 5253 449c 83BD7CFC 		cmpl	$0, -900(%rbp)
 5253      FFFF00
 5254 44a3 740F     		je	.L318
 5255              		.loc 1 1281 0 is_stmt 0 discriminator 1
 5256 44a5 C78578FC 		movl	$1, -904(%rbp)
 5256      FFFF0100 
 5256      0000
 5257 44af E9340100 		jmp	.L131
 5257      00
 5258              	.L318:
1282:main.c        **** 			if ( isRunning ) {
 5259              		.loc 1 1282 0 is_stmt 1
 5260 44b4 0FB685F8 		movzbl	-776(%rbp), %eax
 5260      FCFFFF
 5261 44bb 84C0     		testb	%al, %al
 5262 44bd 0F84CD00 		je	.L319
 5262      0000
 5263              	.L321:
1283:main.c        **** 				do {
1284:main.c        **** 					do {
1285:main.c        **** 						line = readline("> ");
 5264              		.loc 1 1285 0 discriminator 2
 5265 44c3 BF000000 		movl	$.LC154, %edi
 5265      00
 5266 44c8 E8000000 		call	readline
 5266      00
 5267 44cd 48898500 		movq	%rax, -768(%rbp)
 5267      FDFFFF
1286:main.c        **** 					} while ( line && !line[0] );
 5268              		.loc 1 1286 0 discriminator 2
 5269 44d4 4883BD00 		cmpq	$0, -768(%rbp)
 5269      FDFFFF00 
 5270 44dc 740E     		je	.L320
 5271              		.loc 1 1286 0 is_stmt 0 discriminator 1
 5272 44de 488B8500 		movq	-768(%rbp), %rax
 5272      FDFFFF
 5273 44e5 0FB600   		movzbl	(%rax), %eax
 5274 44e8 84C0     		testb	%al, %al
 5275 44ea 74D7     		je	.L321
 5276              	.L320:
1287:main.c        **** 					if ( line && line[0] && line[0] != 'q' ) {
 5277              		.loc 1 1287 0 is_stmt 1
 5278 44ec 4883BD00 		cmpq	$0, -768(%rbp)
 5278      FDFFFF00 
 5279 44f4 747C     		je	.L322
 5280              		.loc 1 1287 0 is_stmt 0 discriminator 1
 5281 44f6 488B8500 		movq	-768(%rbp), %rax
 5281      FDFFFF
 5282 44fd 0FB600   		movzbl	(%rax), %eax
 5283 4500 84C0     		testb	%al, %al
 5284 4502 746E     		je	.L322
 5285              		.loc 1 1287 0 discriminator 2
 5286 4504 488B8500 		movq	-768(%rbp), %rax
 5286      FDFFFF
 5287 450b 0FB600   		movzbl	(%rax), %eax
 5288 450e 3C71     		cmpb	$113, %al
 5289 4510 7460     		je	.L322
1288:main.c        **** 						add_history(line);
 5290              		.loc 1 1288 0 is_stmt 1
 5291 4512 488B8500 		movq	-768(%rbp), %rax
 5291      FDFFFF
 5292 4519 4889C7   		movq	%rax, %rdi
 5293 451c E8000000 		call	add_history
 5293      00
1289:main.c        **** 						pStatus = parseLine(handle, line, &error, UINT_MAX);
 5294              		.loc 1 1289 0
 5295 4521 488B85E0 		movq	-800(%rbp), %rax
 5295      FCFFFF
 5296 4528 488D95E8 		leaq	-792(%rbp), %rdx
 5296      FCFFFF
 5297 452f 488BB500 		movq	-768(%rbp), %rsi
 5297      FDFFFF
 5298 4536 B9FFFFFF 		movl	$4294967295, %ecx
 5298      FF
 5299 453b 4889C7   		movq	%rax, %rdi
 5300 453e E800C1FF 		call	parseLine
 5300      FF
 5301 4543 8985D4FC 		movl	%eax, -812(%rbp)
 5301      FFFF
1290:main.c        **** 						CHECK_STATUS(pStatus, pStatus, cleanup);
 5302              		.loc 1 1290 0
 5303 4549 83BDD4FC 		cmpl	$0, -812(%rbp)
 5303      FFFF00
 5304 4550 7411     		je	.L323
 5305              		.loc 1 1290 0 is_stmt 0 discriminator 1
 5306 4552 8B85D4FC 		movl	-812(%rbp), %eax
 5306      FFFF
 5307 4558 898578FC 		movl	%eax, -904(%rbp)
 5307      FFFF
 5308 455e E9850000 		jmp	.L131
 5308      00
 5309              	.L323:
1291:main.c        **** 						free((void*)line);
 5310              		.loc 1 1291 0 is_stmt 1
 5311 4563 488B8500 		movq	-768(%rbp), %rax
 5311      FDFFFF
 5312 456a 4889C7   		movq	%rax, %rdi
 5313 456d E8000000 		call	free
 5313      00
 5314              	.L322:
1292:main.c        **** 					}
1293:main.c        **** 				} while ( line && line[0] != 'q' );
 5315              		.loc 1 1293 0
 5316 4572 4883BD00 		cmpq	$0, -768(%rbp)
 5316      FDFFFF00 
 5317 457a 746C     		je	.L131
 5318              		.loc 1 1293 0 is_stmt 0 discriminator 1
 5319 457c 488B8500 		movq	-768(%rbp), %rax
 5319      FDFFFF
 5320 4583 0FB600   		movzbl	(%rax), %eax
 5321 4586 3C71     		cmpb	$113, %al
 5322 4588 0F8535FF 		jne	.L321
 5322      FFFF
 5323 458e EB58     		jmp	.L131
 5324              	.L319:
1294:main.c        **** 			} else {
1295:main.c        **** 				fprintf(stderr, "The FPGALink device at %s is not ready to talk - did you forget --xsvf?\n", vp
 5325              		.loc 1 1295 0 is_stmt 1
 5326 4590 488B0500 		movq	stderr(%rip), %rax
 5326      000000
 5327 4597 488B95D0 		movq	-560(%rbp), %rdx
 5327      FDFFFF
 5328 459e BE000000 		movl	$.LC155, %esi
 5328      00
 5329 45a3 4889C7   		movq	%rax, %rdi
 5330 45a6 B8000000 		movl	$0, %eax
 5330      00
 5331 45ab E8000000 		call	fprintf
 5331      00
1296:main.c        **** 				FAIL(FLP_ARGS, cleanup);
 5332              		.loc 1 1296 0
 5333 45b0 C78578FC 		movl	$12, -904(%rbp)
 5333      FFFF0C00 
 5333      0000
 5334 45ba 90       		nop
 5335 45bb EB2B     		jmp	.L131
 5336              	.L315:
 5337              	.LBE58:
1297:main.c        **** 			}
1298:main.c        **** 		} else {
1299:main.c        **** 			fprintf(stderr, "Shell requested but device at %s does not support CommFPGA\n", vp);
 5338              		.loc 1 1299 0
 5339 45bd 488B0500 		movq	stderr(%rip), %rax
 5339      000000
 5340 45c4 488B95D0 		movq	-560(%rbp), %rdx
 5340      FDFFFF
 5341 45cb BE000000 		movl	$.LC156, %esi
 5341      00
 5342 45d0 4889C7   		movq	%rax, %rdi
 5343 45d3 B8000000 		movl	$0, %eax
 5343      00
 5344 45d8 E8000000 		call	fprintf
 5344      00
1300:main.c        **** 			FAIL(FLP_ARGS, cleanup);
 5345              		.loc 1 1300 0
 5346 45dd C78578FC 		movl	$12, -904(%rbp)
 5346      FFFF0C00 
 5346      0000
 5347 45e7 90       		nop
 5348              	.L131:
1301:main.c        **** 		}
1302:main.c        **** 	}
1303:main.c        **** 
1304:main.c        **** cleanup:
1305:main.c        **** 	free((void*)line);
 5349              		.loc 1 1305 0
 5350 45e8 488B8500 		movq	-768(%rbp), %rax
 5350      FDFFFF
 5351 45ef 4889C7   		movq	%rax, %rdi
 5352 45f2 E8000000 		call	free
 5352      00
1306:main.c        **** 	flClose(handle);
 5353              		.loc 1 1306 0
 5354 45f7 488B85E0 		movq	-800(%rbp), %rax
 5354      FCFFFF
 5355 45fe 4889C7   		movq	%rax, %rdi
 5356 4601 E8000000 		call	flClose
 5356      00
1307:main.c        **** 	if ( error ) {
 5357              		.loc 1 1307 0
 5358 4606 488B85E8 		movq	-792(%rbp), %rax
 5358      FCFFFF
 5359 460d 4885C0   		testq	%rax, %rax
 5360 4610 742F     		je	.L325
1308:main.c        **** 		fprintf(stderr, "%s\n", error);
 5361              		.loc 1 1308 0
 5362 4612 488B95E8 		movq	-792(%rbp), %rdx
 5362      FCFFFF
 5363 4619 488B0500 		movq	stderr(%rip), %rax
 5363      000000
 5364 4620 BE000000 		movl	$.LC157, %esi
 5364      00
 5365 4625 4889C7   		movq	%rax, %rdi
 5366 4628 B8000000 		movl	$0, %eax
 5366      00
 5367 462d E8000000 		call	fprintf
 5367      00
1309:main.c        **** 		flFreeError(error);
 5368              		.loc 1 1309 0
 5369 4632 488B85E8 		movq	-792(%rbp), %rax
 5369      FCFFFF
 5370 4639 4889C7   		movq	%rax, %rdi
 5371 463c E8000000 		call	flFreeError
 5371      00
 5372              	.L325:
1310:main.c        **** 	}
1311:main.c        **** 	return retVal;
 5373              		.loc 1 1311 0
 5374 4641 8B8578FC 		movl	-904(%rbp), %eax
 5374      FFFF
1312:main.c        **** }
 5375              		.loc 1 1312 0
 5376 4647 488B5DE8 		movq	-24(%rbp), %rbx
 5377 464b 6448331C 		xorq	%fs:40, %rbx
 5377      25280000 
 5377      00
 5378 4654 7405     		je	.L327
 5379 4656 E8000000 		call	__stack_chk_fail
 5379      00
 5380              	.L327:
 5381 465b 488B5DF8 		movq	-8(%rbp), %rbx
 5382 465f C9       		leave
 5383              		.cfi_def_cfa 7, 8
 5384 4660 C3       		ret
 5385              		.cfi_endproc
 5386              	.LFE11:
 5388              		.globl	decToHexa32
 5390              	decToHexa32:
 5391              	.LFB12:
1313:main.c        **** 
1314:main.c        **** void decToHexa32(unsigned long n, char* hexaDeciNum){
 5392              		.loc 1 1314 0
 5393              		.cfi_startproc
 5394 4661 55       		pushq	%rbp
 5395              		.cfi_def_cfa_offset 16
 5396              		.cfi_offset 6, -16
 5397 4662 4889E5   		movq	%rsp, %rbp
 5398              		.cfi_def_cfa_register 6
 5399 4665 48897DE8 		movq	%rdi, -24(%rbp)
 5400 4669 488975E0 		movq	%rsi, -32(%rbp)
1315:main.c        ****     int i = 7;
 5401              		.loc 1 1315 0
 5402 466d C745F807 		movl	$7, -8(%rbp)
 5402      000000
1316:main.c        ****     while(i>=0)
 5403              		.loc 1 1316 0
 5404 4674 EB50     		jmp	.L335
 5405              	.L338:
 5406              	.LBB59:
1317:main.c        ****     {   
1318:main.c        ****         int temp;
1319:main.c        ****         temp = n % 16;
 5407              		.loc 1 1319 0
 5408 4676 488B45E8 		movq	-24(%rbp), %rax
 5409 467a 83E00F   		andl	$15, %eax
 5410 467d 8945FC   		movl	%eax, -4(%rbp)
1320:main.c        ****         if(temp < 10){
 5411              		.loc 1 1320 0
 5412 4680 837DFC09 		cmpl	$9, -4(%rbp)
 5413 4684 7F1B     		jg	.L336
1321:main.c        ****         	hexaDeciNum[i] = (char)(temp + 48);
 5414              		.loc 1 1321 0
 5415 4686 8B45F8   		movl	-8(%rbp), %eax
 5416 4689 4863D0   		movslq	%eax, %rdx
 5417 468c 488B45E0 		movq	-32(%rbp), %rax
 5418 4690 4801D0   		addq	%rdx, %rax
 5419 4693 8B55FC   		movl	-4(%rbp), %edx
 5420 4696 83C230   		addl	$48, %edx
 5421 4699 8810     		movb	%dl, (%rax)
1322:main.c        ****             i = i - 1;
 5422              		.loc 1 1322 0
 5423 469b 836DF801 		subl	$1, -8(%rbp)
 5424 469f EB19     		jmp	.L337
 5425              	.L336:
1323:main.c        ****         }
1324:main.c        ****         else{
1325:main.c        ****             hexaDeciNum[i] = temp + 87;
 5426              		.loc 1 1325 0
 5427 46a1 8B45F8   		movl	-8(%rbp), %eax
 5428 46a4 4863D0   		movslq	%eax, %rdx
 5429 46a7 488B45E0 		movq	-32(%rbp), %rax
 5430 46ab 4801D0   		addq	%rdx, %rax
 5431 46ae 8B55FC   		movl	-4(%rbp), %edx
 5432 46b1 83C257   		addl	$87, %edx
 5433 46b4 8810     		movb	%dl, (%rax)
1326:main.c        ****             i = i-1;
 5434              		.loc 1 1326 0
 5435 46b6 836DF801 		subl	$1, -8(%rbp)
 5436              	.L337:
1327:main.c        ****         }
1328:main.c        ****         n = n/16;
 5437              		.loc 1 1328 0
 5438 46ba 488B45E8 		movq	-24(%rbp), %rax
 5439 46be 48C1E804 		shrq	$4, %rax
 5440 46c2 488945E8 		movq	%rax, -24(%rbp)
 5441              	.L335:
 5442              	.LBE59:
1316:main.c        ****     {   
 5443              		.loc 1 1316 0
 5444 46c6 837DF800 		cmpl	$0, -8(%rbp)
 5445 46ca 79AA     		jns	.L338
1329:main.c        ****     }
1330:main.c        **** }
 5446              		.loc 1 1330 0
 5447 46cc 90       		nop
 5448 46cd 5D       		popq	%rbp
 5449              		.cfi_def_cfa 7, 8
 5450 46ce C3       		ret
 5451              		.cfi_endproc
 5452              	.LFE12:
 5454              		.globl	send_chan
 5456              	send_chan:
 5457              	.LFB13:
1331:main.c        **** void send_chan(long data, char* write, int channel){
 5458              		.loc 1 1331 0
 5459              		.cfi_startproc
 5460 46cf 55       		pushq	%rbp
 5461              		.cfi_def_cfa_offset 16
 5462              		.cfi_offset 6, -16
 5463 46d0 4889E5   		movq	%rsp, %rbp
 5464              		.cfi_def_cfa_register 6
 5465 46d3 53       		pushq	%rbx
 5466 46d4 4881ECA8 		subq	$168, %rsp
 5466      000000
 5467              		.cfi_offset 3, -24
 5468 46db 4889BD68 		movq	%rdi, -152(%rbp)
 5468      FFFFFF
 5469 46e2 4889B560 		movq	%rsi, -160(%rbp)
 5469      FFFFFF
 5470 46e9 89955CFF 		movl	%edx, -164(%rbp)
 5470      FFFF
 5471              		.loc 1 1331 0
 5472 46ef 64488B04 		movq	%fs:40, %rax
 5472      25280000 
 5472      00
 5473 46f8 488945E8 		movq	%rax, -24(%rbp)
 5474 46fc 31C0     		xorl	%eax, %eax
1332:main.c        **** 	data=encrypter(data,Key);
 5475              		.loc 1 1332 0
 5476 46fe 488B1500 		movq	Key(%rip), %rdx
 5476      000000
 5477 4705 488B8568 		movq	-152(%rbp), %rax
 5477      FFFFFF
 5478 470c 4889D6   		movq	%rdx, %rsi
 5479 470f 4889C7   		movq	%rax, %rdi
 5480 4712 E8000000 		call	encrypter
 5480      00
 5481 4717 48898568 		movq	%rax, -152(%rbp)
 5481      FFFFFF
1333:main.c        **** 	char ch1[2], ch2[3];
1334:main.c        **** 	ch1[1]='\0';
 5482              		.loc 1 1334 0
 5483 471e C6458100 		movb	$0, -127(%rbp)
1335:main.c        **** 	ch2[2]='\0';
 5484              		.loc 1 1335 0
 5485 4722 C645B200 		movb	$0, -78(%rbp)
1336:main.c        **** 	char chan[8];
1337:main.c        **** 	decToHexa32(channel,chan);
 5486              		.loc 1 1337 0
 5487 4726 8B855CFF 		movl	-164(%rbp), %eax
 5487      FFFF
 5488 472c 4898     		cltq
 5489 472e 488D55C0 		leaq	-64(%rbp), %rdx
 5490 4732 4889D6   		movq	%rdx, %rsi
 5491 4735 4889C7   		movq	%rax, %rdi
 5492 4738 E8000000 		call	decToHexa32
 5492      00
1338:main.c        **** 	ch1[0]=chan[7];
 5493              		.loc 1 1338 0
 5494 473d 0FB645C7 		movzbl	-57(%rbp), %eax
 5495 4741 884580   		movb	%al, -128(%rbp)
1339:main.c        **** 	char temp[]="00000000", wrs[]="w";
 5496              		.loc 1 1339 0
 5497 4744 48B83030 		movabsq	$3472328296227680304, %rax
 5497      30303030 
 5497      3030
 5498 474e 488945D0 		movq	%rax, -48(%rbp)
 5499 4752 C645D800 		movb	$0, -40(%rbp)
 5500 4756 66C74590 		movw	$119, -112(%rbp)
 5500      7700
1340:main.c        **** 	char g[]=" ";
 5501              		.loc 1 1340 0
 5502 475c 66C745A0 		movw	$32, -96(%rbp)
 5502      2000
1341:main.c        **** 	char *wr = malloc(strlen(wrs)+strlen(ch2)+strlen(ch1)+strlen(g)+strlen(temp)+1);
 5503              		.loc 1 1341 0
 5504 4762 488D4590 		leaq	-112(%rbp), %rax
 5505 4766 4889C7   		movq	%rax, %rdi
 5506 4769 E8000000 		call	strlen
 5506      00
 5507 476e 4889C3   		movq	%rax, %rbx
 5508 4771 488D45B0 		leaq	-80(%rbp), %rax
 5509 4775 4889C7   		movq	%rax, %rdi
 5510 4778 E8000000 		call	strlen
 5510      00
 5511 477d 4801C3   		addq	%rax, %rbx
 5512 4780 488D4580 		leaq	-128(%rbp), %rax
 5513 4784 4889C7   		movq	%rax, %rdi
 5514 4787 E8000000 		call	strlen
 5514      00
 5515 478c 4801C3   		addq	%rax, %rbx
 5516 478f 488D45A0 		leaq	-96(%rbp), %rax
 5517 4793 4889C7   		movq	%rax, %rdi
 5518 4796 E8000000 		call	strlen
 5518      00
 5519 479b 4801C3   		addq	%rax, %rbx
 5520 479e 488D45D0 		leaq	-48(%rbp), %rax
 5521 47a2 4889C7   		movq	%rax, %rdi
 5522 47a5 E8000000 		call	strlen
 5522      00
 5523 47aa 4801D8   		addq	%rbx, %rax
 5524 47ad 4883C001 		addq	$1, %rax
 5525 47b1 4889C7   		movq	%rax, %rdi
 5526 47b4 E8000000 		call	malloc
 5526      00
 5527 47b9 48898578 		movq	%rax, -136(%rbp)
 5527      FFFFFF
1342:main.c        **** 	strcpy(wr, wrs);
 5528              		.loc 1 1342 0
 5529 47c0 488D5590 		leaq	-112(%rbp), %rdx
 5530 47c4 488B8578 		movq	-136(%rbp), %rax
 5530      FFFFFF
 5531 47cb 4889D6   		movq	%rdx, %rsi
 5532 47ce 4889C7   		movq	%rax, %rdi
 5533 47d1 E8000000 		call	strcpy
 5533      00
1343:main.c        **** 	decToHexa32(data, temp);
 5534              		.loc 1 1343 0
 5535 47d6 488B8568 		movq	-152(%rbp), %rax
 5535      FFFFFF
 5536 47dd 488D55D0 		leaq	-48(%rbp), %rdx
 5537 47e1 4889D6   		movq	%rdx, %rsi
 5538 47e4 4889C7   		movq	%rax, %rdi
 5539 47e7 E8000000 		call	decToHexa32
 5539      00
1344:main.c        **** 	if(channel>=16){
 5540              		.loc 1 1344 0
 5541 47ec 83BD5CFF 		cmpl	$15, -164(%rbp)
 5541      FFFF0F
 5542 47f3 7E26     		jle	.L340
1345:main.c        **** 		ch2[0]=chan[6];
 5543              		.loc 1 1345 0
 5544 47f5 0FB645C6 		movzbl	-58(%rbp), %eax
 5545 47f9 8845B0   		movb	%al, -80(%rbp)
1346:main.c        **** 		ch2[1]=chan[7];
 5546              		.loc 1 1346 0
 5547 47fc 0FB645C7 		movzbl	-57(%rbp), %eax
 5548 4800 8845B1   		movb	%al, -79(%rbp)
1347:main.c        **** 		strcat(wr,ch2);
 5549              		.loc 1 1347 0
 5550 4803 488D55B0 		leaq	-80(%rbp), %rdx
 5551 4807 488B8578 		movq	-136(%rbp), %rax
 5551      FFFFFF
 5552 480e 4889D6   		movq	%rdx, %rsi
 5553 4811 4889C7   		movq	%rax, %rdi
 5554 4814 E8000000 		call	strcat
 5554      00
 5555 4819 EB16     		jmp	.L341
 5556              	.L340:
1348:main.c        **** 	}
1349:main.c        **** 	else{
1350:main.c        **** 		strcat(wr,ch1);
 5557              		.loc 1 1350 0
 5558 481b 488D5580 		leaq	-128(%rbp), %rdx
 5559 481f 488B8578 		movq	-136(%rbp), %rax
 5559      FFFFFF
 5560 4826 4889D6   		movq	%rdx, %rsi
 5561 4829 4889C7   		movq	%rax, %rdi
 5562 482c E8000000 		call	strcat
 5562      00
 5563              	.L341:
1351:main.c        **** 	}
1352:main.c        **** 	strcat(wr,g);
 5564              		.loc 1 1352 0
 5565 4831 488D55A0 		leaq	-96(%rbp), %rdx
 5566 4835 488B8578 		movq	-136(%rbp), %rax
 5566      FFFFFF
 5567 483c 4889D6   		movq	%rdx, %rsi
 5568 483f 4889C7   		movq	%rax, %rdi
 5569 4842 E8000000 		call	strcat
 5569      00
1353:main.c        **** 	strcat(wr,temp);
 5570              		.loc 1 1353 0
 5571 4847 488D55D0 		leaq	-48(%rbp), %rdx
 5572 484b 488B8578 		movq	-136(%rbp), %rax
 5572      FFFFFF
 5573 4852 4889D6   		movq	%rdx, %rsi
 5574 4855 4889C7   		movq	%rax, %rdi
 5575 4858 E8000000 		call	strcat
 5575      00
1354:main.c        **** 	strcpy(write,wr);
 5576              		.loc 1 1354 0
 5577 485d 488B9578 		movq	-136(%rbp), %rdx
 5577      FFFFFF
 5578 4864 488B8560 		movq	-160(%rbp), %rax
 5578      FFFFFF
 5579 486b 4889D6   		movq	%rdx, %rsi
 5580 486e 4889C7   		movq	%rax, %rdi
 5581 4871 E8000000 		call	strcpy
 5581      00
1355:main.c        **** 	free(wr);
 5582              		.loc 1 1355 0
 5583 4876 488B8578 		movq	-136(%rbp), %rax
 5583      FFFFFF
 5584 487d 4889C7   		movq	%rax, %rdi
 5585 4880 E8000000 		call	free
 5585      00
1356:main.c        **** }
 5586              		.loc 1 1356 0
 5587 4885 90       		nop
 5588 4886 488B45E8 		movq	-24(%rbp), %rax
 5589 488a 64483304 		xorq	%fs:40, %rax
 5589      25280000 
 5589      00
 5590 4893 7405     		je	.L342
 5591 4895 E8000000 		call	__stack_chk_fail
 5591      00
 5592              	.L342:
 5593 489a 4881C4A8 		addq	$168, %rsp
 5593      000000
 5594 48a1 5B       		popq	%rbx
 5595 48a2 5D       		popq	%rbp
 5596              		.cfi_def_cfa 7, 8
 5597 48a3 C3       		ret
 5598              		.cfi_endproc
 5599              	.LFE13:
 5601              		.globl	read_chan
 5603              	read_chan:
 5604              	.LFB14:
1357:main.c        **** void read_chan(char* fileName, char* write, int channel){
 5605              		.loc 1 1357 0
 5606              		.cfi_startproc
 5607 48a4 55       		pushq	%rbp
 5608              		.cfi_def_cfa_offset 16
 5609              		.cfi_offset 6, -16
 5610 48a5 4889E5   		movq	%rsp, %rbp
 5611              		.cfi_def_cfa_register 6
 5612 48a8 53       		pushq	%rbx
 5613 48a9 4881EC98 		subq	$152, %rsp
 5613      000000
 5614              		.cfi_offset 3, -24
 5615 48b0 4889BD78 		movq	%rdi, -136(%rbp)
 5615      FFFFFF
 5616 48b7 4889B570 		movq	%rsi, -144(%rbp)
 5616      FFFFFF
 5617 48be 89956CFF 		movl	%edx, -148(%rbp)
 5617      FFFF
 5618              		.loc 1 1357 0
 5619 48c4 64488B04 		movq	%fs:40, %rax
 5619      25280000 
 5619      00
 5620 48cd 488945E8 		movq	%rax, -24(%rbp)
 5621 48d1 31C0     		xorl	%eax, %eax
1358:main.c        **** 	char ch1[2], ch2[3];
1359:main.c        **** 	ch1[1]='\0';
 5622              		.loc 1 1359 0
 5623 48d3 C6459100 		movb	$0, -111(%rbp)
1360:main.c        **** 	ch2[2]='\0';
 5624              		.loc 1 1360 0
 5625 48d7 C645C200 		movb	$0, -62(%rbp)
1361:main.c        **** 	char chan[8];
1362:main.c        **** 	decToHexa32(channel,chan);
 5626              		.loc 1 1362 0
 5627 48db 8B856CFF 		movl	-148(%rbp), %eax
 5627      FFFF
 5628 48e1 4898     		cltq
 5629 48e3 488D55E0 		leaq	-32(%rbp), %rdx
 5630 48e7 4889D6   		movq	%rdx, %rsi
 5631 48ea 4889C7   		movq	%rax, %rdi
 5632 48ed E8000000 		call	decToHexa32
 5632      00
1363:main.c        **** 	ch1[0]=chan[7];
 5633              		.loc 1 1363 0
 5634 48f2 0FB645E7 		movzbl	-25(%rbp), %eax
 5635 48f6 884590   		movb	%al, -112(%rbp)
1364:main.c        **** 	char temp[]="\"", wrs[]="r";
 5636              		.loc 1 1364 0
 5637 48f9 66C745A0 		movw	$34, -96(%rbp)
 5637      2200
 5638 48ff 66C745B0 		movw	$114, -80(%rbp)
 5638      7200
1365:main.c        **** 	char g[]=" 4 ";
 5639              		.loc 1 1365 0
 5640 4905 C745D020 		movl	$2110496, -48(%rbp)
 5640      342000
1366:main.c        **** 	char *wr = malloc(strlen(wrs)+strlen(ch2)+strlen(ch1)+strlen(g)+strlen(temp)+strlen(fileName)+strl
 5641              		.loc 1 1366 0
 5642 490c 488D45B0 		leaq	-80(%rbp), %rax
 5643 4910 4889C7   		movq	%rax, %rdi
 5644 4913 E8000000 		call	strlen
 5644      00
 5645 4918 4889C3   		movq	%rax, %rbx
 5646 491b 488D45C0 		leaq	-64(%rbp), %rax
 5647 491f 4889C7   		movq	%rax, %rdi
 5648 4922 E8000000 		call	strlen
 5648      00
 5649 4927 4801C3   		addq	%rax, %rbx
 5650 492a 488D4590 		leaq	-112(%rbp), %rax
 5651 492e 4889C7   		movq	%rax, %rdi
 5652 4931 E8000000 		call	strlen
 5652      00
 5653 4936 4801C3   		addq	%rax, %rbx
 5654 4939 488D45D0 		leaq	-48(%rbp), %rax
 5655 493d 4889C7   		movq	%rax, %rdi
 5656 4940 E8000000 		call	strlen
 5656      00
 5657 4945 4801C3   		addq	%rax, %rbx
 5658 4948 488D45A0 		leaq	-96(%rbp), %rax
 5659 494c 4889C7   		movq	%rax, %rdi
 5660 494f E8000000 		call	strlen
 5660      00
 5661 4954 4801C3   		addq	%rax, %rbx
 5662 4957 488B8578 		movq	-136(%rbp), %rax
 5662      FFFFFF
 5663 495e 4889C7   		movq	%rax, %rdi
 5664 4961 E8000000 		call	strlen
 5664      00
 5665 4966 4801C3   		addq	%rax, %rbx
 5666 4969 488D45A0 		leaq	-96(%rbp), %rax
 5667 496d 4889C7   		movq	%rax, %rdi
 5668 4970 E8000000 		call	strlen
 5668      00
 5669 4975 4801D8   		addq	%rbx, %rax
 5670 4978 4883C001 		addq	$1, %rax
 5671 497c 4889C7   		movq	%rax, %rdi
 5672 497f E8000000 		call	malloc
 5672      00
 5673 4984 48894588 		movq	%rax, -120(%rbp)
1367:main.c        **** 	strcpy(wr, wrs);
 5674              		.loc 1 1367 0
 5675 4988 488D55B0 		leaq	-80(%rbp), %rdx
 5676 498c 488B4588 		movq	-120(%rbp), %rax
 5677 4990 4889D6   		movq	%rdx, %rsi
 5678 4993 4889C7   		movq	%rax, %rdi
 5679 4996 E8000000 		call	strcpy
 5679      00
1368:main.c        **** 	if(channel>=16){
 5680              		.loc 1 1368 0
 5681 499b 83BD6CFF 		cmpl	$15, -148(%rbp)
 5681      FFFF0F
 5682 49a2 7E23     		jle	.L344
1369:main.c        **** 		ch2[0]=chan[6];
 5683              		.loc 1 1369 0
 5684 49a4 0FB645E6 		movzbl	-26(%rbp), %eax
 5685 49a8 8845C0   		movb	%al, -64(%rbp)
1370:main.c        **** 		ch2[1]=chan[7];
 5686              		.loc 1 1370 0
 5687 49ab 0FB645E7 		movzbl	-25(%rbp), %eax
 5688 49af 8845C1   		movb	%al, -63(%rbp)
1371:main.c        **** 		strcat(wr,ch2);
 5689              		.loc 1 1371 0
 5690 49b2 488D55C0 		leaq	-64(%rbp), %rdx
 5691 49b6 488B4588 		movq	-120(%rbp), %rax
 5692 49ba 4889D6   		movq	%rdx, %rsi
 5693 49bd 4889C7   		movq	%rax, %rdi
 5694 49c0 E8000000 		call	strcat
 5694      00
 5695 49c5 EB13     		jmp	.L345
 5696              	.L344:
1372:main.c        **** 	}
1373:main.c        **** 	else{
1374:main.c        **** 		strcat(wr,ch1);
 5697              		.loc 1 1374 0
 5698 49c7 488D5590 		leaq	-112(%rbp), %rdx
 5699 49cb 488B4588 		movq	-120(%rbp), %rax
 5700 49cf 4889D6   		movq	%rdx, %rsi
 5701 49d2 4889C7   		movq	%rax, %rdi
 5702 49d5 E8000000 		call	strcat
 5702      00
 5703              	.L345:
1375:main.c        **** 	}
1376:main.c        **** 	strcat(wr,g);
 5704              		.loc 1 1376 0
 5705 49da 488D55D0 		leaq	-48(%rbp), %rdx
 5706 49de 488B4588 		movq	-120(%rbp), %rax
 5707 49e2 4889D6   		movq	%rdx, %rsi
 5708 49e5 4889C7   		movq	%rax, %rdi
 5709 49e8 E8000000 		call	strcat
 5709      00
1377:main.c        **** 	strcat(wr,temp);
 5710              		.loc 1 1377 0
 5711 49ed 488D55A0 		leaq	-96(%rbp), %rdx
 5712 49f1 488B4588 		movq	-120(%rbp), %rax
 5713 49f5 4889D6   		movq	%rdx, %rsi
 5714 49f8 4889C7   		movq	%rax, %rdi
 5715 49fb E8000000 		call	strcat
 5715      00
1378:main.c        **** 	strcat(wr,fileName);
 5716              		.loc 1 1378 0
 5717 4a00 488B9578 		movq	-136(%rbp), %rdx
 5717      FFFFFF
 5718 4a07 488B4588 		movq	-120(%rbp), %rax
 5719 4a0b 4889D6   		movq	%rdx, %rsi
 5720 4a0e 4889C7   		movq	%rax, %rdi
 5721 4a11 E8000000 		call	strcat
 5721      00
1379:main.c        **** 	strcat(wr,temp);
 5722              		.loc 1 1379 0
 5723 4a16 488D55A0 		leaq	-96(%rbp), %rdx
 5724 4a1a 488B4588 		movq	-120(%rbp), %rax
 5725 4a1e 4889D6   		movq	%rdx, %rsi
 5726 4a21 4889C7   		movq	%rax, %rdi
 5727 4a24 E8000000 		call	strcat
 5727      00
1380:main.c        **** 	strcpy(write,wr);
 5728              		.loc 1 1380 0
 5729 4a29 488B5588 		movq	-120(%rbp), %rdx
 5730 4a2d 488B8570 		movq	-144(%rbp), %rax
 5730      FFFFFF
 5731 4a34 4889D6   		movq	%rdx, %rsi
 5732 4a37 4889C7   		movq	%rax, %rdi
 5733 4a3a E8000000 		call	strcpy
 5733      00
1381:main.c        **** 	free(wr);
 5734              		.loc 1 1381 0
 5735 4a3f 488B4588 		movq	-120(%rbp), %rax
 5736 4a43 4889C7   		movq	%rax, %rdi
 5737 4a46 E8000000 		call	free
 5737      00
1382:main.c        **** }
 5738              		.loc 1 1382 0
 5739 4a4b 90       		nop
 5740 4a4c 488B45E8 		movq	-24(%rbp), %rax
 5741 4a50 64483304 		xorq	%fs:40, %rax
 5741      25280000 
 5741      00
 5742 4a59 7405     		je	.L346
 5743 4a5b E8000000 		call	__stack_chk_fail
 5743      00
 5744              	.L346:
 5745 4a60 4881C498 		addq	$152, %rsp
 5745      000000
 5746 4a67 5B       		popq	%rbx
 5747 4a68 5D       		popq	%rbp
 5748              		.cfi_def_cfa 7, 8
 5749 4a69 C3       		ret
 5750              		.cfi_endproc
 5751              	.LFE14:
 5753              		.globl	send_data
 5755              	send_data:
 5756              	.LFB15:
1383:main.c        **** void send_data(long data, char* write){
 5757              		.loc 1 1383 0
 5758              		.cfi_startproc
 5759 4a6a 55       		pushq	%rbp
 5760              		.cfi_def_cfa_offset 16
 5761              		.cfi_offset 6, -16
 5762 4a6b 4889E5   		movq	%rsp, %rbp
 5763              		.cfi_def_cfa_register 6
 5764 4a6e 4883EC50 		subq	$80, %rsp
 5765 4a72 48897DB8 		movq	%rdi, -72(%rbp)
 5766 4a76 488975B0 		movq	%rsi, -80(%rbp)
 5767              		.loc 1 1383 0
 5768 4a7a 64488B04 		movq	%fs:40, %rax
 5768      25280000 
 5768      00
 5769 4a83 488945F8 		movq	%rax, -8(%rbp)
 5770 4a87 31C0     		xorl	%eax, %eax
1384:main.c        **** 	data=encrypter(data,Key);
 5771              		.loc 1 1384 0
 5772 4a89 488B1500 		movq	Key(%rip), %rdx
 5772      000000
 5773 4a90 488B45B8 		movq	-72(%rbp), %rax
 5774 4a94 4889D6   		movq	%rdx, %rsi
 5775 4a97 4889C7   		movq	%rax, %rdi
 5776 4a9a E8000000 		call	encrypter
 5776      00
 5777 4a9f 488945B8 		movq	%rax, -72(%rbp)
1385:main.c        **** 	char temp[]="00000000", wr[]="w1 00000000";
 5778              		.loc 1 1385 0
 5779 4aa3 48B83030 		movabsq	$3472328296227680304, %rax
 5779      30303030 
 5779      3030
 5780 4aad 488945D0 		movq	%rax, -48(%rbp)
 5781 4ab1 C645D800 		movb	$0, -40(%rbp)
 5782 4ab5 48B87731 		movabsq	$3472328296226632055, %rax
 5782      20303030 
 5782      3030
 5783 4abf 488945E0 		movq	%rax, -32(%rbp)
 5784 4ac3 C745E830 		movl	$3158064, -24(%rbp)
 5784      303000
1386:main.c        **** 	strcpy(write,wr);
 5785              		.loc 1 1386 0
 5786 4aca 488D55E0 		leaq	-32(%rbp), %rdx
 5787 4ace 488B45B0 		movq	-80(%rbp), %rax
 5788 4ad2 4889D6   		movq	%rdx, %rsi
 5789 4ad5 4889C7   		movq	%rax, %rdi
 5790 4ad8 E8000000 		call	strcpy
 5790      00
1387:main.c        **** 	decToHexa32(data, temp);
 5791              		.loc 1 1387 0
 5792 4add 488B45B8 		movq	-72(%rbp), %rax
 5793 4ae1 488D55D0 		leaq	-48(%rbp), %rdx
 5794 4ae5 4889D6   		movq	%rdx, %rsi
 5795 4ae8 4889C7   		movq	%rax, %rdi
 5796 4aeb E8000000 		call	decToHexa32
 5796      00
 5797              	.LBB60:
1388:main.c        **** 	for(int i=0;i<8;i++){
 5798              		.loc 1 1388 0
 5799 4af0 C745CC00 		movl	$0, -52(%rbp)
 5799      000000
 5800 4af7 EB20     		jmp	.L348
 5801              	.L349:
1389:main.c        **** 		write[3+i]=temp[i];
 5802              		.loc 1 1389 0 discriminator 3
 5803 4af9 8B45CC   		movl	-52(%rbp), %eax
 5804 4afc 83C003   		addl	$3, %eax
 5805 4aff 4863D0   		movslq	%eax, %rdx
 5806 4b02 488B45B0 		movq	-80(%rbp), %rax
 5807 4b06 4801C2   		addq	%rax, %rdx
 5808 4b09 8B45CC   		movl	-52(%rbp), %eax
 5809 4b0c 4898     		cltq
 5810 4b0e 0FB64405 		movzbl	-48(%rbp,%rax), %eax
 5810      D0
 5811 4b13 8802     		movb	%al, (%rdx)
1388:main.c        **** 	for(int i=0;i<8;i++){
 5812              		.loc 1 1388 0 discriminator 3
 5813 4b15 8345CC01 		addl	$1, -52(%rbp)
 5814              	.L348:
1388:main.c        **** 	for(int i=0;i<8;i++){
 5815              		.loc 1 1388 0 is_stmt 0 discriminator 1
 5816 4b19 837DCC07 		cmpl	$7, -52(%rbp)
 5817 4b1d 7EDA     		jle	.L349
 5818              	.LBE60:
1390:main.c        **** 	}
1391:main.c        **** }
 5819              		.loc 1 1391 0 is_stmt 1
 5820 4b1f 90       		nop
 5821 4b20 488B45F8 		movq	-8(%rbp), %rax
 5822 4b24 64483304 		xorq	%fs:40, %rax
 5822      25280000 
 5822      00
 5823 4b2d 7405     		je	.L350
 5824 4b2f E8000000 		call	__stack_chk_fail
 5824      00
 5825              	.L350:
 5826 4b34 C9       		leave
 5827              		.cfi_def_cfa 7, 8
 5828 4b35 C3       		ret
 5829              		.cfi_endproc
 5830              	.LFE15:
 5832              		.globl	decrypter
 5834              	decrypter:
 5835              	.LFB16:
1392:main.c        **** long decrypter( long C, long K){
 5836              		.loc 1 1392 0
 5837              		.cfi_startproc
 5838 4b36 55       		pushq	%rbp
 5839              		.cfi_def_cfa_offset 16
 5840              		.cfi_offset 6, -16
 5841 4b37 4889E5   		movq	%rsp, %rbp
 5842              		.cfi_def_cfa_register 6
 5843 4b3a 53       		pushq	%rbx
 5844 4b3b 4883EC48 		subq	$72, %rsp
 5845              		.cfi_offset 3, -24
 5846 4b3f 48897DB8 		movq	%rdi, -72(%rbp)
 5847 4b43 488975B0 		movq	%rsi, -80(%rbp)
1393:main.c        **** 	long P,T;
1394:main.c        **** 	P=C;
 5848              		.loc 1 1394 0
 5849 4b47 488B45B8 		movq	-72(%rbp), %rax
 5850 4b4b 488945D0 		movq	%rax, -48(%rbp)
1395:main.c        **** 	bool T3=nthbit(K,31)^nthbit(K,27)^nthbit(K,23)^nthbit(K,19)^nthbit(K,15)^nthbit(K,11)^nthbit(K,7)^
 5851              		.loc 1 1395 0
 5852 4b4f 488B45B0 		movq	-80(%rbp), %rax
 5853 4b53 BE1F0000 		movl	$31, %esi
 5853      00
 5854 4b58 4889C7   		movq	%rax, %rdi
 5855 4b5b E8000000 		call	nthbit
 5855      00
 5856 4b60 89C3     		movl	%eax, %ebx
 5857 4b62 488B45B0 		movq	-80(%rbp), %rax
 5858 4b66 BE1B0000 		movl	$27, %esi
 5858      00
 5859 4b6b 4889C7   		movq	%rax, %rdi
 5860 4b6e E8000000 		call	nthbit
 5860      00
 5861 4b73 31C3     		xorl	%eax, %ebx
 5862 4b75 488B45B0 		movq	-80(%rbp), %rax
 5863 4b79 BE170000 		movl	$23, %esi
 5863      00
 5864 4b7e 4889C7   		movq	%rax, %rdi
 5865 4b81 E8000000 		call	nthbit
 5865      00
 5866 4b86 31C3     		xorl	%eax, %ebx
 5867 4b88 488B45B0 		movq	-80(%rbp), %rax
 5868 4b8c BE130000 		movl	$19, %esi
 5868      00
 5869 4b91 4889C7   		movq	%rax, %rdi
 5870 4b94 E8000000 		call	nthbit
 5870      00
 5871 4b99 31C3     		xorl	%eax, %ebx
 5872 4b9b 488B45B0 		movq	-80(%rbp), %rax
 5873 4b9f BE0F0000 		movl	$15, %esi
 5873      00
 5874 4ba4 4889C7   		movq	%rax, %rdi
 5875 4ba7 E8000000 		call	nthbit
 5875      00
 5876 4bac 31C3     		xorl	%eax, %ebx
 5877 4bae 488B45B0 		movq	-80(%rbp), %rax
 5878 4bb2 BE0B0000 		movl	$11, %esi
 5878      00
 5879 4bb7 4889C7   		movq	%rax, %rdi
 5880 4bba E8000000 		call	nthbit
 5880      00
 5881 4bbf 31C3     		xorl	%eax, %ebx
 5882 4bc1 488B45B0 		movq	-80(%rbp), %rax
 5883 4bc5 BE070000 		movl	$7, %esi
 5883      00
 5884 4bca 4889C7   		movq	%rax, %rdi
 5885 4bcd E8000000 		call	nthbit
 5885      00
 5886 4bd2 31C3     		xorl	%eax, %ebx
 5887 4bd4 488B45B0 		movq	-80(%rbp), %rax
 5888 4bd8 BE030000 		movl	$3, %esi
 5888      00
 5889 4bdd 4889C7   		movq	%rax, %rdi
 5890 4be0 E8000000 		call	nthbit
 5890      00
 5891 4be5 31D8     		xorl	%ebx, %eax
 5892 4be7 0FB6C0   		movzbl	%al, %eax
 5893 4bea 85C0     		testl	%eax, %eax
 5894 4bec 0F95C0   		setne	%al
 5895 4bef 8845CC   		movb	%al, -52(%rbp)
1396:main.c        **** 	bool T2=nthbit(K,30)^nthbit(K,26)^nthbit(K,22)^nthbit(K,18)^nthbit(K,14)^nthbit(K,10)^nthbit(K,6)^
 5896              		.loc 1 1396 0
 5897 4bf2 488B45B0 		movq	-80(%rbp), %rax
 5898 4bf6 BE1E0000 		movl	$30, %esi
 5898      00
 5899 4bfb 4889C7   		movq	%rax, %rdi
 5900 4bfe E8000000 		call	nthbit
 5900      00
 5901 4c03 89C3     		movl	%eax, %ebx
 5902 4c05 488B45B0 		movq	-80(%rbp), %rax
 5903 4c09 BE1A0000 		movl	$26, %esi
 5903      00
 5904 4c0e 4889C7   		movq	%rax, %rdi
 5905 4c11 E8000000 		call	nthbit
 5905      00
 5906 4c16 31C3     		xorl	%eax, %ebx
 5907 4c18 488B45B0 		movq	-80(%rbp), %rax
 5908 4c1c BE160000 		movl	$22, %esi
 5908      00
 5909 4c21 4889C7   		movq	%rax, %rdi
 5910 4c24 E8000000 		call	nthbit
 5910      00
 5911 4c29 31C3     		xorl	%eax, %ebx
 5912 4c2b 488B45B0 		movq	-80(%rbp), %rax
 5913 4c2f BE120000 		movl	$18, %esi
 5913      00
 5914 4c34 4889C7   		movq	%rax, %rdi
 5915 4c37 E8000000 		call	nthbit
 5915      00
 5916 4c3c 31C3     		xorl	%eax, %ebx
 5917 4c3e 488B45B0 		movq	-80(%rbp), %rax
 5918 4c42 BE0E0000 		movl	$14, %esi
 5918      00
 5919 4c47 4889C7   		movq	%rax, %rdi
 5920 4c4a E8000000 		call	nthbit
 5920      00
 5921 4c4f 31C3     		xorl	%eax, %ebx
 5922 4c51 488B45B0 		movq	-80(%rbp), %rax
 5923 4c55 BE0A0000 		movl	$10, %esi
 5923      00
 5924 4c5a 4889C7   		movq	%rax, %rdi
 5925 4c5d E8000000 		call	nthbit
 5925      00
 5926 4c62 31C3     		xorl	%eax, %ebx
 5927 4c64 488B45B0 		movq	-80(%rbp), %rax
 5928 4c68 BE060000 		movl	$6, %esi
 5928      00
 5929 4c6d 4889C7   		movq	%rax, %rdi
 5930 4c70 E8000000 		call	nthbit
 5930      00
 5931 4c75 31C3     		xorl	%eax, %ebx
 5932 4c77 488B45B0 		movq	-80(%rbp), %rax
 5933 4c7b BE020000 		movl	$2, %esi
 5933      00
 5934 4c80 4889C7   		movq	%rax, %rdi
 5935 4c83 E8000000 		call	nthbit
 5935      00
 5936 4c88 31D8     		xorl	%ebx, %eax
 5937 4c8a 0FB6C0   		movzbl	%al, %eax
 5938 4c8d 85C0     		testl	%eax, %eax
 5939 4c8f 0F95C0   		setne	%al
 5940 4c92 8845CD   		movb	%al, -51(%rbp)
1397:main.c        **** 	bool T1=nthbit(K,29)^nthbit(K,25)^nthbit(K,21)^nthbit(K,17)^nthbit(K,13)^nthbit(K,9)^nthbit(K,5)^n
 5941              		.loc 1 1397 0
 5942 4c95 488B45B0 		movq	-80(%rbp), %rax
 5943 4c99 BE1D0000 		movl	$29, %esi
 5943      00
 5944 4c9e 4889C7   		movq	%rax, %rdi
 5945 4ca1 E8000000 		call	nthbit
 5945      00
 5946 4ca6 89C3     		movl	%eax, %ebx
 5947 4ca8 488B45B0 		movq	-80(%rbp), %rax
 5948 4cac BE190000 		movl	$25, %esi
 5948      00
 5949 4cb1 4889C7   		movq	%rax, %rdi
 5950 4cb4 E8000000 		call	nthbit
 5950      00
 5951 4cb9 31C3     		xorl	%eax, %ebx
 5952 4cbb 488B45B0 		movq	-80(%rbp), %rax
 5953 4cbf BE150000 		movl	$21, %esi
 5953      00
 5954 4cc4 4889C7   		movq	%rax, %rdi
 5955 4cc7 E8000000 		call	nthbit
 5955      00
 5956 4ccc 31C3     		xorl	%eax, %ebx
 5957 4cce 488B45B0 		movq	-80(%rbp), %rax
 5958 4cd2 BE110000 		movl	$17, %esi
 5958      00
 5959 4cd7 4889C7   		movq	%rax, %rdi
 5960 4cda E8000000 		call	nthbit
 5960      00
 5961 4cdf 31C3     		xorl	%eax, %ebx
 5962 4ce1 488B45B0 		movq	-80(%rbp), %rax
 5963 4ce5 BE0D0000 		movl	$13, %esi
 5963      00
 5964 4cea 4889C7   		movq	%rax, %rdi
 5965 4ced E8000000 		call	nthbit
 5965      00
 5966 4cf2 31C3     		xorl	%eax, %ebx
 5967 4cf4 488B45B0 		movq	-80(%rbp), %rax
 5968 4cf8 BE090000 		movl	$9, %esi
 5968      00
 5969 4cfd 4889C7   		movq	%rax, %rdi
 5970 4d00 E8000000 		call	nthbit
 5970      00
 5971 4d05 31C3     		xorl	%eax, %ebx
 5972 4d07 488B45B0 		movq	-80(%rbp), %rax
 5973 4d0b BE050000 		movl	$5, %esi
 5973      00
 5974 4d10 4889C7   		movq	%rax, %rdi
 5975 4d13 E8000000 		call	nthbit
 5975      00
 5976 4d18 31C3     		xorl	%eax, %ebx
 5977 4d1a 488B45B0 		movq	-80(%rbp), %rax
 5978 4d1e BE010000 		movl	$1, %esi
 5978      00
 5979 4d23 4889C7   		movq	%rax, %rdi
 5980 4d26 E8000000 		call	nthbit
 5980      00
 5981 4d2b 31D8     		xorl	%ebx, %eax
 5982 4d2d 0FB6C0   		movzbl	%al, %eax
 5983 4d30 85C0     		testl	%eax, %eax
 5984 4d32 0F95C0   		setne	%al
 5985 4d35 8845CE   		movb	%al, -50(%rbp)
1398:main.c        **** 	bool T0=nthbit(K,28)^nthbit(K,24)^nthbit(K,20)^nthbit(K,16)^nthbit(K,12)^nthbit(K,8)^nthbit(K,4)^n
 5986              		.loc 1 1398 0
 5987 4d38 488B45B0 		movq	-80(%rbp), %rax
 5988 4d3c BE1C0000 		movl	$28, %esi
 5988      00
 5989 4d41 4889C7   		movq	%rax, %rdi
 5990 4d44 E8000000 		call	nthbit
 5990      00
 5991 4d49 89C3     		movl	%eax, %ebx
 5992 4d4b 488B45B0 		movq	-80(%rbp), %rax
 5993 4d4f BE180000 		movl	$24, %esi
 5993      00
 5994 4d54 4889C7   		movq	%rax, %rdi
 5995 4d57 E8000000 		call	nthbit
 5995      00
 5996 4d5c 31C3     		xorl	%eax, %ebx
 5997 4d5e 488B45B0 		movq	-80(%rbp), %rax
 5998 4d62 BE140000 		movl	$20, %esi
 5998      00
 5999 4d67 4889C7   		movq	%rax, %rdi
 6000 4d6a E8000000 		call	nthbit
 6000      00
 6001 4d6f 31C3     		xorl	%eax, %ebx
 6002 4d71 488B45B0 		movq	-80(%rbp), %rax
 6003 4d75 BE100000 		movl	$16, %esi
 6003      00
 6004 4d7a 4889C7   		movq	%rax, %rdi
 6005 4d7d E8000000 		call	nthbit
 6005      00
 6006 4d82 31C3     		xorl	%eax, %ebx
 6007 4d84 488B45B0 		movq	-80(%rbp), %rax
 6008 4d88 BE0C0000 		movl	$12, %esi
 6008      00
 6009 4d8d 4889C7   		movq	%rax, %rdi
 6010 4d90 E8000000 		call	nthbit
 6010      00
 6011 4d95 31C3     		xorl	%eax, %ebx
 6012 4d97 488B45B0 		movq	-80(%rbp), %rax
 6013 4d9b BE080000 		movl	$8, %esi
 6013      00
 6014 4da0 4889C7   		movq	%rax, %rdi
 6015 4da3 E8000000 		call	nthbit
 6015      00
 6016 4da8 31C3     		xorl	%eax, %ebx
 6017 4daa 488B45B0 		movq	-80(%rbp), %rax
 6018 4dae BE040000 		movl	$4, %esi
 6018      00
 6019 4db3 4889C7   		movq	%rax, %rdi
 6020 4db6 E8000000 		call	nthbit
 6020      00
 6021 4dbb 31C3     		xorl	%eax, %ebx
 6022 4dbd 488B45B0 		movq	-80(%rbp), %rax
 6023 4dc1 BE000000 		movl	$0, %esi
 6023      00
 6024 4dc6 4889C7   		movq	%rax, %rdi
 6025 4dc9 E8000000 		call	nthbit
 6025      00
 6026 4dce 31D8     		xorl	%ebx, %eax
 6027 4dd0 0FB6C0   		movzbl	%al, %eax
 6028 4dd3 85C0     		testl	%eax, %eax
 6029 4dd5 0F95C0   		setne	%al
 6030 4dd8 8845CF   		movb	%al, -49(%rbp)
1399:main.c        **** 	T=(T3?(1<<3):0)+(T2?(1<<2):0)+(T1?(1<<1):0)+(T0?(1<<0):0);
 6031              		.loc 1 1399 0
 6032 4ddb 807DCC00 		cmpb	$0, -52(%rbp)
 6033 4ddf 7407     		je	.L352
 6034              		.loc 1 1399 0 is_stmt 0 discriminator 1
 6035 4de1 BA080000 		movl	$8, %edx
 6035      00
 6036 4de6 EB05     		jmp	.L353
 6037              	.L352:
 6038              		.loc 1 1399 0 discriminator 2
 6039 4de8 BA000000 		movl	$0, %edx
 6039      00
 6040              	.L353:
 6041              		.loc 1 1399 0 discriminator 4
 6042 4ded 807DCD00 		cmpb	$0, -51(%rbp)
 6043 4df1 7407     		je	.L354
 6044              		.loc 1 1399 0 discriminator 5
 6045 4df3 B8040000 		movl	$4, %eax
 6045      00
 6046 4df8 EB05     		jmp	.L355
 6047              	.L354:
 6048              		.loc 1 1399 0 discriminator 6
 6049 4dfa B8000000 		movl	$0, %eax
 6049      00
 6050              	.L355:
 6051              		.loc 1 1399 0 discriminator 8
 6052 4dff 01D0     		addl	%edx, %eax
 6053 4e01 807DCE00 		cmpb	$0, -50(%rbp)
 6054 4e05 7407     		je	.L356
 6055              		.loc 1 1399 0 discriminator 9
 6056 4e07 BA020000 		movl	$2, %edx
 6056      00
 6057 4e0c EB05     		jmp	.L357
 6058              	.L356:
 6059              		.loc 1 1399 0 discriminator 10
 6060 4e0e BA000000 		movl	$0, %edx
 6060      00
 6061              	.L357:
 6062              		.loc 1 1399 0 discriminator 12
 6063 4e13 01C2     		addl	%eax, %edx
 6064 4e15 0FB645CF 		movzbl	-49(%rbp), %eax
 6065 4e19 01D0     		addl	%edx, %eax
 6066 4e1b 4898     		cltq
 6067 4e1d 488945D8 		movq	%rax, -40(%rbp)
1400:main.c        **** 	T=(T+15)%16;
 6068              		.loc 1 1400 0 is_stmt 1 discriminator 12
 6069 4e21 488B45D8 		movq	-40(%rbp), %rax
 6070 4e25 488D500F 		leaq	15(%rax), %rdx
 6071 4e29 4889D0   		movq	%rdx, %rax
 6072 4e2c 48C1F83F 		sarq	$63, %rax
 6073 4e30 48C1E83C 		shrq	$60, %rax
 6074 4e34 4801C2   		addq	%rax, %rdx
 6075 4e37 83E20F   		andl	$15, %edx
 6076 4e3a 4829C2   		subq	%rax, %rdx
 6077 4e3d 4889D0   		movq	%rdx, %rax
 6078 4e40 488945D8 		movq	%rax, -40(%rbp)
 6079              	.LBB61:
1401:main.c        **** 	for(long i=0;i<32;i+=1){
 6080              		.loc 1 1401 0 discriminator 12
 6081 4e44 48C745E0 		movq	$0, -32(%rbp)
 6081      00000000 
 6082 4e4c E9A60000 		jmp	.L358
 6082      00
 6083              	.L360:
1402:main.c        **** 		if(!nthbit(K,i)){
 6084              		.loc 1 1402 0
 6085 4e51 488B55E0 		movq	-32(%rbp), %rdx
 6086 4e55 488B45B0 		movq	-80(%rbp), %rax
 6087 4e59 4889D6   		movq	%rdx, %rsi
 6088 4e5c 4889C7   		movq	%rax, %rdi
 6089 4e5f E8000000 		call	nthbit
 6089      00
 6090 4e64 83F001   		xorl	$1, %eax
 6091 4e67 84C0     		testb	%al, %al
 6092 4e69 0F848300 		je	.L359
 6092      0000
 6093              	.LBB62:
1403:main.c        **** 			long Tnew=(T<<28)+(T<<24)+(T<<20)+(T<<16)+(T<<12)+(T<<8)+(T<<4)+T;
 6094              		.loc 1 1403 0
 6095 4e6f 488B45D8 		movq	-40(%rbp), %rax
 6096 4e73 48C1E01C 		salq	$28, %rax
 6097 4e77 4889C2   		movq	%rax, %rdx
 6098 4e7a 488B45D8 		movq	-40(%rbp), %rax
 6099 4e7e 48C1E018 		salq	$24, %rax
 6100 4e82 4801C2   		addq	%rax, %rdx
 6101 4e85 488B45D8 		movq	-40(%rbp), %rax
 6102 4e89 48C1E014 		salq	$20, %rax
 6103 4e8d 4801C2   		addq	%rax, %rdx
 6104 4e90 488B45D8 		movq	-40(%rbp), %rax
 6105 4e94 48C1E010 		salq	$16, %rax
 6106 4e98 4801C2   		addq	%rax, %rdx
 6107 4e9b 488B45D8 		movq	-40(%rbp), %rax
 6108 4e9f 48C1E00C 		salq	$12, %rax
 6109 4ea3 4801C2   		addq	%rax, %rdx
 6110 4ea6 488B45D8 		movq	-40(%rbp), %rax
 6111 4eaa 48C1E008 		salq	$8, %rax
 6112 4eae 4801C2   		addq	%rax, %rdx
 6113 4eb1 488B45D8 		movq	-40(%rbp), %rax
 6114 4eb5 48C1E004 		salq	$4, %rax
 6115 4eb9 4801C2   		addq	%rax, %rdx
 6116 4ebc 488B45D8 		movq	-40(%rbp), %rax
 6117 4ec0 4801D0   		addq	%rdx, %rax
 6118 4ec3 488945E8 		movq	%rax, -24(%rbp)
1404:main.c        **** 			T=(T+15)%16;
 6119              		.loc 1 1404 0
 6120 4ec7 488B45D8 		movq	-40(%rbp), %rax
 6121 4ecb 488D500F 		leaq	15(%rax), %rdx
 6122 4ecf 4889D0   		movq	%rdx, %rax
 6123 4ed2 48C1F83F 		sarq	$63, %rax
 6124 4ed6 48C1E83C 		shrq	$60, %rax
 6125 4eda 4801C2   		addq	%rax, %rdx
 6126 4edd 83E20F   		andl	$15, %edx
 6127 4ee0 4829C2   		subq	%rax, %rdx
 6128 4ee3 4889D0   		movq	%rdx, %rax
 6129 4ee6 488945D8 		movq	%rax, -40(%rbp)
1405:main.c        **** 			P=P^Tnew;
 6130              		.loc 1 1405 0
 6131 4eea 488B45E8 		movq	-24(%rbp), %rax
 6132 4eee 483145D0 		xorq	%rax, -48(%rbp)
 6133              	.L359:
 6134              	.LBE62:
1401:main.c        **** 		if(!nthbit(K,i)){
 6135              		.loc 1 1401 0 discriminator 2
 6136 4ef2 488345E0 		addq	$1, -32(%rbp)
 6136      01
 6137              	.L358:
1401:main.c        **** 		if(!nthbit(K,i)){
 6138              		.loc 1 1401 0 is_stmt 0 discriminator 1
 6139 4ef7 48837DE0 		cmpq	$31, -32(%rbp)
 6139      1F
 6140 4efc 0F8E4FFF 		jle	.L360
 6140      FFFF
 6141              	.LBE61:
1406:main.c        **** 		}
1407:main.c        **** 	}
1408:main.c        **** 	return P;
 6142              		.loc 1 1408 0 is_stmt 1
 6143 4f02 488B45D0 		movq	-48(%rbp), %rax
1409:main.c        **** }
 6144              		.loc 1 1409 0
 6145 4f06 4883C448 		addq	$72, %rsp
 6146 4f0a 5B       		popq	%rbx
 6147 4f0b 5D       		popq	%rbp
 6148              		.cfi_def_cfa 7, 8
 6149 4f0c C3       		ret
 6150              		.cfi_endproc
 6151              	.LFE16:
 6153              		.globl	encrypter
 6155              	encrypter:
 6156              	.LFB17:
1410:main.c        **** long encrypter( long P, long K){
 6157              		.loc 1 1410 0
 6158              		.cfi_startproc
 6159 4f0d 55       		pushq	%rbp
 6160              		.cfi_def_cfa_offset 16
 6161              		.cfi_offset 6, -16
 6162 4f0e 4889E5   		movq	%rsp, %rbp
 6163              		.cfi_def_cfa_register 6
 6164 4f11 53       		pushq	%rbx
 6165 4f12 4883EC48 		subq	$72, %rsp
 6166              		.cfi_offset 3, -24
 6167 4f16 48897DB8 		movq	%rdi, -72(%rbp)
 6168 4f1a 488975B0 		movq	%rsi, -80(%rbp)
1411:main.c        **** 	long C,T;
1412:main.c        **** 	C=P;
 6169              		.loc 1 1412 0
 6170 4f1e 488B45B8 		movq	-72(%rbp), %rax
 6171 4f22 488945D0 		movq	%rax, -48(%rbp)
1413:main.c        **** 	bool T3=nthbit(K,31)^nthbit(K,27)^nthbit(K,23)^nthbit(K,19)^nthbit(K,15)^nthbit(K,11)^nthbit(K,7)^
 6172              		.loc 1 1413 0
 6173 4f26 488B45B0 		movq	-80(%rbp), %rax
 6174 4f2a BE1F0000 		movl	$31, %esi
 6174      00
 6175 4f2f 4889C7   		movq	%rax, %rdi
 6176 4f32 E8000000 		call	nthbit
 6176      00
 6177 4f37 89C3     		movl	%eax, %ebx
 6178 4f39 488B45B0 		movq	-80(%rbp), %rax
 6179 4f3d BE1B0000 		movl	$27, %esi
 6179      00
 6180 4f42 4889C7   		movq	%rax, %rdi
 6181 4f45 E8000000 		call	nthbit
 6181      00
 6182 4f4a 31C3     		xorl	%eax, %ebx
 6183 4f4c 488B45B0 		movq	-80(%rbp), %rax
 6184 4f50 BE170000 		movl	$23, %esi
 6184      00
 6185 4f55 4889C7   		movq	%rax, %rdi
 6186 4f58 E8000000 		call	nthbit
 6186      00
 6187 4f5d 31C3     		xorl	%eax, %ebx
 6188 4f5f 488B45B0 		movq	-80(%rbp), %rax
 6189 4f63 BE130000 		movl	$19, %esi
 6189      00
 6190 4f68 4889C7   		movq	%rax, %rdi
 6191 4f6b E8000000 		call	nthbit
 6191      00
 6192 4f70 31C3     		xorl	%eax, %ebx
 6193 4f72 488B45B0 		movq	-80(%rbp), %rax
 6194 4f76 BE0F0000 		movl	$15, %esi
 6194      00
 6195 4f7b 4889C7   		movq	%rax, %rdi
 6196 4f7e E8000000 		call	nthbit
 6196      00
 6197 4f83 31C3     		xorl	%eax, %ebx
 6198 4f85 488B45B0 		movq	-80(%rbp), %rax
 6199 4f89 BE0B0000 		movl	$11, %esi
 6199      00
 6200 4f8e 4889C7   		movq	%rax, %rdi
 6201 4f91 E8000000 		call	nthbit
 6201      00
 6202 4f96 31C3     		xorl	%eax, %ebx
 6203 4f98 488B45B0 		movq	-80(%rbp), %rax
 6204 4f9c BE070000 		movl	$7, %esi
 6204      00
 6205 4fa1 4889C7   		movq	%rax, %rdi
 6206 4fa4 E8000000 		call	nthbit
 6206      00
 6207 4fa9 31C3     		xorl	%eax, %ebx
 6208 4fab 488B45B0 		movq	-80(%rbp), %rax
 6209 4faf BE030000 		movl	$3, %esi
 6209      00
 6210 4fb4 4889C7   		movq	%rax, %rdi
 6211 4fb7 E8000000 		call	nthbit
 6211      00
 6212 4fbc 31D8     		xorl	%ebx, %eax
 6213 4fbe 0FB6C0   		movzbl	%al, %eax
 6214 4fc1 85C0     		testl	%eax, %eax
 6215 4fc3 0F95C0   		setne	%al
 6216 4fc6 8845CC   		movb	%al, -52(%rbp)
1414:main.c        **** 	bool T2=nthbit(K,30)^nthbit(K,26)^nthbit(K,22)^nthbit(K,18)^nthbit(K,14)^nthbit(K,10)^nthbit(K,6)^
 6217              		.loc 1 1414 0
 6218 4fc9 488B45B0 		movq	-80(%rbp), %rax
 6219 4fcd BE1E0000 		movl	$30, %esi
 6219      00
 6220 4fd2 4889C7   		movq	%rax, %rdi
 6221 4fd5 E8000000 		call	nthbit
 6221      00
 6222 4fda 89C3     		movl	%eax, %ebx
 6223 4fdc 488B45B0 		movq	-80(%rbp), %rax
 6224 4fe0 BE1A0000 		movl	$26, %esi
 6224      00
 6225 4fe5 4889C7   		movq	%rax, %rdi
 6226 4fe8 E8000000 		call	nthbit
 6226      00
 6227 4fed 31C3     		xorl	%eax, %ebx
 6228 4fef 488B45B0 		movq	-80(%rbp), %rax
 6229 4ff3 BE160000 		movl	$22, %esi
 6229      00
 6230 4ff8 4889C7   		movq	%rax, %rdi
 6231 4ffb E8000000 		call	nthbit
 6231      00
 6232 5000 31C3     		xorl	%eax, %ebx
 6233 5002 488B45B0 		movq	-80(%rbp), %rax
 6234 5006 BE120000 		movl	$18, %esi
 6234      00
 6235 500b 4889C7   		movq	%rax, %rdi
 6236 500e E8000000 		call	nthbit
 6236      00
 6237 5013 31C3     		xorl	%eax, %ebx
 6238 5015 488B45B0 		movq	-80(%rbp), %rax
 6239 5019 BE0E0000 		movl	$14, %esi
 6239      00
 6240 501e 4889C7   		movq	%rax, %rdi
 6241 5021 E8000000 		call	nthbit
 6241      00
 6242 5026 31C3     		xorl	%eax, %ebx
 6243 5028 488B45B0 		movq	-80(%rbp), %rax
 6244 502c BE0A0000 		movl	$10, %esi
 6244      00
 6245 5031 4889C7   		movq	%rax, %rdi
 6246 5034 E8000000 		call	nthbit
 6246      00
 6247 5039 31C3     		xorl	%eax, %ebx
 6248 503b 488B45B0 		movq	-80(%rbp), %rax
 6249 503f BE060000 		movl	$6, %esi
 6249      00
 6250 5044 4889C7   		movq	%rax, %rdi
 6251 5047 E8000000 		call	nthbit
 6251      00
 6252 504c 31C3     		xorl	%eax, %ebx
 6253 504e 488B45B0 		movq	-80(%rbp), %rax
 6254 5052 BE020000 		movl	$2, %esi
 6254      00
 6255 5057 4889C7   		movq	%rax, %rdi
 6256 505a E8000000 		call	nthbit
 6256      00
 6257 505f 31D8     		xorl	%ebx, %eax
 6258 5061 0FB6C0   		movzbl	%al, %eax
 6259 5064 85C0     		testl	%eax, %eax
 6260 5066 0F95C0   		setne	%al
 6261 5069 8845CD   		movb	%al, -51(%rbp)
1415:main.c        **** 	bool T1=nthbit(K,29)^nthbit(K,25)^nthbit(K,21)^nthbit(K,17)^nthbit(K,13)^nthbit(K,9)^nthbit(K,5)^n
 6262              		.loc 1 1415 0
 6263 506c 488B45B0 		movq	-80(%rbp), %rax
 6264 5070 BE1D0000 		movl	$29, %esi
 6264      00
 6265 5075 4889C7   		movq	%rax, %rdi
 6266 5078 E8000000 		call	nthbit
 6266      00
 6267 507d 89C3     		movl	%eax, %ebx
 6268 507f 488B45B0 		movq	-80(%rbp), %rax
 6269 5083 BE190000 		movl	$25, %esi
 6269      00
 6270 5088 4889C7   		movq	%rax, %rdi
 6271 508b E8000000 		call	nthbit
 6271      00
 6272 5090 31C3     		xorl	%eax, %ebx
 6273 5092 488B45B0 		movq	-80(%rbp), %rax
 6274 5096 BE150000 		movl	$21, %esi
 6274      00
 6275 509b 4889C7   		movq	%rax, %rdi
 6276 509e E8000000 		call	nthbit
 6276      00
 6277 50a3 31C3     		xorl	%eax, %ebx
 6278 50a5 488B45B0 		movq	-80(%rbp), %rax
 6279 50a9 BE110000 		movl	$17, %esi
 6279      00
 6280 50ae 4889C7   		movq	%rax, %rdi
 6281 50b1 E8000000 		call	nthbit
 6281      00
 6282 50b6 31C3     		xorl	%eax, %ebx
 6283 50b8 488B45B0 		movq	-80(%rbp), %rax
 6284 50bc BE0D0000 		movl	$13, %esi
 6284      00
 6285 50c1 4889C7   		movq	%rax, %rdi
 6286 50c4 E8000000 		call	nthbit
 6286      00
 6287 50c9 31C3     		xorl	%eax, %ebx
 6288 50cb 488B45B0 		movq	-80(%rbp), %rax
 6289 50cf BE090000 		movl	$9, %esi
 6289      00
 6290 50d4 4889C7   		movq	%rax, %rdi
 6291 50d7 E8000000 		call	nthbit
 6291      00
 6292 50dc 31C3     		xorl	%eax, %ebx
 6293 50de 488B45B0 		movq	-80(%rbp), %rax
 6294 50e2 BE050000 		movl	$5, %esi
 6294      00
 6295 50e7 4889C7   		movq	%rax, %rdi
 6296 50ea E8000000 		call	nthbit
 6296      00
 6297 50ef 31C3     		xorl	%eax, %ebx
 6298 50f1 488B45B0 		movq	-80(%rbp), %rax
 6299 50f5 BE010000 		movl	$1, %esi
 6299      00
 6300 50fa 4889C7   		movq	%rax, %rdi
 6301 50fd E8000000 		call	nthbit
 6301      00
 6302 5102 31D8     		xorl	%ebx, %eax
 6303 5104 0FB6C0   		movzbl	%al, %eax
 6304 5107 85C0     		testl	%eax, %eax
 6305 5109 0F95C0   		setne	%al
 6306 510c 8845CE   		movb	%al, -50(%rbp)
1416:main.c        **** 	bool T0=nthbit(K,28)^nthbit(K,24)^nthbit(K,20)^nthbit(K,16)^nthbit(K,12)^nthbit(K,8)^nthbit(K,4)^n
 6307              		.loc 1 1416 0
 6308 510f 488B45B0 		movq	-80(%rbp), %rax
 6309 5113 BE1C0000 		movl	$28, %esi
 6309      00
 6310 5118 4889C7   		movq	%rax, %rdi
 6311 511b E8000000 		call	nthbit
 6311      00
 6312 5120 89C3     		movl	%eax, %ebx
 6313 5122 488B45B0 		movq	-80(%rbp), %rax
 6314 5126 BE180000 		movl	$24, %esi
 6314      00
 6315 512b 4889C7   		movq	%rax, %rdi
 6316 512e E8000000 		call	nthbit
 6316      00
 6317 5133 31C3     		xorl	%eax, %ebx
 6318 5135 488B45B0 		movq	-80(%rbp), %rax
 6319 5139 BE140000 		movl	$20, %esi
 6319      00
 6320 513e 4889C7   		movq	%rax, %rdi
 6321 5141 E8000000 		call	nthbit
 6321      00
 6322 5146 31C3     		xorl	%eax, %ebx
 6323 5148 488B45B0 		movq	-80(%rbp), %rax
 6324 514c BE100000 		movl	$16, %esi
 6324      00
 6325 5151 4889C7   		movq	%rax, %rdi
 6326 5154 E8000000 		call	nthbit
 6326      00
 6327 5159 31C3     		xorl	%eax, %ebx
 6328 515b 488B45B0 		movq	-80(%rbp), %rax
 6329 515f BE0C0000 		movl	$12, %esi
 6329      00
 6330 5164 4889C7   		movq	%rax, %rdi
 6331 5167 E8000000 		call	nthbit
 6331      00
 6332 516c 31C3     		xorl	%eax, %ebx
 6333 516e 488B45B0 		movq	-80(%rbp), %rax
 6334 5172 BE080000 		movl	$8, %esi
 6334      00
 6335 5177 4889C7   		movq	%rax, %rdi
 6336 517a E8000000 		call	nthbit
 6336      00
 6337 517f 31C3     		xorl	%eax, %ebx
 6338 5181 488B45B0 		movq	-80(%rbp), %rax
 6339 5185 BE040000 		movl	$4, %esi
 6339      00
 6340 518a 4889C7   		movq	%rax, %rdi
 6341 518d E8000000 		call	nthbit
 6341      00
 6342 5192 31C3     		xorl	%eax, %ebx
 6343 5194 488B45B0 		movq	-80(%rbp), %rax
 6344 5198 BE000000 		movl	$0, %esi
 6344      00
 6345 519d 4889C7   		movq	%rax, %rdi
 6346 51a0 E8000000 		call	nthbit
 6346      00
 6347 51a5 31D8     		xorl	%ebx, %eax
 6348 51a7 0FB6C0   		movzbl	%al, %eax
 6349 51aa 85C0     		testl	%eax, %eax
 6350 51ac 0F95C0   		setne	%al
 6351 51af 8845CF   		movb	%al, -49(%rbp)
1417:main.c        **** 	T=(T3?(1<<3):0)+(T2?(1<<2):0)+(T1?(1<<1):0)+(T0?(1<<0):0);
 6352              		.loc 1 1417 0
 6353 51b2 807DCC00 		cmpb	$0, -52(%rbp)
 6354 51b6 7407     		je	.L363
 6355              		.loc 1 1417 0 is_stmt 0 discriminator 1
 6356 51b8 BA080000 		movl	$8, %edx
 6356      00
 6357 51bd EB05     		jmp	.L364
 6358              	.L363:
 6359              		.loc 1 1417 0 discriminator 2
 6360 51bf BA000000 		movl	$0, %edx
 6360      00
 6361              	.L364:
 6362              		.loc 1 1417 0 discriminator 4
 6363 51c4 807DCD00 		cmpb	$0, -51(%rbp)
 6364 51c8 7407     		je	.L365
 6365              		.loc 1 1417 0 discriminator 5
 6366 51ca B8040000 		movl	$4, %eax
 6366      00
 6367 51cf EB05     		jmp	.L366
 6368              	.L365:
 6369              		.loc 1 1417 0 discriminator 6
 6370 51d1 B8000000 		movl	$0, %eax
 6370      00
 6371              	.L366:
 6372              		.loc 1 1417 0 discriminator 8
 6373 51d6 01D0     		addl	%edx, %eax
 6374 51d8 807DCE00 		cmpb	$0, -50(%rbp)
 6375 51dc 7407     		je	.L367
 6376              		.loc 1 1417 0 discriminator 9
 6377 51de BA020000 		movl	$2, %edx
 6377      00
 6378 51e3 EB05     		jmp	.L368
 6379              	.L367:
 6380              		.loc 1 1417 0 discriminator 10
 6381 51e5 BA000000 		movl	$0, %edx
 6381      00
 6382              	.L368:
 6383              		.loc 1 1417 0 discriminator 12
 6384 51ea 01C2     		addl	%eax, %edx
 6385 51ec 0FB645CF 		movzbl	-49(%rbp), %eax
 6386 51f0 01D0     		addl	%edx, %eax
 6387 51f2 4898     		cltq
 6388 51f4 488945D8 		movq	%rax, -40(%rbp)
 6389              	.LBB63:
1418:main.c        **** 	for(long i=0;i<32;i+=1){
 6390              		.loc 1 1418 0 is_stmt 1 discriminator 12
 6391 51f8 48C745E0 		movq	$0, -32(%rbp)
 6391      00000000 
 6392 5200 E9A30000 		jmp	.L369
 6392      00
 6393              	.L371:
1419:main.c        **** 		if(nthbit(K,i)){
 6394              		.loc 1 1419 0
 6395 5205 488B55E0 		movq	-32(%rbp), %rdx
 6396 5209 488B45B0 		movq	-80(%rbp), %rax
 6397 520d 4889D6   		movq	%rdx, %rsi
 6398 5210 4889C7   		movq	%rax, %rdi
 6399 5213 E8000000 		call	nthbit
 6399      00
 6400 5218 84C0     		testb	%al, %al
 6401 521a 0F848300 		je	.L370
 6401      0000
 6402              	.LBB64:
1420:main.c        **** 			long Tnew=(T<<28)+(T<<24)+(T<<20)+(T<<16)+(T<<12)+(T<<8)+(T<<4)+T;
 6403              		.loc 1 1420 0
 6404 5220 488B45D8 		movq	-40(%rbp), %rax
 6405 5224 48C1E01C 		salq	$28, %rax
 6406 5228 4889C2   		movq	%rax, %rdx
 6407 522b 488B45D8 		movq	-40(%rbp), %rax
 6408 522f 48C1E018 		salq	$24, %rax
 6409 5233 4801C2   		addq	%rax, %rdx
 6410 5236 488B45D8 		movq	-40(%rbp), %rax
 6411 523a 48C1E014 		salq	$20, %rax
 6412 523e 4801C2   		addq	%rax, %rdx
 6413 5241 488B45D8 		movq	-40(%rbp), %rax
 6414 5245 48C1E010 		salq	$16, %rax
 6415 5249 4801C2   		addq	%rax, %rdx
 6416 524c 488B45D8 		movq	-40(%rbp), %rax
 6417 5250 48C1E00C 		salq	$12, %rax
 6418 5254 4801C2   		addq	%rax, %rdx
 6419 5257 488B45D8 		movq	-40(%rbp), %rax
 6420 525b 48C1E008 		salq	$8, %rax
 6421 525f 4801C2   		addq	%rax, %rdx
 6422 5262 488B45D8 		movq	-40(%rbp), %rax
 6423 5266 48C1E004 		salq	$4, %rax
 6424 526a 4801C2   		addq	%rax, %rdx
 6425 526d 488B45D8 		movq	-40(%rbp), %rax
 6426 5271 4801D0   		addq	%rdx, %rax
 6427 5274 488945E8 		movq	%rax, -24(%rbp)
1421:main.c        **** 			T=(T+1)%16;
 6428              		.loc 1 1421 0
 6429 5278 488B45D8 		movq	-40(%rbp), %rax
 6430 527c 488D5001 		leaq	1(%rax), %rdx
 6431 5280 4889D0   		movq	%rdx, %rax
 6432 5283 48C1F83F 		sarq	$63, %rax
 6433 5287 48C1E83C 		shrq	$60, %rax
 6434 528b 4801C2   		addq	%rax, %rdx
 6435 528e 83E20F   		andl	$15, %edx
 6436 5291 4829C2   		subq	%rax, %rdx
 6437 5294 4889D0   		movq	%rdx, %rax
 6438 5297 488945D8 		movq	%rax, -40(%rbp)
1422:main.c        **** 			C=C^Tnew;
 6439              		.loc 1 1422 0
 6440 529b 488B45E8 		movq	-24(%rbp), %rax
 6441 529f 483145D0 		xorq	%rax, -48(%rbp)
 6442              	.L370:
 6443              	.LBE64:
1418:main.c        **** 		if(nthbit(K,i)){
 6444              		.loc 1 1418 0 discriminator 2
 6445 52a3 488345E0 		addq	$1, -32(%rbp)
 6445      01
 6446              	.L369:
1418:main.c        **** 		if(nthbit(K,i)){
 6447              		.loc 1 1418 0 is_stmt 0 discriminator 1
 6448 52a8 48837DE0 		cmpq	$31, -32(%rbp)
 6448      1F
 6449 52ad 0F8E52FF 		jle	.L371
 6449      FFFF
 6450              	.LBE63:
1423:main.c        **** 		}
1424:main.c        **** 	}
1425:main.c        **** 	return C;
 6451              		.loc 1 1425 0 is_stmt 1
 6452 52b3 488B45D0 		movq	-48(%rbp), %rax
1426:main.c        **** }
 6453              		.loc 1 1426 0
 6454 52b7 4883C448 		addq	$72, %rsp
 6455 52bb 5B       		popq	%rbx
 6456 52bc 5D       		popq	%rbp
 6457              		.cfi_def_cfa 7, 8
 6458 52bd C3       		ret
 6459              		.cfi_endproc
 6460              	.LFE17:
 6462              		.globl	nthbit
 6464              	nthbit:
 6465              	.LFB18:
1427:main.c        **** bool nthbit( long n, long k){
 6466              		.loc 1 1427 0
 6467              		.cfi_startproc
 6468 52be 55       		pushq	%rbp
 6469              		.cfi_def_cfa_offset 16
 6470              		.cfi_offset 6, -16
 6471 52bf 4889E5   		movq	%rsp, %rbp
 6472              		.cfi_def_cfa_register 6
 6473 52c2 48897DF8 		movq	%rdi, -8(%rbp)
 6474 52c6 488975F0 		movq	%rsi, -16(%rbp)
1428:main.c        **** 	return (n & 1<<k);
 6475              		.loc 1 1428 0
 6476 52ca 488B45F0 		movq	-16(%rbp), %rax
 6477 52ce BA010000 		movl	$1, %edx
 6477      00
 6478 52d3 89C1     		movl	%eax, %ecx
 6479 52d5 D3E2     		sall	%cl, %edx
 6480 52d7 89D0     		movl	%edx, %eax
 6481 52d9 4898     		cltq
 6482 52db 482345F8 		andq	-8(%rbp), %rax
 6483 52df 4885C0   		testq	%rax, %rax
 6484 52e2 0F95C0   		setne	%al
1429:main.c        **** }
 6485              		.loc 1 1429 0
 6486 52e5 5D       		popq	%rbp
 6487              		.cfi_def_cfa 7, 8
 6488 52e6 C3       		ret
 6489              		.cfi_endproc
 6490              	.LFE18:
 6492              		.section	.rodata
 6493              	.LC158:
 6494 0f18 74656D70 		.string	"temp.csv"
 6494      2E637376 
 6494      00
 6495              	.LC159:
 6496 0f21 25642C25 		.string	"%d,%d,%d,%d,%d\n"
 6496      642C2564 
 6496      2C25642C 
 6496      25640A00 
 6497              		.text
 6498              		.globl	editfile
 6500              	editfile:
 6501              	.LFB19:
1430:main.c        **** void editfile(int X,int Y,char* fileName, long S){
 6502              		.loc 1 1430 0
 6503              		.cfi_startproc
 6504 52e7 55       		pushq	%rbp
 6505              		.cfi_def_cfa_offset 16
 6506              		.cfi_offset 6, -16
 6507 52e8 4889E5   		movq	%rsp, %rbp
 6508              		.cfi_def_cfa_register 6
 6509 52eb 53       		pushq	%rbx
 6510 52ec 4883EC68 		subq	$104, %rsp
 6511              		.cfi_offset 3, -24
 6512 52f0 897DAC   		movl	%edi, -84(%rbp)
 6513 52f3 8975A8   		movl	%esi, -88(%rbp)
 6514 52f6 488955A0 		movq	%rdx, -96(%rbp)
 6515 52fa 48894D98 		movq	%rcx, -104(%rbp)
 6516              		.loc 1 1430 0
 6517 52fe 64488B04 		movq	%fs:40, %rax
 6517      25280000 
 6517      00
 6518 5307 488945E8 		movq	%rax, -24(%rbp)
 6519 530b 31C0     		xorl	%eax, %eax
1431:main.c        **** 	FILE *fptr, *fptr1;
1432:main.c        **** 	fptr=fopen(fileName,"r");
 6520              		.loc 1 1432 0
 6521 530d 488B45A0 		movq	-96(%rbp), %rax
 6522 5311 BE000000 		movl	$.LC81, %esi
 6522      00
 6523 5316 4889C7   		movq	%rax, %rdi
 6524 5319 E8000000 		call	fopen
 6524      00
 6525 531e 488945D8 		movq	%rax, -40(%rbp)
1433:main.c        **** 	fptr1=fopen("temp.csv","w");
 6526              		.loc 1 1433 0
 6527 5322 BE000000 		movl	$.LC148, %esi
 6527      00
 6528 5327 BF000000 		movl	$.LC158, %edi
 6528      00
 6529 532c E8000000 		call	fopen
 6529      00
 6530 5331 488945E0 		movq	%rax, -32(%rbp)
1434:main.c        **** 	int a,b,c,d,e,dir=S/32,t_exists=nthbit(S,4);
 6531              		.loc 1 1434 0
 6532 5335 488B4598 		movq	-104(%rbp), %rax
 6533 5339 488D501F 		leaq	31(%rax), %rdx
 6534 533d 4885C0   		testq	%rax, %rax
 6535 5340 480F48C2 		cmovs	%rdx, %rax
 6536 5344 48C1F805 		sarq	$5, %rax
 6537 5348 8945D0   		movl	%eax, -48(%rbp)
 6538 534b 488B4598 		movq	-104(%rbp), %rax
 6539 534f BE040000 		movl	$4, %esi
 6539      00
 6540 5354 4889C7   		movq	%rax, %rdi
 6541 5357 E8000000 		call	nthbit
 6541      00
 6542 535c 0FB6C0   		movzbl	%al, %eax
 6543 535f 8945D4   		movl	%eax, -44(%rbp)
1435:main.c        **** 	while(fscanf(fptr,"%d,%d,%d,%d,%d", &a,&b,&c,&d,&e)!=EOF){
 6544              		.loc 1 1435 0
 6545 5362 EB4D     		jmp	.L376
 6546              	.L378:
1436:main.c        **** 		if(!(a==X && b==Y && c==dir)){
 6547              		.loc 1 1436 0
 6548 5364 8B45BC   		movl	-68(%rbp), %eax
 6549 5367 3B45AC   		cmpl	-84(%rbp), %eax
 6550 536a 7510     		jne	.L377
 6551              		.loc 1 1436 0 is_stmt 0 discriminator 1
 6552 536c 8B45C0   		movl	-64(%rbp), %eax
 6553 536f 3B45A8   		cmpl	-88(%rbp), %eax
 6554 5372 7508     		jne	.L377
 6555              		.loc 1 1436 0 discriminator 2
 6556 5374 8B45C4   		movl	-60(%rbp), %eax
 6557 5377 3B45D0   		cmpl	-48(%rbp), %eax
 6558 537a 7435     		je	.L376
 6559              	.L377:
1437:main.c        **** 			fprintf(fptr1, "%d,%d,%d,%d,%d\n",a,b,c,d,e);
 6560              		.loc 1 1437 0 is_stmt 1
 6561 537c 8B75CC   		movl	-52(%rbp), %esi
 6562 537f 448B45C8 		movl	-56(%rbp), %r8d
 6563 5383 8B7DC4   		movl	-60(%rbp), %edi
 6564 5386 8B4DC0   		movl	-64(%rbp), %ecx
 6565 5389 8B55BC   		movl	-68(%rbp), %edx
 6566 538c 488B45E0 		movq	-32(%rbp), %rax
 6567 5390 4883EC08 		subq	$8, %rsp
 6568 5394 56       		pushq	%rsi
 6569 5395 4589C1   		movl	%r8d, %r9d
 6570 5398 4189F8   		movl	%edi, %r8d
 6571 539b BE000000 		movl	$.LC159, %esi
 6571      00
 6572 53a0 4889C7   		movq	%rax, %rdi
 6573 53a3 B8000000 		movl	$0, %eax
 6573      00
 6574 53a8 E8000000 		call	fprintf
 6574      00
 6575 53ad 4883C410 		addq	$16, %rsp
 6576              	.L376:
1435:main.c        **** 	while(fscanf(fptr,"%d,%d,%d,%d,%d", &a,&b,&c,&d,&e)!=EOF){
 6577              		.loc 1 1435 0
 6578 53b1 4C8D45C8 		leaq	-56(%rbp), %r8
 6579 53b5 488D7DC4 		leaq	-60(%rbp), %rdi
 6580 53b9 488D4DC0 		leaq	-64(%rbp), %rcx
 6581 53bd 488D55BC 		leaq	-68(%rbp), %rdx
 6582 53c1 488B45D8 		movq	-40(%rbp), %rax
 6583 53c5 4883EC08 		subq	$8, %rsp
 6584 53c9 488D75CC 		leaq	-52(%rbp), %rsi
 6585 53cd 56       		pushq	%rsi
 6586 53ce 4D89C1   		movq	%r8, %r9
 6587 53d1 4989F8   		movq	%rdi, %r8
 6588 53d4 BE000000 		movl	$.LC140, %esi
 6588      00
 6589 53d9 4889C7   		movq	%rax, %rdi
 6590 53dc B8000000 		movl	$0, %eax
 6590      00
 6591 53e1 E8000000 		call	__isoc99_fscanf
 6591      00
 6592 53e6 4883C410 		addq	$16, %rsp
 6593 53ea 83F8FF   		cmpl	$-1, %eax
 6594 53ed 0F8571FF 		jne	.L378
 6594      FFFF
1438:main.c        **** 		}
1439:main.c        **** 	}
1440:main.c        **** 	if(t_exists==1){
 6595              		.loc 1 1440 0
 6596 53f3 837DD401 		cmpl	$1, -44(%rbp)
 6597 53f7 7557     		jne	.L379
1441:main.c        **** 		fprintf(fptr1, "%d,%d,%d,%d,%d\n",X,Y,dir,nthbit(S,3),(int)(S%8));
 6598              		.loc 1 1441 0
 6599 53f9 488B4598 		movq	-104(%rbp), %rax
 6600 53fd 4899     		cqto
 6601 53ff 48C1EA3D 		shrq	$61, %rdx
 6602 5403 4801D0   		addq	%rdx, %rax
 6603 5406 83E007   		andl	$7, %eax
 6604 5409 4829D0   		subq	%rdx, %rax
 6605 540c 89C3     		movl	%eax, %ebx
 6606 540e 488B4598 		movq	-104(%rbp), %rax
 6607 5412 BE030000 		movl	$3, %esi
 6607      00
 6608 5417 4889C7   		movq	%rax, %rdi
 6609 541a E8000000 		call	nthbit
 6609      00
 6610 541f 0FB6F8   		movzbl	%al, %edi
 6611 5422 8B75D0   		movl	-48(%rbp), %esi
 6612 5425 8B4DA8   		movl	-88(%rbp), %ecx
 6613 5428 8B55AC   		movl	-84(%rbp), %edx
 6614 542b 488B45E0 		movq	-32(%rbp), %rax
 6615 542f 4883EC08 		subq	$8, %rsp
 6616 5433 53       		pushq	%rbx
 6617 5434 4189F9   		movl	%edi, %r9d
 6618 5437 4189F0   		movl	%esi, %r8d
 6619 543a BE000000 		movl	$.LC159, %esi
 6619      00
 6620 543f 4889C7   		movq	%rax, %rdi
 6621 5442 B8000000 		movl	$0, %eax
 6621      00
 6622 5447 E8000000 		call	fprintf
 6622      00
 6623 544c 4883C410 		addq	$16, %rsp
 6624              	.L379:
1442:main.c        **** 	}
1443:main.c        **** 	fclose(fptr);
 6625              		.loc 1 1443 0
 6626 5450 488B45D8 		movq	-40(%rbp), %rax
 6627 5454 4889C7   		movq	%rax, %rdi
 6628 5457 E8000000 		call	fclose
 6628      00
1444:main.c        **** 	fclose(fptr1);
 6629              		.loc 1 1444 0
 6630 545c 488B45E0 		movq	-32(%rbp), %rax
 6631 5460 4889C7   		movq	%rax, %rdi
 6632 5463 E8000000 		call	fclose
 6632      00
1445:main.c        **** 	fptr1=fopen(fileName,"w");
 6633              		.loc 1 1445 0
 6634 5468 488B45A0 		movq	-96(%rbp), %rax
 6635 546c BE000000 		movl	$.LC148, %esi
 6635      00
 6636 5471 4889C7   		movq	%rax, %rdi
 6637 5474 E8000000 		call	fopen
 6637      00
 6638 5479 488945E0 		movq	%rax, -32(%rbp)
1446:main.c        **** 	fptr=fopen("temp.csv","r");
 6639              		.loc 1 1446 0
 6640 547d BE000000 		movl	$.LC81, %esi
 6640      00
 6641 5482 BF000000 		movl	$.LC158, %edi
 6641      00
 6642 5487 E8000000 		call	fopen
 6642      00
 6643 548c 488945D8 		movq	%rax, -40(%rbp)
1447:main.c        **** 	while(fscanf(fptr,"%d,%d,%d,%d,%d", &a,&b,&c,&d,&e)!=EOF){
 6644              		.loc 1 1447 0
 6645 5490 EB35     		jmp	.L380
 6646              	.L381:
1448:main.c        **** 		fprintf(fptr1, "%d,%d,%d,%d,%d\n",a,b,c,d,e);
 6647              		.loc 1 1448 0
 6648 5492 8B75CC   		movl	-52(%rbp), %esi
 6649 5495 448B45C8 		movl	-56(%rbp), %r8d
 6650 5499 8B7DC4   		movl	-60(%rbp), %edi
 6651 549c 8B4DC0   		movl	-64(%rbp), %ecx
 6652 549f 8B55BC   		movl	-68(%rbp), %edx
 6653 54a2 488B45E0 		movq	-32(%rbp), %rax
 6654 54a6 4883EC08 		subq	$8, %rsp
 6655 54aa 56       		pushq	%rsi
 6656 54ab 4589C1   		movl	%r8d, %r9d
 6657 54ae 4189F8   		movl	%edi, %r8d
 6658 54b1 BE000000 		movl	$.LC159, %esi
 6658      00
 6659 54b6 4889C7   		movq	%rax, %rdi
 6660 54b9 B8000000 		movl	$0, %eax
 6660      00
 6661 54be E8000000 		call	fprintf
 6661      00
 6662 54c3 4883C410 		addq	$16, %rsp
 6663              	.L380:
1447:main.c        **** 	while(fscanf(fptr,"%d,%d,%d,%d,%d", &a,&b,&c,&d,&e)!=EOF){
 6664              		.loc 1 1447 0
 6665 54c7 4C8D45C8 		leaq	-56(%rbp), %r8
 6666 54cb 488D7DC4 		leaq	-60(%rbp), %rdi
 6667 54cf 488D4DC0 		leaq	-64(%rbp), %rcx
 6668 54d3 488D55BC 		leaq	-68(%rbp), %rdx
 6669 54d7 488B45D8 		movq	-40(%rbp), %rax
 6670 54db 4883EC08 		subq	$8, %rsp
 6671 54df 488D75CC 		leaq	-52(%rbp), %rsi
 6672 54e3 56       		pushq	%rsi
 6673 54e4 4D89C1   		movq	%r8, %r9
 6674 54e7 4989F8   		movq	%rdi, %r8
 6675 54ea BE000000 		movl	$.LC140, %esi
 6675      00
 6676 54ef 4889C7   		movq	%rax, %rdi
 6677 54f2 B8000000 		movl	$0, %eax
 6677      00
 6678 54f7 E8000000 		call	__isoc99_fscanf
 6678      00
 6679 54fc 4883C410 		addq	$16, %rsp
 6680 5500 83F8FF   		cmpl	$-1, %eax
 6681 5503 758D     		jne	.L381
1449:main.c        **** 	}
1450:main.c        **** 	fclose(fptr);
 6682              		.loc 1 1450 0
 6683 5505 488B45D8 		movq	-40(%rbp), %rax
 6684 5509 4889C7   		movq	%rax, %rdi
 6685 550c E8000000 		call	fclose
 6685      00
1451:main.c        **** 	fclose(fptr1);
 6686              		.loc 1 1451 0
 6687 5511 488B45E0 		movq	-32(%rbp), %rax
 6688 5515 4889C7   		movq	%rax, %rdi
 6689 5518 E8000000 		call	fclose
 6689      00
1452:main.c        **** }...
 6690              		.loc 1 1452 0
 6691 551d 90       		nop
 6692 551e 488B45E8 		movq	-24(%rbp), %rax
 6693 5522 64483304 		xorq	%fs:40, %rax
 6693      25280000 
 6693      00
 6694 552b 7405     		je	.L382
 6695 552d E8000000 		call	__stack_chk_fail
 6695      00
 6696              	.L382:
 6697 5532 488B5DF8 		movq	-8(%rbp), %rbx
 6698 5536 C9       		leave
 6699              		.cfi_def_cfa 7, 8
 6700 5537 C3       		ret
 6701              		.cfi_endproc
 6702              	.LFE19:
 6704              		.section	.rodata
 6705 0f31 00000000 		.align 8
 6705      000000
 6706              	.LC14:
 6707 0f38 00000000 		.long	0
 6708 0f3c 80842E41 		.long	1093567616
 6709              		.align 8
 6710              	.LC15:
 6711 0f40 00000000 		.long	0
 6712 0f44 00003041 		.long	1093664768
 6713              		.text
 6714              	.Letext0:
 6715              		.file 2 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h"
 6716              		.file 3 "/usr/include/x86_64-linux-gnu/bits/types.h"
 6717              		.file 4 "/usr/include/stdio.h"
 6718              		.file 5 "/usr/include/libio.h"
 6719              		.file 6 "/home/ankit/20140524/makestuff/common/makestuff.h"
 6720              		.file 7 "/home/ankit/20140524/makestuff/libs/libfpgalink/libfpgalink.h"
 6721              		.file 8 "/home/ankit/20140524/makestuff/libs/libbuffer/libbuffer.h"
 6722              		.file 9 "/home/ankit/20140524/makestuff/libs/libargtable2/argtable2.h"
 6723              		.file 10 "/usr/include/x86_64-linux-gnu/bits/time.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cclRY3sg.s:5      .bss:0000000000000000 ptr
     /tmp/cclRY3sg.s:5      .bss:0000000000000008 enableBenchmarking
     /tmp/cclRY3sg.s:13     .data:0000000000000000 Key
     /tmp/cclRY3sg.s:19     .data:0000000000000008 Kack1
     /tmp/cclRY3sg.s:25     .data:0000000000000010 Kack2
     /tmp/cclRY3sg.s:29     .text:0000000000000000 isHexDigit
     /tmp/cclRY3sg.s:79     .text:000000000000003e calcChecksum
     /tmp/cclRY3sg.s:119    .text:000000000000007f getHexNibble
     /tmp/cclRY3sg.s:187    .text:00000000000000f3 getHexByte
     /tmp/cclRY3sg.s:283    .rodata:00000000000000e0 errMessages
     /tmp/cclRY3sg.s:301    .text:0000000000000197 doRead
     /tmp/cclRY3sg.s:553    .text:000000000000044f doWrite
     /tmp/cclRY3sg.s:702    .text:0000000000000643 parseLine
     /tmp/cclRY3sg.s:1947   .data:0000000000000020 nibbles
     /tmp/cclRY3sg.s:2255   .text:0000000000001711 main
     /tmp/cclRY3sg.s:5603   .text:00000000000048a4 read_chan
     /tmp/cclRY3sg.s:5834   .text:0000000000004b36 decrypter
     /tmp/cclRY3sg.s:5456   .text:00000000000046cf send_chan
     /tmp/cclRY3sg.s:6500   .text:00000000000052e7 editfile
     /tmp/cclRY3sg.s:5390   .text:0000000000004661 decToHexa32
     /tmp/cclRY3sg.s:6155   .text:0000000000004f0d encrypter
     /tmp/cclRY3sg.s:5755   .text:0000000000004a6a send_data
     /tmp/cclRY3sg.s:6464   .text:00000000000052be nthbit

UNDEFINED SYMBOLS
__stack_chk_fail
flReadChannelAsyncSubmit
errPrefix
flReadChannelAsyncAwait
fwrite
fread
flWriteChannelAsync
flAwaitAsyncWrites
bufInitialise
__errno_location
strtoul
malloc
strncpy
fopen
free
gettimeofday
printf
fclose
bufAppendConst
flReadChannel
flWriteChannel
flSelectConduit
dump
bufDestroy
stderr
fprintf
fputc
arg_str0
arg_str1
arg_uint0
arg_lit0
arg_end
arg_nullcheck
arg_parse
stdout
arg_print_syntax
puts
arg_print_glossary
arg_print_errors
flInitialise
flOpen
flLoadCustomFirmware
flLoadStandardFirmware
flSleep
putchar
fflush
flIsDeviceAvailable
flGetFirmwareVersion
flGetFirmwareID
strcmp
flFlashStandardFirmware
flFlashCustomFirmware
flSaveFirmware
flResetToggle
flIsNeroCapable
flIsCommCapable
flMultiBitPortAccess
sprintf
jtagScanChain
flProgram
flIsFPGARunning
fgetc
sleep
__isoc99_fscanf
sigRegisterHandler
sigIsRaised
readline
add_history
flClose
flFreeError
strlen
strcpy
strcat
